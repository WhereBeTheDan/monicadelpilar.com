function Carousel(t,e={}){function i(){var t=window,e=document,i=e.documentElement,n=e.getElementsByTagName("body")[0],r=t.pageYOffset||i.scrollTop||e.body.scrollTop;return{width:t.innerWidth||i.clientWidth||n.clientWidth,height:t.innerHeight||i.clientHeight||n.clientHeight,scrollTop:r}}function n(){i().width<768?(a.maxSlides=1,a.pagerType="short"):(a.maxSlides=c.maxSlides,a.pagerType="full"),a.slideWidth=u.ext.select(".carousel-wrap").getBoundingClientRect().width/a.maxSlides}function r(){s&&(n(),s.reloadSlider(a))}function o(){l.enabled||(l.enabled=!0,(a=jQuery.extend({},c,u.dataset)).slideWidth=Math.round(u.ext.select(".carousel-wrap").getBoundingClientRect().width/a.maxSlides),s=jQuery(u).find(".carousel").bxSlider(a),window.addEventListener("resize",r))}var s,a,l={},u=t,c=(u.children,e.defaults||{pager:!1,auto:!1,autoStart:!1,minSlides:1,maxSlides:3,moveSlides:1,slideWidth:null,infiniteLoop:!1,nextText:"",prevText:"",prevSelector:jQuery(u).find(".carousel-prev"),nextSelector:jQuery(u).find(".carousel-next")});return o(),{enabled:!1,inViewport:function(t,e){},refresh:r,enable:o,disable:function(){l.enabled&&(l.enabled=!1,s.destroySlider(),s=null,window.removeEventListener("resize",r))}}}function Section(t,e={}){function i(){for(var t=0,e=0,i=a;i;){if("BODY"==i.tagName){var n=i.scrollLeft||document.documentElement.scrollLeft,r=i.scrollTop||document.documentElement.scrollTop;t+=i.offsetLeft-n+i.clientLeft,e+=i.offsetTop-r+i.clientTop}else t+=i.offsetLeft-i.scrollLeft+i.clientLeft,e+=i.offsetTop-i.scrollTop+i.clientTop;i=i.offsetParent}return{x:t,y:e}}function n(t,e){windowHeight=t||window.innerHeight,r=a.ext.height(),o=i()}var r,o,s={},a=t,l=e.offsetTop||0,u=e.offsetBottom||0;return s.enabled=!1,s.inViewport=function(t,e){let i=a.ext.selectAll(".will-appear"),n=a.ext.select(".background-inner");o.y+l>t+e||o.y+r+u<t?(n&&(n.style.willChange=""),i.forEach(function(t){t.style.willChange=""})):(n&&(n.style.willChange="transform"),i.forEach(function(t){t.style.willChange="opacity, transform"}))},s.refresh=n,n(),s}function Item(t,e={}){function i(){for(var t=0,e=0,i=a;i;){if("BODY"==i.tagName){var n=i.scrollLeft||document.documentElement.scrollLeft,r=i.scrollTop||document.documentElement.scrollTop;t+=i.offsetLeft-n+i.clientLeft,e+=i.offsetTop-r+i.clientTop}else t+=i.offsetLeft-i.scrollLeft+i.clientLeft,e+=i.offsetTop-i.scrollTop+i.clientTop;i=i.offsetParent}return{x:t,y:e}}function n(t,e){windowHeight=t||window.innerHeight,r=a.ext.height(),o=i()}var r,o,s={},a=t,l=(a.parentNode,e.offsetTop||0);e.offsetBottom;return s.enabled=!1,s.inViewport=function(t,e){o.y+l>t+e?a.classList.contains("is-up")&&a.classList.remove("is-up"):a.classList.contains("is-up")||a.classList.add("is-up")},s.refresh=n,n(),s}function Background(t,e={}){function i(){for(var t=0,e=0,i=a;i;){if("BODY"==i.tagName){var n=i.scrollLeft||document.documentElement.scrollLeft,r=i.scrollTop||document.documentElement.scrollTop;t+=i.offsetLeft-n+i.clientLeft,e+=i.offsetTop-r+i.clientTop}else t+=i.offsetLeft-i.scrollLeft+i.clientLeft,e+=i.offsetTop-i.scrollTop+i.clientTop;i=i.offsetParent}return{x:t,y:e}}function n(t,e){windowHeight=t||window.innerHeight,r=a.ext.height(),o=i()}var r,o,s={},a=t,l=(a.parentNode,a.ext.select(".background-inner")),u=e.offsetTop||0,c=e.offsetBottom||0;return s.enabled=!1,s.inViewport=function(t,e){!(o.y-u>t+e||o.y+r+c<t)&&l.ext.setY(.15*-(o.y-t)).transform()},s.refresh=n,n(),s}!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e=!!t&&"length"in t&&t.length,i=ht.type(t);return"function"!==i&&!ht.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function n(t,e,i){if(ht.isFunction(e))return ht.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return ht.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(bt.test(e))return ht.filter(e,t,i);e=ht.filter(e,t)}return ht.grep(t,function(t){return ht.inArray(t,e)>-1!==i})}function r(t,e){do{t=t[e]}while(t&&1!==t.nodeType);return t}function o(t){var e={};return ht.each(t.match(Ct)||[],function(t,i){e[i]=!0}),e}function s(){it.addEventListener?(it.removeEventListener("DOMContentLoaded",a),t.removeEventListener("load",a)):(it.detachEvent("onreadystatechange",a),t.detachEvent("onload",a))}function a(){(it.addEventListener||"load"===t.event.type||"complete"===it.readyState)&&(s(),ht.ready())}function l(t,e,i){if(void 0===i&&1===t.nodeType){var n="data-"+e.replace(Dt,"-$1").toLowerCase();if("string"==typeof(i=t.getAttribute(n))){try{i="true"===i||"false"!==i&&("null"===i?null:+i+""===i?+i:Ot.test(i)?ht.parseJSON(i):i)}catch(t){}ht.data(t,e,i)}else i=void 0}return i}function u(t){var e;for(e in t)if(("data"!==e||!ht.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function c(t,e,i,n){if(At(t)){var r,o,s=ht.expando,a=t.nodeType,l=a?ht.cache:t,u=a?t[s]:t[s]&&s;if(u&&l[u]&&(n||l[u].data)||void 0!==i||"string"!=typeof e)return u||(u=a?t[s]=et.pop()||ht.guid++:s),l[u]||(l[u]=a?{}:{toJSON:ht.noop}),"object"!=typeof e&&"function"!=typeof e||(n?l[u]=ht.extend(l[u],e):l[u].data=ht.extend(l[u].data,e)),o=l[u],n||(o.data||(o.data={}),o=o.data),void 0!==i&&(o[ht.camelCase(e)]=i),"string"==typeof e?null==(r=o[e])&&(r=o[ht.camelCase(e)]):r=o,r}}function h(t,e,i){if(At(t)){var n,r,o=t.nodeType,s=o?ht.cache:t,a=o?t[ht.expando]:ht.expando;if(s[a]){if(e&&(n=i?s[a]:s[a].data)){r=(e=ht.isArray(e)?e.concat(ht.map(e,ht.camelCase)):e in n?[e]:(e=ht.camelCase(e))in n?[e]:e.split(" ")).length;for(;r--;)delete n[e[r]];if(i?!u(n):!ht.isEmptyObject(n))return}(i||(delete s[a].data,u(s[a])))&&(o?ht.cleanData([t],!0):ct.deleteExpando||s!=s.window?delete s[a]:s[a]=void 0)}}}function f(t,e,i,n){var r,o=1,s=20,a=n?function(){return n.cur()}:function(){return ht.css(t,e,"")},l=a(),u=i&&i[3]||(ht.cssNumber[e]?"":"px"),c=(ht.cssNumber[e]||"px"!==u&&+l)&&Lt.exec(ht.css(t,e));if(c&&c[3]!==u){u=u||c[3],i=i||[],c=+l||1;do{c/=o=o||".5",ht.style(t,e,c+u)}while(o!==(o=a()/l)&&1!==o&&--s)}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=r)),r}function d(t){var e=qt.split("|"),i=t.createDocumentFragment();if(i.createElement)for(;e.length;)i.createElement(e.pop());return i}function p(t,e){var i,n,r=0,o=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):void 0;if(!o)for(o=[],i=t.childNodes||t;null!=(n=i[r]);r++)!e||ht.nodeName(n,e)?o.push(n):ht.merge(o,p(n,e));return void 0===e||e&&ht.nodeName(t,e)?ht.merge([t],o):o}function m(t,e){for(var i,n=0;null!=(i=t[n]);n++)ht._data(i,"globalEval",!e||ht._data(e[n],"globalEval"))}function g(t){jt.test(t.type)&&(t.defaultChecked=t.checked)}function v(t,e,i,n,r){for(var o,s,a,l,u,c,h,f=t.length,v=d(e),_=[],y=0;y<f;y++)if((s=t[y])||0===s)if("object"===ht.type(s))ht.merge(_,s.nodeType?[s]:s);else if(Wt.test(s)){for(l=l||v.appendChild(e.createElement("div")),u=(Ft.exec(s)||["",""])[1].toLowerCase(),h=Bt[u]||Bt._default,l.innerHTML=h[1]+ht.htmlPrefilter(s)+h[2],o=h[0];o--;)l=l.lastChild;if(!ct.leadingWhitespace&&Ht.test(s)&&_.push(e.createTextNode(Ht.exec(s)[0])),!ct.tbody)for(o=(s="table"!==u||Xt.test(s)?"<table>"!==h[1]||Xt.test(s)?0:l:l.firstChild)&&s.childNodes.length;o--;)ht.nodeName(c=s.childNodes[o],"tbody")&&!c.childNodes.length&&s.removeChild(c);for(ht.merge(_,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=v.lastChild}else _.push(e.createTextNode(s));for(l&&v.removeChild(l),ct.appendChecked||ht.grep(p(_,"input"),g),y=0;s=_[y++];)if(n&&ht.inArray(s,n)>-1)r&&r.push(s);else if(a=ht.contains(s.ownerDocument,s),l=p(v.appendChild(s),"script"),a&&m(l),i)for(o=0;s=l[o++];)It.test(s.type||"")&&i.push(s);return l=null,v}function _(){return!0}function y(){return!1}function x(){try{return it.activeElement}catch(t){}}function b(t,e,i,n,r,o){var s,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)b(t,a,i,n,e[a],o);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=y;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return ht().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=ht.guid++)),t.each(function(){ht.event.add(this,e,r,n,i)})}function w(t,e){return ht.nodeName(t,"table")&&ht.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function T(t){return t.type=(null!==ht.find.attr(t,"type"))+"/"+t.type,t}function S(t){var e=ee.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function k(t,e){if(1===e.nodeType&&ht.hasData(t)){var i,n,r,o=ht._data(t),s=ht._data(e,o),a=o.events;if(a){delete s.handle,s.events={};for(i in a)for(n=0,r=a[i].length;n<r;n++)ht.event.add(e,i,a[i][n])}s.data&&(s.data=ht.extend({},s.data))}}function C(t,e){var i,n,r;if(1===e.nodeType){if(i=e.nodeName.toLowerCase(),!ct.noCloneEvent&&e[ht.expando]){r=ht._data(e);for(n in r.events)ht.removeEvent(e,n,r.handle);e.removeAttribute(ht.expando)}"script"===i&&e.text!==t.text?(T(e).text=t.text,S(e)):"object"===i?(e.parentNode&&(e.outerHTML=t.outerHTML),ct.html5Clone&&t.innerHTML&&!ht.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===i&&jt.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===i?e.defaultSelected=e.selected=t.defaultSelected:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}}function E(t,e,i,n){e=rt.apply([],e);var r,o,s,a,l,u,c=0,h=t.length,f=h-1,d=e[0],m=ht.isFunction(d);if(m||h>1&&"string"==typeof d&&!ct.checkClone&&te.test(d))return t.each(function(r){var o=t.eq(r);m&&(e[0]=d.call(this,r,o.html())),E(o,e,i,n)});if(h&&(u=v(e,t[0].ownerDocument,!1,t,n),r=u.firstChild,1===u.childNodes.length&&(u=r),r||n)){for(s=(a=ht.map(p(u,"script"),T)).length;c<h;c++)o=u,c!==f&&(o=ht.clone(o,!0,!0),s&&ht.merge(a,p(o,"script"))),i.call(t[c],o,c);if(s)for(l=a[a.length-1].ownerDocument,ht.map(a,S),c=0;c<s;c++)o=a[c],It.test(o.type||"")&&!ht._data(o,"globalEval")&&ht.contains(l,o)&&(o.src?ht._evalUrl&&ht._evalUrl(o.src):ht.globalEval((o.text||o.textContent||o.innerHTML||"").replace(ie,"")));u=r=null}return t}function P(t,e,i){for(var n,r=e?ht.filter(e,t):t,o=0;null!=(n=r[o]);o++)i||1!==n.nodeType||ht.cleanData(p(n)),n.parentNode&&(i&&ht.contains(n.ownerDocument,n)&&m(p(n,"script")),n.parentNode.removeChild(n));return t}function A(t,e){var i=ht(e.createElement(t)).appendTo(e.body),n=ht.css(i[0],"display");return i.detach(),n}function O(t){var e=it,i=oe[t];return i||("none"!==(i=A(t,e))&&i||((e=((re=(re||ht("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentWindow||re[0].contentDocument).document).write(),e.close(),i=A(t,e),re.detach()),oe[t]=i),i}function D(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function M(t){if(t in xe)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),i=ye.length;i--;)if((t=ye[i]+e)in xe)return t}function L(t,e){for(var i,n,r,o=[],s=0,a=t.length;s<a;s++)(n=t[s]).style&&(o[s]=ht._data(n,"olddisplay"),i=n.style.display,e?(o[s]||"none"!==i||(n.style.display=""),""===n.style.display&&Rt(n)&&(o[s]=ht._data(n,"olddisplay",O(n.nodeName)))):(r=Rt(n),(i&&"none"!==i||!r)&&ht._data(n,"olddisplay",r?i:ht.css(n,"display"))));for(s=0;s<a;s++)(n=t[s]).style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?o[s]||"":"none"));return t}function N(t,e,i){var n=ge.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function R(t,e,i,n,r){for(var o=i===(n?"border":"content")?4:"width"===e?1:0,s=0;o<4;o+=2)"margin"===i&&(s+=ht.css(t,i+Nt[o],!0,r)),n?("content"===i&&(s-=ht.css(t,"padding"+Nt[o],!0,r)),"margin"!==i&&(s-=ht.css(t,"border"+Nt[o]+"Width",!0,r))):(s+=ht.css(t,"padding"+Nt[o],!0,r),"padding"!==i&&(s+=ht.css(t,"border"+Nt[o]+"Width",!0,r)));return s}function z(t,e,i){var n=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=ce(t),s=ct.boxSizing&&"border-box"===ht.css(t,"boxSizing",!1,o);if(r<=0||null==r){if(((r=he(t,e,o))<0||null==r)&&(r=t.style[e]),ae.test(r))return r;n=s&&(ct.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+R(t,e,i||(s?"border":"content"),n,o)+"px"}function j(t,e,i,n,r){return new j.prototype.init(t,e,i,n,r)}function F(){return t.setTimeout(function(){be=void 0}),be=ht.now()}function I(t,e){var i,n={height:t},r=0;for(e=e?1:0;r<4;r+=2-e)n["margin"+(i=Nt[r])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function H(t,e,i){for(var n,r=(B.tweeners[e]||[]).concat(B.tweeners["*"]),o=0,s=r.length;o<s;o++)if(n=r[o].call(i,e,t))return n}function q(t,e){var i,n,r,o,s;for(i in t)if(n=ht.camelCase(i),r=e[n],o=t[i],ht.isArray(o)&&(r=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(s=ht.cssHooks[n])&&"expand"in s){o=s.expand(o),delete t[n];for(i in o)i in t||(t[i]=o[i],e[i]=r)}else e[n]=r}function B(t,e,i){var n,r,o=0,s=B.prefilters.length,a=ht.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=be||F(),i=Math.max(0,u.startTime+u.duration-e),n=1-(i/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(n);return a.notifyWith(t,[u,n,i]),n<1&&s?i:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:ht.extend({},e),opts:ht.extend(!0,{specialEasing:{},easing:ht.easing._default},i),originalProperties:e,originalOptions:i,startTime:be||F(),duration:i.duration,tweens:[],createTween:function(e,i){var n=ht.Tween(t,u.opts,e,i,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var i=0,n=e?u.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)u.tweens[i].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(q(c,u.opts.specialEasing);o<s;o++)if(n=B.prefilters[o].call(u,t,c,u.opts))return ht.isFunction(n.stop)&&(ht._queueHooks(u.elem,u.opts.queue).stop=ht.proxy(n.stop,n)),n;return ht.map(c,H,u),ht.isFunction(u.opts.start)&&u.opts.start.call(t,u),ht.fx.timer(ht.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function W(t){return ht.attr(t,"class")||""}function X(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,r=0,o=e.toLowerCase().match(Ct)||[];if(ht.isFunction(i))for(;n=o[r++];)"+"===n.charAt(0)?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Y(t,e,i,n){function r(a){var l;return o[a]=!0,ht.each(t[a]||[],function(t,a){var u=a(e,i,n);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var o={},s=t===Ve;return r(e.dataTypes[0])||!o["*"]&&r("*")}function U(t,e){var i,n,r=ht.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&ht.extend(!0,t,i),t}function $(t,e,i){for(var n,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}n||(n=s)}o=o||n}if(o)return o!==l[0]&&l.unshift(o),i[o]}function V(t,e,i,n){var r,o,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function Z(t){return t.style&&t.style.display||ht.css(t,"display")}function G(t){if(!ht.contains(t.ownerDocument||it,t))return!0;for(;t&&1===t.nodeType;){if("none"===Z(t)||"hidden"===t.type)return!0;t=t.parentNode}return!1}function Q(t,e,i,n){var r;if(ht.isArray(e))ht.each(e,function(e,r){i||Je.test(t)?n(t,r):Q(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==ht.type(e))n(t,e);else for(r in e)Q(t+"["+r+"]",e[r],i,n)}function K(){try{return new t.XMLHttpRequest}catch(t){}}function J(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function tt(t){return ht.isWindow(t)?t:9===t.nodeType&&(t.defaultView||t.parentWindow)}var et=[],it=t.document,nt=et.slice,rt=et.concat,ot=et.push,st=et.indexOf,at={},lt=at.toString,ut=at.hasOwnProperty,ct={},ht=function(t,e){return new ht.fn.init(t,e)},ft=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,dt=/^-ms-/,pt=/-([\da-z])/gi,mt=function(t,e){return e.toUpperCase()};ht.fn=ht.prototype={jquery:"1.12.4",constructor:ht,selector:"",length:0,toArray:function(){return nt.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:nt.call(this)},pushStack:function(t){var e=ht.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ht.each(this,t)},map:function(t){return this.pushStack(ht.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(nt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:ot,sort:et.sort,splice:et.splice},ht.extend=ht.fn.extend=function(){var t,e,i,n,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||ht.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(r=arguments[a]))for(n in r)t=s[n],s!==(i=r[n])&&(u&&i&&(ht.isPlainObject(i)||(e=ht.isArray(i)))?(e?(e=!1,o=t&&ht.isArray(t)?t:[]):o=t&&ht.isPlainObject(t)?t:{},s[n]=ht.extend(u,o,i)):void 0!==i&&(s[n]=i));return s},ht.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ht.type(t)},isArray:Array.isArray||function(t){return"array"===ht.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){var e=t&&t.toString();return!ht.isArray(t)&&e-parseFloat(e)+1>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==ht.type(t)||t.nodeType||ht.isWindow(t))return!1;try{if(t.constructor&&!ut.call(t,"constructor")&&!ut.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}if(!ct.ownFirst)for(e in t)return ut.call(t,e);for(e in t);return void 0===e||ut.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?at[lt.call(t)]||"object":typeof t},globalEval:function(e){e&&ht.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(dt,"ms-").replace(pt,mt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,r=0;if(i(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(ft,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?ht.merge(n,"string"==typeof t?[t]:t):ot.call(n,t)),n},inArray:function(t,e,i){var n;if(e){if(st)return st.call(e,t,i);for(n=e.length,i=i?i<0?Math.max(0,n+i):i:0;i<n;i++)if(i in e&&e[i]===t)return i}return-1},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;)t[r++]=e[n++];if(i!==i)for(;void 0!==e[n];)t[r++]=e[n++];return t.length=r,t},grep:function(t,e,i){for(var n=[],r=0,o=t.length,s=!i;r<o;r++)!e(t[r],r)!==s&&n.push(t[r]);return n},map:function(t,e,n){var r,o,s=0,a=[];if(i(t))for(r=t.length;s<r;s++)null!=(o=e(t[s],s,n))&&a.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&a.push(o);return rt.apply([],a)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(r=t[e],e=t,t=r),ht.isFunction(t))return i=nt.call(arguments,2),n=function(){return t.apply(e||this,i.concat(nt.call(arguments)))},n.guid=t.guid=t.guid||ht.guid++,n},now:function(){return+new Date},support:ct}),"function"==typeof Symbol&&(ht.fn[Symbol.iterator]=et[Symbol.iterator]),ht.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){at["[object "+e+"]"]=e.toLowerCase()});var gt=function(t){function e(t,e,i,n){var r,o,s,a,u,h,f,d,p=e&&e.ownerDocument,m=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return i;if(!n&&((e?e.ownerDocument||e:F)!==O&&A(e),e=e||O,M)){if(11!==m&&(h=mt.exec(t)))if(r=h[1]){if(9===m){if(!(s=e.getElementById(r)))return i;if(s.id===r)return i.push(s),i}else if(p&&(s=p.getElementById(r))&&z(e,s)&&s.id===r)return i.push(s),i}else{if(h[2])return G.apply(i,e.getElementsByTagName(t)),i;if((r=h[3])&&y.getElementsByClassName&&e.getElementsByClassName)return G.apply(i,e.getElementsByClassName(r)),i}if(y.qsa&&!W[t+" "]&&(!L||!L.test(t))){if(1!==m)p=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(vt,"\\$&"):e.setAttribute("id",a=j),o=(f=T(t)).length,u=ct.test(a)?"#"+a:"[id='"+a+"']";o--;)f[o]=u+" "+c(f[o]);d=f.join(","),p=gt.test(t)&&l(e.parentNode)||e}if(d)try{return G.apply(i,p.querySelectorAll(d)),i}catch(t){}finally{a===j&&e.removeAttribute("id")}}}return k(t.replace(ot,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[j]=!0,t}function r(t){var e=O.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=e}function s(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||Y)-(~t.sourceIndex||Y);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return n(function(e){return e=+e,n(function(i,n){for(var r,o=t([],i.length,e),s=o.length;s--;)i[r=o[s]]&&(i[r]=!(n[r]=i[r]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function u(){}function c(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function h(t,e,i){var n=e.dir,r=i&&"parentNode"===n,o=H++;return e.first?function(e,i,o){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,o)}:function(e,i,s){var a,l,u,c=[I,o];if(s){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,s))return!0}else for(;e=e[n];)if(1===e.nodeType||r){if(u=e[j]||(e[j]={}),l=u[e.uniqueID]||(u[e.uniqueID]={}),(a=l[n])&&a[0]===I&&a[1]===o)return c[2]=a[2];if(l[n]=c,c[2]=t(e,i,s))return!0}}}function f(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function d(t,i,n){for(var r=0,o=i.length;r<o;r++)e(t,i[r],n);return n}function p(t,e,i,n,r){for(var o,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,r)||(s.push(o),u&&e.push(a)));return s}function m(t,e,i,r,o,s){return r&&!r[j]&&(r=m(r)),o&&!o[j]&&(o=m(o,s)),n(function(n,s,a,l){var u,c,h,f=[],m=[],g=s.length,v=n||d(e||"*",a.nodeType?[a]:a,[]),_=!t||!n&&e?v:p(v,f,t,a,l),y=i?o||(n?t:g||r)?[]:s:_;if(i&&i(_,y,a,l),r)for(u=p(y,m),r(u,[],a,l),c=u.length;c--;)(h=u[c])&&(y[m[c]]=!(_[m[c]]=h));if(n){if(o||t){if(o){for(u=[],c=y.length;c--;)(h=y[c])&&u.push(_[c]=h);o(null,y=[],u,l)}for(c=y.length;c--;)(h=y[c])&&(u=o?K(n,h):f[c])>-1&&(n[u]=!(s[u]=h))}}else y=p(y===s?y.splice(g,y.length):y),o?o(null,s,y,l):G.apply(s,y)})}function g(t){for(var e,i,n,r=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,l=h(function(t){return t===e},s,!0),u=h(function(t){return K(e,t)>-1},s,!0),d=[function(t,i,n){var r=!o&&(n||i!==C)||((e=i).nodeType?l(t,i,n):u(t,i,n));return e=null,r}];a<r;a++)if(i=x.relative[t[a].type])d=[h(f(d),i)];else{if((i=x.filter[t[a].type].apply(null,t[a].matches))[j]){for(n=++a;n<r&&!x.relative[t[n].type];n++);return m(a>1&&f(d),a>1&&c(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),i,a<n&&g(t.slice(a,n)),n<r&&g(t=t.slice(n)),n<r&&c(t))}d.push(i)}return f(d)}function v(t,i){var r=i.length>0,o=t.length>0,s=function(n,s,a,l,u){var c,h,f,d=0,m="0",g=n&&[],v=[],_=C,y=n||o&&x.find.TAG("*",u),b=I+=null==_?1:Math.random()||.1,w=y.length;for(u&&(C=s===O||s||u);m!==w&&null!=(c=y[m]);m++){if(o&&c){for(h=0,s||c.ownerDocument===O||(A(c),a=!M);f=t[h++];)if(f(c,s||O,a)){l.push(c);break}u&&(I=b)}r&&((c=!f&&c)&&d--,n&&g.push(c))}if(d+=m,r&&m!==d){for(h=0;f=i[h++];)f(g,v,s,a);if(n){if(d>0)for(;m--;)g[m]||v[m]||(v[m]=V.call(l));v=p(v)}G.apply(l,v),u&&!n&&v.length>0&&d+i.length>1&&e.uniqueSort(l)}return u&&(I=b,C=_),g};return r?n(s):s}var _,y,x,b,w,T,S,k,C,E,P,A,O,D,M,L,N,R,z,j="sizzle"+1*new Date,F=t.document,I=0,H=0,q=i(),B=i(),W=i(),X=function(t,e){return t===e&&(P=!0),0},Y=1<<31,U={}.hasOwnProperty,$=[],V=$.pop,Z=$.push,G=$.push,Q=$.slice,K=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",nt=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",rt=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),st=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ut=new RegExp(nt),ct=new RegExp("^"+et+"$"),ht={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+nt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,dt=/^h\d$/i,pt=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,vt=/'|\\/g,_t=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},xt=function(){A()};try{G.apply($=Q.call(F.childNodes),F.childNodes),$[F.childNodes.length].nodeType}catch(t){G={apply:$.length?function(t,e){Z.apply(t,Q.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}y=e.support={},w=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},A=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:F;return n!==O&&9===n.nodeType&&n.documentElement?(O=n,D=O.documentElement,M=!w(O),(i=O.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xt,!1):i.attachEvent&&i.attachEvent("onunload",xt)),y.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),y.getElementsByTagName=r(function(t){return t.appendChild(O.createComment("")),!t.getElementsByTagName("*").length}),y.getElementsByClassName=pt.test(O.getElementsByClassName),y.getById=r(function(t){return D.appendChild(t).id=j,!O.getElementsByName||!O.getElementsByName(j).length}),y.getById?(x.find.ID=function(t,e){if(void 0!==e.getElementById&&M){var i=e.getElementById(t);return i?[i]:[]}},x.filter.ID=function(t){var e=t.replace(_t,yt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(_t,yt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=y.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):y.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[r++];)1===i.nodeType&&n.push(i);return n}return o},x.find.CLASS=y.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&M)return e.getElementsByClassName(t)},N=[],L=[],(y.qsa=pt.test(O.querySelectorAll))&&(r(function(t){D.appendChild(t).innerHTML="<a id='"+j+"'></a><select id='"+j+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+tt+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+j+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+j+"+*").length||L.push(".#.+[+~]")}),r(function(t){var e=O.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+tt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(y.matchesSelector=pt.test(R=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(t){y.disconnectedMatch=R.call(t,"div"),R.call(t,"[s!='']:x"),N.push("!=",nt)}),L=L.length&&new RegExp(L.join("|")),N=N.length&&new RegExp(N.join("|")),e=pt.test(D.compareDocumentPosition),z=e||pt.test(D.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return P=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!y.sortDetached&&e.compareDocumentPosition(t)===i?t===O||t.ownerDocument===F&&z(F,t)?-1:e===O||e.ownerDocument===F&&z(F,e)?1:E?K(E,t)-K(E,e):0:4&i?-1:1)}:function(t,e){if(t===e)return P=!0,0;var i,n=0,r=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!r||!o)return t===O?-1:e===O?1:r?-1:o?1:E?K(E,t)-K(E,e):0;if(r===o)return s(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?s(a[n],l[n]):a[n]===F?-1:l[n]===F?1:0},O):O},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==O&&A(t),i=i.replace(lt,"='$1']"),y.matchesSelector&&M&&!W[i+" "]&&(!N||!N.test(i))&&(!L||!L.test(i)))try{var n=R.call(t,i);if(n||y.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,O,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==O&&A(t),z(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==O&&A(t);var i=x.attrHandle[e.toLowerCase()],n=i&&U.call(x.attrHandle,e.toLowerCase())?i(t,e,!M):void 0;return void 0!==n?n:y.attributes||!M?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if(P=!y.detectDuplicates,E=!y.sortStable&&t.slice(0),t.sort(X),P){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return E=null,t},b=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=b(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=b(e);return i},(x=e.selectors={cacheLength:50,createPseudo:n,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(_t,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(_t,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ut.test(i)&&(e=T(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(_t,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=q[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&q(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var o=e.attr(r,t);return null==o?"!="===i:!i||(o+="","="===i?o===n:"!="===i?o!==n:"^="===i?n&&0===o.indexOf(n):"*="===i?n&&o.indexOf(n)>-1:"$="===i?n&&o.slice(-n.length)===n:"~="===i?(" "+o.replace(rt," ")+" ").indexOf(n)>-1:"|="===i&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var u,c,h,f,d,p,m=o!==s?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),_=!l&&!a,y=!1;if(g){if(o){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&_){for(y=(d=(u=(c=(h=(f=g)[j]||(f[j]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===I&&u[1])&&u[2],f=d&&g.childNodes[d];f=++d&&f&&f[m]||(y=d=0)||p.pop();)if(1===f.nodeType&&++y&&f===e){c[t]=[I,d,y];break}}else if(_&&(y=d=(u=(c=(h=(f=e)[j]||(f[j]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===I&&u[1]),!1===y)for(;(f=++d&&f&&f[m]||(y=d=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++y||(_&&((c=(h=f[j]||(f[j]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]=[I,y]),f!==e)););return(y-=r)===n||y%n==0&&y/n>=0}}},PSEUDO:function(t,i){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[j]?o(i):o.length>1?(r=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=o(t,i),s=r.length;s--;)t[n=K(t,r[s])]=!(e[n]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:n(function(t){var e=[],i=[],r=S(t.replace(ot,"$1"));return r[j]?n(function(t,e,i,n){for(var o,s=r(t,null,n,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,n,o){return e[0]=t,r(e,null,o,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(_t,yt),function(e){return(e.textContent||e.innerText||b(e)).indexOf(t)>-1}}),lang:n(function(t){return ct.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(_t,yt).toLowerCase(),function(e){var i;do{if(i=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===D},focus:function(t){return t===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return dt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:a(function(){return[0]}),last:a(function(t,e){return[e-1]}),eq:a(function(t,e,i){return[i<0?i+e:i]}),even:a(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:a(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:a(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:a(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=x.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[_]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(_);for(_ in{submit:!0,reset:!0})x.pseudos[_]=function(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}(_);return u.prototype=x.filters=x.pseudos,x.setFilters=new u,T=e.tokenize=function(t,i){var n,r,o,s,a,l,u,c=B[t+" "];if(c)return i?0:c.slice(0);for(a=t,l=[],u=x.preFilter;a;){n&&!(r=st.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=at.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(ot," ")}),a=a.slice(n.length));for(s in x.filter)!(r=ht[s].exec(a))||u[s]&&!(r=u[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},S=e.compile=function(t,e){var i,n=[],r=[],o=W[t+" "];if(!o){for(e||(e=T(t)),i=e.length;i--;)(o=g(e[i]))[j]?n.push(o):r.push(o);(o=W(t,v(r,n))).selector=t}return o},k=e.select=function(t,e,i,n){var r,o,s,a,u,h="function"==typeof t&&t,f=!n&&T(t=h.selector||t);if(i=i||[],1===f.length){if((o=f[0]=f[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&y.getById&&9===e.nodeType&&M&&x.relative[o[1].type]){if(!(e=(x.find.ID(s.matches[0].replace(_t,yt),e)||[])[0]))return i;h&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ht.needsContext.test(t)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((u=x.find[a])&&(n=u(s.matches[0].replace(_t,yt),gt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(r,1),!(t=n.length&&c(o)))return G.apply(i,n),i;break}}return(h||S(t,f))(n,e,!M,i,!e||gt.test(t)&&l(e.parentNode)||e),i},y.sortStable=j.split("").sort(X).join("")===j,y.detectDuplicates=!!P,A(),y.sortDetached=r(function(t){return 1&t.compareDocumentPosition(O.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),y.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(J,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);ht.find=gt,ht.expr=gt.selectors,ht.expr[":"]=ht.expr.pseudos,ht.uniqueSort=ht.unique=gt.uniqueSort,ht.text=gt.getText,ht.isXMLDoc=gt.isXML,ht.contains=gt.contains;var vt=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&ht(t).is(i))break;n.push(t)}return n},_t=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},yt=ht.expr.match.needsContext,xt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,bt=/^.[^:#\[\.,]*$/;ht.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?ht.find.matchesSelector(n,t)?[n]:[]:ht.find.matches(t,ht.grep(e,function(t){return 1===t.nodeType}))},ht.fn.extend({find:function(t){var e,i=[],n=this,r=n.length;if("string"!=typeof t)return this.pushStack(ht(t).filter(function(){for(e=0;e<r;e++)if(ht.contains(n[e],this))return!0}));for(e=0;e<r;e++)ht.find(t,n[e],i);return i=this.pushStack(r>1?ht.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(n(this,t||[],!1))},not:function(t){return this.pushStack(n(this,t||[],!0))},is:function(t){return!!n(this,"string"==typeof t&&yt.test(t)?ht(t):t||[],!1).length}});var wt,Tt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(ht.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||wt,"string"==typeof t){if(!(n="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:Tt.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof ht?e[0]:e,ht.merge(this,ht.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:it,!0)),xt.test(n[1])&&ht.isPlainObject(e))for(n in e)ht.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}if((r=it.getElementById(n[2]))&&r.parentNode){if(r.id!==n[2])return wt.find(t);this.length=1,this[0]=r}return this.context=it,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ht.isFunction(t)?void 0!==i.ready?i.ready(t):t(ht):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ht.makeArray(t,this))}).prototype=ht.fn,wt=ht(it);var St=/^(?:parents|prev(?:Until|All))/,kt={children:!0,contents:!0,next:!0,prev:!0};ht.fn.extend({has:function(t){var e,i=ht(t,this),n=i.length;return this.filter(function(){for(e=0;e<n;e++)if(ht.contains(this,i[e]))return!0})},closest:function(t,e){for(var i,n=0,r=this.length,o=[],s=yt.test(t)||"string"!=typeof t?ht(t,e||this.context):0;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(s?s.index(i)>-1:1===i.nodeType&&ht.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?ht.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?ht.inArray(this[0],ht(t)):ht.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ht.uniqueSort(ht.merge(this.get(),ht(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ht.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return vt(t,"parentNode")},parentsUntil:function(t,e,i){return vt(t,"parentNode",i)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return vt(t,"nextSibling")},prevAll:function(t){return vt(t,"previousSibling")},nextUntil:function(t,e,i){return vt(t,"nextSibling",i)},prevUntil:function(t,e,i){return vt(t,"previousSibling",i)},siblings:function(t){return _t((t.parentNode||{}).firstChild,t)},children:function(t){return _t(t.firstChild)},contents:function(t){return ht.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:ht.merge([],t.childNodes)}},function(t,e){ht.fn[t]=function(i,n){var r=ht.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=ht.filter(n,r)),this.length>1&&(kt[t]||(r=ht.uniqueSort(r)),St.test(t)&&(r=r.reverse())),this.pushStack(r)}});var Ct=/\S+/g;ht.Callbacks=function(t){t="string"==typeof t?o(t):ht.extend({},t);var e,i,n,r,s=[],a=[],l=-1,u=function(){for(r=t.once,n=e=!0;a.length;l=-1)for(i=a.shift();++l<s.length;)!1===s[l].apply(i[0],i[1])&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},c={add:function(){return s&&(i&&!e&&(l=s.length-1,a.push(i)),function e(i){ht.each(i,function(i,n){ht.isFunction(n)?t.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==ht.type(n)&&e(n)})}(arguments),i&&!e&&u()),this},remove:function(){return ht.each(arguments,function(t,e){for(var i;(i=ht.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?ht.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=!0,i||c.disable(),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=[t,(i=i||[]).slice?i.slice():i],a.push(i),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},ht.extend({Deferred:function(t){var e=[["resolve","done",ht.Callbacks("once memory"),"resolved"],["reject","fail",ht.Callbacks("once memory"),"rejected"],["notify","progress",ht.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ht.Deferred(function(i){ht.each(e,function(e,o){var s=ht.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&ht.isFunction(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[o[0]+"With"](this===n?i.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ht.extend(t,n):n}},r={};return n.pipe=n.then,ht.each(e,function(t,o){var s=o[2],a=o[3];n[o[1]]=s.add,a&&s.add(function(){i=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?n:this,arguments),this},r[o[0]+"With"]=s.fireWith}),n.promise(r),t&&t.call(r,r),r},when:function(t){var e,i,n,r=0,o=nt.call(arguments),s=o.length,a=1!==s||t&&ht.isFunction(t.promise)?s:0,l=1===a?t:ht.Deferred(),u=function(t,i,n){return function(r){i[t]=this,n[t]=arguments.length>1?nt.call(arguments):r,n===e?l.notifyWith(i,n):--a||l.resolveWith(i,n)}};if(s>1)for(e=new Array(s),i=new Array(s),n=new Array(s);r<s;r++)o[r]&&ht.isFunction(o[r].promise)?o[r].promise().progress(u(r,i,e)).done(u(r,n,o)).fail(l.reject):--a;return a||l.resolveWith(n,o),l.promise()}});var Et;ht.fn.ready=function(t){return ht.ready.promise().done(t),this},ht.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ht.readyWait++:ht.ready(!0)},ready:function(t){(!0===t?--ht.readyWait:ht.isReady)||(ht.isReady=!0,!0!==t&&--ht.readyWait>0||(Et.resolveWith(it,[ht]),ht.fn.triggerHandler&&(ht(it).triggerHandler("ready"),ht(it).off("ready"))))}}),ht.ready.promise=function(e){if(!Et)if(Et=ht.Deferred(),"complete"===it.readyState||"loading"!==it.readyState&&!it.documentElement.doScroll)t.setTimeout(ht.ready);else if(it.addEventListener)it.addEventListener("DOMContentLoaded",a),t.addEventListener("load",a);else{it.attachEvent("onreadystatechange",a),t.attachEvent("onload",a);var i=!1;try{i=null==t.frameElement&&it.documentElement}catch(t){}i&&i.doScroll&&function e(){if(!ht.isReady){try{i.doScroll("left")}catch(i){return t.setTimeout(e,50)}s(),ht.ready()}}()}return Et.promise(e)},ht.ready.promise();var Pt;for(Pt in ht(ct))break;ct.ownFirst="0"===Pt,ct.inlineBlockNeedsLayout=!1,ht(function(){var t,e,i,n;(i=it.getElementsByTagName("body")[0])&&i.style&&(e=it.createElement("div"),(n=it.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",i.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ct.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(i.style.zoom=1)),i.removeChild(n))}),function(){var t=it.createElement("div");ct.deleteExpando=!0;try{delete t.test}catch(t){ct.deleteExpando=!1}t=null}();var At=function(t){var e=ht.noData[(t.nodeName+" ").toLowerCase()],i=+t.nodeType||1;return(1===i||9===i)&&(!e||!0!==e&&t.getAttribute("classid")===e)},Ot=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Dt=/([A-Z])/g;ht.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return!!(t=t.nodeType?ht.cache[t[ht.expando]]:t[ht.expando])&&!u(t)},data:function(t,e,i){return c(t,e,i)},removeData:function(t,e){return h(t,e)},_data:function(t,e,i){return c(t,e,i,!0)},_removeData:function(t,e){return h(t,e,!0)}}),ht.fn.extend({data:function(t,e){var i,n,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=ht.data(o),1===o.nodeType&&!ht._data(o,"parsedAttrs"))){for(i=s.length;i--;)s[i]&&0===(n=s[i].name).indexOf("data-")&&l(o,n=ht.camelCase(n.slice(5)),r[n]);ht._data(o,"parsedAttrs",!0)}return r}return"object"==typeof t?this.each(function(){ht.data(this,t)}):arguments.length>1?this.each(function(){ht.data(this,t,e)}):o?l(o,t,ht.data(o,t)):void 0},removeData:function(t){return this.each(function(){ht.removeData(this,t)})}}),ht.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=ht._data(t,e),i&&(!n||ht.isArray(i)?n=ht._data(t,e,ht.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=ht.queue(t,e),n=i.length,r=i.shift(),o=ht._queueHooks(t,e);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete o.stop,r.call(t,function(){ht.dequeue(t,e)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return ht._data(t,i)||ht._data(t,i,{empty:ht.Callbacks("once memory").add(function(){ht._removeData(t,e+"queue"),ht._removeData(t,i)})})}}),ht.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?ht.queue(this[0],t):void 0===e?this:this.each(function(){var i=ht.queue(this,t,e);ht._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&ht.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ht.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=ht.Deferred(),o=this,s=this.length,a=function(){--n||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(i=ht._data(o[s],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}}),function(){var t;ct.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,i,n;return(i=it.getElementsByTagName("body")[0])&&i.style?(e=it.createElement("div"),n=it.createElement("div"),n.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",i.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(it.createElement("div")).style.width="5px",t=3!==e.offsetWidth),i.removeChild(n),t):void 0}}();var Mt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Lt=new RegExp("^(?:([+-])=|)("+Mt+")([a-z%]*)$","i"),Nt=["Top","Right","Bottom","Left"],Rt=function(t,e){return t=e||t,"none"===ht.css(t,"display")||!ht.contains(t.ownerDocument,t)},zt=function(t,e,i,n,r,o,s){var a=0,l=t.length,u=null==i;if("object"===ht.type(i)){r=!0;for(a in i)zt(t,e,a,i[a],!0,o,s)}else if(void 0!==n&&(r=!0,ht.isFunction(n)||(s=!0),u&&(s?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(ht(t),i)})),e))for(;a<l;a++)e(t[a],i,s?n:n.call(t[a],a,e(t[a],i)));return r?t:u?e.call(t):l?e(t[0],i):o},jt=/^(?:checkbox|radio)$/i,Ft=/<([\w:-]+)/,It=/^$|\/(?:java|ecma)script/i,Ht=/^\s+/,qt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var t=it.createElement("div"),e=it.createDocumentFragment(),i=it.createElement("input");t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ct.leadingWhitespace=3===t.firstChild.nodeType,ct.tbody=!t.getElementsByTagName("tbody").length,ct.htmlSerialize=!!t.getElementsByTagName("link").length,ct.html5Clone="<:nav></:nav>"!==it.createElement("nav").cloneNode(!0).outerHTML,i.type="checkbox",i.checked=!0,e.appendChild(i),ct.appendChecked=i.checked,t.innerHTML="<textarea>x</textarea>",ct.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,e.appendChild(t),(i=it.createElement("input")).setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),t.appendChild(i),ct.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ct.noCloneEvent=!!t.addEventListener,t[ht.expando]=1,ct.attributes=!t.getAttribute(ht.expando)}();var Bt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ct.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Bt.optgroup=Bt.option,Bt.tbody=Bt.tfoot=Bt.colgroup=Bt.caption=Bt.thead,Bt.th=Bt.td;var Wt=/<|&#?\w+;/,Xt=/<tbody/i;!function(){var e,i,n=it.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})i="on"+e,(ct[e]=i in t)||(n.setAttribute(i,"t"),ct[e]=!1===n.attributes[i].expando);n=null}();var Yt=/^(?:input|select|textarea)$/i,Ut=/^key/,$t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Vt=/^(?:focusinfocus|focusoutblur)$/,Zt=/^([^.]*)(?:\.(.+)|)/;ht.event={global:{},add:function(t,e,i,n,r){var o,s,a,l,u,c,h,f,d,p,m,g=ht._data(t);if(g){for(i.handler&&(i=(l=i).handler,r=l.selector),i.guid||(i.guid=ht.guid++),(s=g.events)||(s=g.events={}),(c=g.handle)||((c=g.handle=function(t){return void 0===ht||t&&ht.event.triggered===t.type?void 0:ht.event.dispatch.apply(c.elem,arguments)}).elem=t),a=(e=(e||"").match(Ct)||[""]).length;a--;)d=m=(o=Zt.exec(e[a])||[])[1],p=(o[2]||"").split(".").sort(),d&&(u=ht.event.special[d]||{},d=(r?u.delegateType:u.bindType)||d,u=ht.event.special[d]||{},h=ht.extend({type:d,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&ht.expr.match.needsContext.test(r),namespace:p.join(".")},l),(f=s[d])||((f=s[d]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,p,c)||(t.addEventListener?t.addEventListener(d,c,!1):t.attachEvent&&t.attachEvent("on"+d,c))),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),r?f.splice(f.delegateCount++,0,h):f.push(h),ht.event.global[d]=!0);t=null}},remove:function(t,e,i,n,r){var o,s,a,l,u,c,h,f,d,p,m,g=ht.hasData(t)&&ht._data(t);if(g&&(c=g.events)){for(u=(e=(e||"").match(Ct)||[""]).length;u--;)if(a=Zt.exec(e[u])||[],d=m=a[1],p=(a[2]||"").split(".").sort(),d){for(h=ht.event.special[d]||{},f=c[d=(n?h.delegateType:h.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;o--;)s=f[o],!r&&m!==s.origType||i&&i.guid!==s.guid||a&&!a.test(s.namespace)||n&&n!==s.selector&&("**"!==n||!s.selector)||(f.splice(o,1),s.selector&&f.delegateCount--,h.remove&&h.remove.call(t,s));l&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,p,g.handle)||ht.removeEvent(t,d,g.handle),delete c[d])}else for(d in c)ht.event.remove(t,d+e[u],i,n,!0);ht.isEmptyObject(c)&&(delete g.handle,ht._removeData(t,"events"))}},trigger:function(e,i,n,r){var o,s,a,l,u,c,h,f=[n||it],d=ut.call(e,"type")?e.type:e,p=ut.call(e,"namespace")?e.namespace.split("."):[];if(a=c=n=n||it,3!==n.nodeType&&8!==n.nodeType&&!Vt.test(d+ht.event.triggered)&&(d.indexOf(".")>-1&&(d=(p=d.split(".")).shift(),p.sort()),s=d.indexOf(":")<0&&"on"+d,e=e[ht.expando]?e:new ht.Event(d,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:ht.makeArray(i,[e]),u=ht.event.special[d]||{},r||!u.trigger||!1!==u.trigger.apply(n,i))){if(!r&&!u.noBubble&&!ht.isWindow(n)){for(l=u.delegateType||d,Vt.test(l+d)||(a=a.parentNode);a;a=a.parentNode)f.push(a),c=a;c===(n.ownerDocument||it)&&f.push(c.defaultView||c.parentWindow||t)}for(h=0;(a=f[h++])&&!e.isPropagationStopped();)e.type=h>1?l:u.bindType||d,(o=(ht._data(a,"events")||{})[e.type]&&ht._data(a,"handle"))&&o.apply(a,i),(o=s&&a[s])&&o.apply&&At(a)&&(e.result=o.apply(a,i),!1===e.result&&e.preventDefault());if(e.type=d,!r&&!e.isDefaultPrevented()&&(!u._default||!1===u._default.apply(f.pop(),i))&&At(n)&&s&&n[d]&&!ht.isWindow(n)){(c=n[s])&&(n[s]=null),ht.event.triggered=d;try{n[d]()}catch(t){}ht.event.triggered=void 0,c&&(n[s]=c)}return e.result}},dispatch:function(t){t=ht.event.fix(t);var e,i,n,r,o,s=[],a=nt.call(arguments),l=(ht._data(this,"events")||{})[t.type]||[],u=ht.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,t)){for(s=ht.event.handlers.call(this,t,l),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,i=0;(o=r.handlers[i++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,void 0!==(n=((ht.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(t.result=n)&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,n,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(n=[],i=0;i<a;i++)void 0===n[r=(o=e[i]).selector+" "]&&(n[r]=o.needsContext?ht(r,this).index(l)>-1:ht.find(r,this,null,[l]).length),n[r]&&n.push(o);n.length&&s.push({elem:l,handlers:n})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},fix:function(t){if(t[ht.expando])return t;var e,i,n,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=$t.test(r)?this.mouseHooks:Ut.test(r)?this.keyHooks:{}),n=s.props?this.props.concat(s.props):this.props,t=new ht.Event(o),e=n.length;e--;)t[i=n[e]]=o[i];return t.target||(t.target=o.srcElement||it),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,s.filter?s.filter(t,o):t},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,n,r,o=e.button,s=e.fromElement;return null==t.pageX&&null!=e.clientX&&(r=(n=t.target.ownerDocument||it).documentElement,i=n.body,t.pageX=e.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),!t.relatedTarget&&s&&(t.relatedTarget=s===t.target?e.toElement:s),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(ht.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(t){return ht.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i){var n=ht.extend(new ht.Event,i,{type:t,isSimulated:!0});ht.event.trigger(n,null,e),n.isDefaultPrevented()&&i.preventDefault()}},ht.removeEvent=it.removeEventListener?function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)}:function(t,e,i){var n="on"+e;t.detachEvent&&(void 0===t[n]&&(t[n]=null),t.detachEvent(n,i))},ht.Event=function(t,e){if(!(this instanceof ht.Event))return new ht.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_:y):this.type=t,e&&ht.extend(this,e),this.timeStamp=t&&t.timeStamp||ht.now(),this[ht.expando]=!0},ht.Event.prototype={constructor:ht.Event,isDefaultPrevented:y,isPropagationStopped:y,isImmediatePropagationStopped:y,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_,t&&!this.isSimulated&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},ht.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ht.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===n||ht.contains(n,r))||(t.type=o.origType,i=o.handler.apply(this,arguments),t.type=e),i}}}),ct.submit||(ht.event.special.submit={setup:function(){if(ht.nodeName(this,"form"))return!1;ht.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,i=ht.nodeName(e,"input")||ht.nodeName(e,"button")?ht.prop(e,"form"):void 0;i&&!ht._data(i,"submit")&&(ht.event.add(i,"submit._submit",function(t){t._submitBubble=!0}),ht._data(i,"submit",!0))})},postDispatch:function(t){t._submitBubble&&(delete t._submitBubble,this.parentNode&&!t.isTrigger&&ht.event.simulate("submit",this.parentNode,t))},teardown:function(){if(ht.nodeName(this,"form"))return!1;ht.event.remove(this,"._submit")}}),ct.change||(ht.event.special.change={setup:function(){if(Yt.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(ht.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._justChanged=!0)}),ht.event.add(this,"click._change",function(t){this._justChanged&&!t.isTrigger&&(this._justChanged=!1),ht.event.simulate("change",this,t)})),!1;ht.event.add(this,"beforeactivate._change",function(t){var e=t.target;Yt.test(e.nodeName)&&!ht._data(e,"change")&&(ht.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||ht.event.simulate("change",this.parentNode,t)}),ht._data(e,"change",!0))})},handle:function(t){var e=t.target;if(this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type)return t.handleObj.handler.apply(this,arguments)},teardown:function(){return ht.event.remove(this,"._change"),!Yt.test(this.nodeName)}}),ct.focusin||ht.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){ht.event.simulate(e,t.target,ht.event.fix(t))};ht.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=ht._data(n,e);r||n.addEventListener(t,i,!0),ht._data(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=ht._data(n,e)-1;r?ht._data(n,e,r):(n.removeEventListener(t,i,!0),ht._removeData(n,e))}}}),ht.fn.extend({on:function(t,e,i,n){return b(this,t,e,i,n)},one:function(t,e,i,n){return b(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,ht(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=y),this.each(function(){ht.event.remove(this,t,i,e)})},trigger:function(t,e){return this.each(function(){ht.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return ht.event.trigger(t,e,i,!0)}});var Gt=/ jQuery\d+="(?:null|\d+)"/g,Qt=new RegExp("<(?:"+qt+")[\\s/>]","i"),Kt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Jt=/<script|<style|<link/i,te=/checked\s*(?:[^=]|=\s*.checked.)/i,ee=/^true\/(.*)/,ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ne=d(it).appendChild(it.createElement("div"));ht.extend({htmlPrefilter:function(t){return t.replace(Kt,"<$1></$2>")},clone:function(t,e,i){var n,r,o,s,a,l=ht.contains(t.ownerDocument,t);if(ct.html5Clone||ht.isXMLDoc(t)||!Qt.test("<"+t.nodeName+">")?o=t.cloneNode(!0):(ne.innerHTML=t.outerHTML,ne.removeChild(o=ne.firstChild)),!(ct.noCloneEvent&&ct.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ht.isXMLDoc(t)))for(n=p(o),a=p(t),s=0;null!=(r=a[s]);++s)n[s]&&C(r,n[s]);if(e)if(i)for(a=a||p(t),n=n||p(o),s=0;null!=(r=a[s]);s++)k(r,n[s]);else k(t,o);return(n=p(o,"script")).length>0&&m(n,!l&&p(t,"script")),n=a=r=null,o},cleanData:function(t,e){for(var i,n,r,o,s=0,a=ht.expando,l=ht.cache,u=ct.attributes,c=ht.event.special;null!=(i=t[s]);s++)if((e||At(i))&&(r=i[a],o=r&&l[r])){if(o.events)for(n in o.events)c[n]?ht.event.remove(i,n):ht.removeEvent(i,n,o.handle);l[r]&&(delete l[r],u||void 0===i.removeAttribute?i[a]=void 0:i.removeAttribute(a),et.push(r))}}}),ht.fn.extend({domManip:E,detach:function(t){return P(this,t,!0)},remove:function(t){return P(this,t)},text:function(t){return zt(this,function(t){return void 0===t?ht.text(this):this.empty().append((this[0]&&this[0].ownerDocument||it).createTextNode(t))},null,t,arguments.length)},append:function(){return E(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||w(this,t).appendChild(t)})},prepend:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=w(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&ht.cleanData(p(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&ht.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ht.clone(this,t,e)})},html:function(t){return zt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(Gt,""):void 0;if("string"==typeof t&&!Jt.test(t)&&(ct.htmlSerialize||!Qt.test(t))&&(ct.leadingWhitespace||!Ht.test(t))&&!Bt[(Ft.exec(t)||["",""])[1].toLowerCase()]){t=ht.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(ht.cleanData(p(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return E(this,arguments,function(e){var i=this.parentNode;ht.inArray(this,t)<0&&(ht.cleanData(p(this)),i&&i.replaceChild(e,this))},t)}}),ht.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ht.fn[t]=function(t){for(var i,n=0,r=[],o=ht(t),s=o.length-1;n<=s;n++)i=n===s?this:this.clone(!0),ht(o[n])[e](i),ot.apply(r,i.get());return this.pushStack(r)}});var re,oe={HTML:"block",BODY:"block"},se=/^margin/,ae=new RegExp("^("+Mt+")(?!px)[a-z%]+$","i"),le=function(t,e,i,n){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=i.apply(t,n||[]);for(o in e)t.style[o]=s[o];return r},ue=it.documentElement;!function(){function e(){var e,c,h=it.documentElement;h.appendChild(l),u.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i=r=a=!1,n=s=!0,t.getComputedStyle&&(c=t.getComputedStyle(u),i="1%"!==(c||{}).top,a="2px"===(c||{}).marginLeft,r="4px"===(c||{width:"4px"}).width,u.style.marginRight="50%",n="4px"===(c||{marginRight:"4px"}).marginRight,(e=u.appendChild(it.createElement("div"))).style.cssText=u.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",e.style.marginRight=e.style.width="0",u.style.width="1px",s=!parseFloat((t.getComputedStyle(e)||{}).marginRight),u.removeChild(e)),u.style.display="none",(o=0===u.getClientRects().length)&&(u.style.display="",u.innerHTML="<table><tr><td></td><td>t</td></tr></table>",u.childNodes[0].style.borderCollapse="separate",(e=u.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(o=0===e[0].offsetHeight)&&(e[0].style.display="",e[1].style.display="none",o=0===e[0].offsetHeight)),h.removeChild(l)}var i,n,r,o,s,a,l=it.createElement("div"),u=it.createElement("div");u.style&&(u.style.cssText="float:left;opacity:.5",ct.opacity="0.5"===u.style.opacity,ct.cssFloat=!!u.style.cssFloat,u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",ct.clearCloneStyle="content-box"===u.style.backgroundClip,(l=it.createElement("div")).style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",u.innerHTML="",l.appendChild(u),ct.boxSizing=""===u.style.boxSizing||""===u.style.MozBoxSizing||""===u.style.WebkitBoxSizing,ht.extend(ct,{reliableHiddenOffsets:function(){return null==i&&e(),o},boxSizingReliable:function(){return null==i&&e(),r},pixelMarginRight:function(){return null==i&&e(),n},pixelPosition:function(){return null==i&&e(),i},reliableMarginRight:function(){return null==i&&e(),s},reliableMarginLeft:function(){return null==i&&e(),a}}))}();var ce,he,fe=/^(top|right|bottom|left)$/;t.getComputedStyle?(ce=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)},he=function(t,e,i){var n,r,o,s,a=t.style;return i=i||ce(t),""!==(s=i?i.getPropertyValue(e)||i[e]:void 0)&&void 0!==s||ht.contains(t.ownerDocument,t)||(s=ht.style(t,e)),i&&!ct.pixelMarginRight()&&ae.test(s)&&se.test(e)&&(n=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=r,a.maxWidth=o),void 0===s?s:s+""}):ue.currentStyle&&(ce=function(t){return t.currentStyle},he=function(t,e,i){var n,r,o,s,a=t.style;return i=i||ce(t),null==(s=i?i[e]:void 0)&&a&&a[e]&&(s=a[e]),ae.test(s)&&!fe.test(e)&&(n=a.left,(o=(r=t.runtimeStyle)&&r.left)&&(r.left=t.currentStyle.left),a.left="fontSize"===e?"1em":s,s=a.pixelLeft+"px",a.left=n,o&&(r.left=o)),void 0===s?s:s+""||"auto"});var de=/alpha\([^)]*\)/i,pe=/opacity\s*=\s*([^)]*)/i,me=/^(none|table(?!-c[ea]).+)/,ge=new RegExp("^("+Mt+")(.*)$","i"),ve={position:"absolute",visibility:"hidden",display:"block"},_e={letterSpacing:"0",fontWeight:"400"},ye=["Webkit","O","Moz","ms"],xe=it.createElement("div").style;ht.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=he(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:ct.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=ht.camelCase(e),l=t.style;if(e=ht.cssProps[a]||(ht.cssProps[a]=M(a)||a),s=ht.cssHooks[e]||ht.cssHooks[a],void 0===i)return s&&"get"in s&&void 0!==(r=s.get(t,!1,n))?r:l[e];if("string"==(o=typeof i)&&(r=Lt.exec(i))&&r[1]&&(i=f(t,e,r),o="number"),null!=i&&i===i&&("number"===o&&(i+=r&&r[3]||(ht.cssNumber[a]?"":"px")),ct.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),!(s&&"set"in s&&void 0===(i=s.set(t,i,n)))))try{l[e]=i}catch(t){}}},css:function(t,e,i,n){var r,o,s,a=ht.camelCase(e);return e=ht.cssProps[a]||(ht.cssProps[a]=M(a)||a),(s=ht.cssHooks[e]||ht.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,i)),void 0===o&&(o=he(t,e,n)),"normal"===o&&e in _e&&(o=_e[e]),""===i||i?(r=parseFloat(o),!0===i||isFinite(r)?r||0:o):o}}),ht.each(["height","width"],function(t,e){ht.cssHooks[e]={get:function(t,i,n){if(i)return me.test(ht.css(t,"display"))&&0===t.offsetWidth?le(t,ve,function(){return z(t,e,n)}):z(t,e,n)},set:function(t,i,n){var r=n&&ce(t);return N(0,i,n?R(t,e,n,ct.boxSizing&&"border-box"===ht.css(t,"boxSizing",!1,r),r):0)}}}),ct.opacity||(ht.cssHooks.opacity={get:function(t,e){return pe.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var i=t.style,n=t.currentStyle,r=ht.isNumeric(e)?"alpha(opacity="+100*e+")":"",o=n&&n.filter||i.filter||"";i.zoom=1,(e>=1||""===e)&&""===ht.trim(o.replace(de,""))&&i.removeAttribute&&(i.removeAttribute("filter"),""===e||n&&!n.filter)||(i.filter=de.test(o)?o.replace(de,r):o+" "+r)}}),ht.cssHooks.marginRight=D(ct.reliableMarginRight,function(t,e){if(e)return le(t,{display:"inline-block"},he,[t,"marginRight"])}),ht.cssHooks.marginLeft=D(ct.reliableMarginLeft,function(t,e){if(e)return(parseFloat(he(t,"marginLeft"))||(ht.contains(t.ownerDocument,t)?t.getBoundingClientRect().left-le(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}):0))+"px"}),ht.each({margin:"",padding:"",border:"Width"},function(t,e){ht.cssHooks[t+e]={expand:function(i){for(var n=0,r={},o="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+Nt[n]+e]=o[n]||o[n-2]||o[0];return r}},se.test(t)||(ht.cssHooks[t+e].set=N)}),ht.fn.extend({css:function(t,e){return zt(this,function(t,e,i){var n,r,o={},s=0;if(ht.isArray(e)){for(n=ce(t),r=e.length;s<r;s++)o[e[s]]=ht.css(t,e[s],!1,n);return o}return void 0!==i?ht.style(t,e,i):ht.css(t,e)},t,e,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Rt(this)?ht(this).show():ht(this).hide()})}}),ht.Tween=j,j.prototype={constructor:j,init:function(t,e,i,n,r,o){this.elem=t,this.prop=i,this.easing=r||ht.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(ht.cssNumber[i]?"":"px")},cur:function(){var t=j.propHooks[this.prop];return t&&t.get?t.get(this):j.propHooks._default.get(this)},run:function(t){var e,i=j.propHooks[this.prop];return this.options.duration?this.pos=e=ht.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):j.propHooks._default.set(this),this}},j.prototype.init.prototype=j.prototype,j.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ht.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){ht.fx.step[t.prop]?ht.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ht.cssProps[t.prop]]&&!ht.cssHooks[t.prop]?t.elem[t.prop]=t.now:ht.style(t.elem,t.prop,t.now+t.unit)}}},j.propHooks.scrollTop=j.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ht.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ht.fx=j.prototype.init,ht.fx.step={};var be,we,Te=/^(?:toggle|show|hide)$/,Se=/queueHooks$/;ht.Animation=ht.extend(B,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return f(i.elem,t,Lt.exec(e),i),i}]},tweener:function(t,e){ht.isFunction(t)?(e=t,t=["*"]):t=t.match(Ct);for(var i,n=0,r=t.length;n<r;n++)i=t[n],B.tweeners[i]=B.tweeners[i]||[],B.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,r,o,s,a,l,u,c=this,h={},f=t.style,d=t.nodeType&&Rt(t),p=ht._data(t,"fxshow");i.queue||(null==(a=ht._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,ht.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===("none"===(u=ht.css(t,"display"))?ht._data(t,"olddisplay")||O(t.nodeName):u)&&"none"===ht.css(t,"float")&&(ct.inlineBlockNeedsLayout&&"inline"!==O(t.nodeName)?f.zoom=1:f.display="inline-block")),i.overflow&&(f.overflow="hidden",ct.shrinkWrapBlocks()||c.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}));for(n in e)if(r=e[n],Te.exec(r)){if(delete e[n],o=o||"toggle"===r,r===(d?"hide":"show")){if("show"!==r||!p||void 0===p[n])continue;d=!0}h[n]=p&&p[n]||ht.style(t,n)}else u=void 0;if(ht.isEmptyObject(h))"inline"===("none"===u?O(t.nodeName):u)&&(f.display=u);else{p?"hidden"in p&&(d=p.hidden):p=ht._data(t,"fxshow",{}),o&&(p.hidden=!d),d?ht(t).show():c.done(function(){ht(t).hide()}),c.done(function(){var e;ht._removeData(t,"fxshow");for(e in h)ht.style(t,e,h[e])});for(n in h)s=H(d?p[n]:0,n,c),n in p||(p[n]=s.start,d&&(s.end=s.start,s.start="width"===n||"height"===n?1:0))}}],prefilter:function(t,e){e?B.prefilters.unshift(t):B.prefilters.push(t)}}),ht.speed=function(t,e,i){var n=t&&"object"==typeof t?ht.extend({},t):{complete:i||!i&&e||ht.isFunction(t)&&t,duration:t,easing:i&&e||e&&!ht.isFunction(e)&&e};return n.duration=ht.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in ht.fx.speeds?ht.fx.speeds[n.duration]:ht.fx.speeds._default,null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){ht.isFunction(n.old)&&n.old.call(this),n.queue&&ht.dequeue(this,n.queue)},n},ht.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Rt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var r=ht.isEmptyObject(t),o=ht.speed(e,i,n),s=function(){var e=B(this,ht.extend({},t),o);(r||ht._data(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=ht.timers,s=ht._data(this);if(r)s[r]&&s[r].stop&&n(s[r]);else for(r in s)s[r]&&s[r].stop&&Se.test(r)&&n(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(i),e=!1,o.splice(r,1));!e&&i||ht.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=ht._data(this),n=i[t+"queue"],r=i[t+"queueHooks"],o=ht.timers,s=n?n.length:0;for(i.finish=!0,ht.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),ht.each(["toggle","show","hide"],function(t,e){var i=ht.fn[e];ht.fn[e]=function(t,n,r){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(I(e,!0),t,n,r)}}),ht.each({slideDown:I("show"),slideUp:I("hide"),slideToggle:I("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ht.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),ht.timers=[],ht.fx.tick=function(){var t,e=ht.timers,i=0;for(be=ht.now();i<e.length;i++)(t=e[i])()||e[i]!==t||e.splice(i--,1);e.length||ht.fx.stop(),be=void 0},ht.fx.timer=function(t){ht.timers.push(t),t()?ht.fx.start():ht.timers.pop()},ht.fx.interval=13,ht.fx.start=function(){we||(we=t.setInterval(ht.fx.tick,ht.fx.interval))},ht.fx.stop=function(){t.clearInterval(we),we=null},ht.fx.speeds={slow:600,fast:200,_default:400},ht.fn.delay=function(e,i){return e=ht.fx?ht.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t,e=it.createElement("input"),i=it.createElement("div"),n=it.createElement("select"),r=n.appendChild(it.createElement("option"));(i=it.createElement("div")).setAttribute("className","t"),i.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",t=i.getElementsByTagName("a")[0],e.setAttribute("type","checkbox"),i.appendChild(e),(t=i.getElementsByTagName("a")[0]).style.cssText="top:1px",ct.getSetAttribute="t"!==i.className,ct.style=/top/.test(t.getAttribute("style")),ct.hrefNormalized="/a"===t.getAttribute("href"),ct.checkOn=!!e.value,ct.optSelected=r.selected,ct.enctype=!!it.createElement("form").enctype,n.disabled=!0,ct.optDisabled=!r.disabled,(e=it.createElement("input")).setAttribute("value",""),ct.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ct.radioValue="t"===e.value}();var ke=/\r/g,Ce=/[\x20\t\r\n\f]+/g;ht.fn.extend({val:function(t){var e,i,n,r=this[0];if(arguments.length)return n=ht.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(null==(r=n?t.call(this,i,ht(this).val()):t)?r="":"number"==typeof r?r+="":ht.isArray(r)&&(r=ht.map(r,function(t){return null==t?"":t+""})),(e=ht.valHooks[this.type]||ht.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return(e=ht.valHooks[r.type]||ht.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(ke,""):null==i?"":i}}),ht.extend({valHooks:{option:{get:function(t){var e=ht.find.attr(t,"value");return null!=e?e:ht.trim(ht.text(t)).replace(Ce," ")}},select:{get:function(t){for(var e,i,n=t.options,r=t.selectedIndex,o="select-one"===t.type||r<0,s=o?null:[],a=o?r+1:n.length,l=r<0?a:o?r:0;l<a;l++)if(((i=n[l]).selected||l===r)&&(ct.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!ht.nodeName(i.parentNode,"optgroup"))){if(e=ht(i).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var i,n,r=t.options,o=ht.makeArray(e),s=r.length;s--;)if(n=r[s],ht.inArray(ht.valHooks.option.get(n),o)>-1)try{n.selected=i=!0}catch(t){n.scrollHeight}else n.selected=!1;return i||(t.selectedIndex=-1),r}}}}),ht.each(["radio","checkbox"],function(){ht.valHooks[this]={set:function(t,e){if(ht.isArray(e))return t.checked=ht.inArray(ht(t).val(),e)>-1}},ct.checkOn||(ht.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Ee,Pe,Ae=ht.expr.attrHandle,Oe=/^(?:checked|selected)$/i,De=ct.getSetAttribute,Me=ct.input;ht.fn.extend({attr:function(t,e){return zt(this,ht.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ht.removeAttr(this,t)})}}),ht.extend({attr:function(t,e,i){var n,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?ht.prop(t,e,i):(1===o&&ht.isXMLDoc(t)||(e=e.toLowerCase(),r=ht.attrHooks[e]||(ht.expr.match.bool.test(e)?Pe:Ee)),void 0!==i?null===i?void ht.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:null==(n=ht.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!ct.radioValue&&"radio"===e&&ht.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n,r=0,o=e&&e.match(Ct);if(o&&1===t.nodeType)for(;i=o[r++];)n=ht.propFix[i]||i,ht.expr.match.bool.test(i)?Me&&De||!Oe.test(i)?t[n]=!1:t[ht.camelCase("default-"+i)]=t[n]=!1:ht.attr(t,i,""),t.removeAttribute(De?i:n)}}),Pe={set:function(t,e,i){return!1===e?ht.removeAttr(t,i):Me&&De||!Oe.test(i)?t.setAttribute(!De&&ht.propFix[i]||i,i):t[ht.camelCase("default-"+i)]=t[i]=!0,i}},ht.each(ht.expr.match.bool.source.match(/\w+/g),function(t,e){var i=Ae[e]||ht.find.attr;Me&&De||!Oe.test(e)?Ae[e]=function(t,e,n){var r,o;return n||(o=Ae[e],Ae[e]=r,r=null!=i(t,e,n)?e.toLowerCase():null,Ae[e]=o),r}:Ae[e]=function(t,e,i){if(!i)return t[ht.camelCase("default-"+e)]?e.toLowerCase():null}}),Me&&De||(ht.attrHooks.value={set:function(t,e,i){if(!ht.nodeName(t,"input"))return Ee&&Ee.set(t,e,i);t.defaultValue=e}}),De||(Ee={set:function(t,e,i){var n=t.getAttributeNode(i);if(n||t.setAttributeNode(n=t.ownerDocument.createAttribute(i)),n.value=e+="","value"===i||e===t.getAttribute(i))return e}},Ae.id=Ae.name=Ae.coords=function(t,e,i){var n;if(!i)return(n=t.getAttributeNode(e))&&""!==n.value?n.value:null},ht.valHooks.button={get:function(t,e){var i=t.getAttributeNode(e);if(i&&i.specified)return i.value},set:Ee.set},ht.attrHooks.contenteditable={set:function(t,e,i){Ee.set(t,""!==e&&e,i)}},ht.each(["width","height"],function(t,e){ht.attrHooks[e]={set:function(t,i){if(""===i)return t.setAttribute(e,"auto"),i}}})),ct.style||(ht.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var Le=/^(?:input|select|textarea|button|object)$/i,Ne=/^(?:a|area)$/i;ht.fn.extend({prop:function(t,e){return zt(this,ht.prop,t,e,arguments.length>1)},removeProp:function(t){return t=ht.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(t){}})}}),ht.extend({prop:function(t,e,i){var n,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ht.isXMLDoc(t)||(e=ht.propFix[e]||e,r=ht.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=ht.find.attr(t,"tabindex");return e?parseInt(e,10):Le.test(t.nodeName)||Ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ct.hrefNormalized||ht.each(["href","src"],function(t,e){ht.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),ct.optSelected||(ht.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ht.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ht.propFix[this.toLowerCase()]=this}),ct.enctype||(ht.propFix.enctype="encoding");var Re=/[\t\r\n\f]/g;ht.fn.extend({addClass:function(t){var e,i,n,r,o,s,a,l=0;if(ht.isFunction(t))return this.each(function(e){ht(this).addClass(t.call(this,e,W(this)))});if("string"==typeof t&&t)for(e=t.match(Ct)||[];i=this[l++];)if(r=W(i),n=1===i.nodeType&&(" "+r+" ").replace(Re," ")){for(s=0;o=e[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");r!==(a=ht.trim(n))&&ht.attr(i,"class",a)}return this},removeClass:function(t){var e,i,n,r,o,s,a,l=0;if(ht.isFunction(t))return this.each(function(e){ht(this).removeClass(t.call(this,e,W(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Ct)||[];i=this[l++];)if(r=W(i),n=1===i.nodeType&&(" "+r+" ").replace(Re," ")){for(s=0;o=e[s++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");r!==(a=ht.trim(n))&&ht.attr(i,"class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):ht.isFunction(t)?this.each(function(i){ht(this).toggleClass(t.call(this,i,W(this),e),e)}):this.each(function(){var e,n,r,o;if("string"===i)for(n=0,r=ht(this),o=t.match(Ct)||[];e=o[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||((e=W(this))&&ht._data(this,"__className__",e),ht.attr(this,"class",e||!1===t?"":ht._data(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+W(i)+" ").replace(Re," ").indexOf(e)>-1)return!0;return!1}}),ht.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ht.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),ht.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}});var ze=t.location,je=ht.now(),Fe=/\?/,Ie=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;ht.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var i,n=null,r=ht.trim(e+"");return r&&!ht.trim(r.replace(Ie,function(t,e,r,o){return i&&e&&(n=0),0===n?t:(i=r||e,n+=!o-!r,"")}))?Function("return "+r)():ht.error("Invalid JSON: "+e)},ht.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{t.DOMParser?i=(new t.DOMParser).parseFromString(e,"text/xml"):((i=new t.ActiveXObject("Microsoft.XMLDOM")).async="false",i.loadXML(e))}catch(t){i=void 0}return i&&i.documentElement&&!i.getElementsByTagName("parsererror").length||ht.error("Invalid XML: "+e),i};var He=/#.*$/,qe=/([?&])_=[^&]*/,Be=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,We=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Xe=/^(?:GET|HEAD)$/,Ye=/^\/\//,Ue=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,$e={},Ve={},Ze="*/".concat("*"),Ge=ze.href,Qe=Ue.exec(Ge.toLowerCase())||[];ht.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ge,type:"GET",isLocal:We.test(Qe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ht.parseJSON,"text xml":ht.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?U(U(t,ht.ajaxSettings),e):U(ht.ajaxSettings,t)},ajaxPrefilter:X($e),ajaxTransport:X(Ve),ajax:function(e,i){function n(e,i,n,r){var o,h,_,y,b,T=i;2!==x&&(x=2,l&&t.clearTimeout(l),c=void 0,a=r||"",w.readyState=e>0?4:0,o=e>=200&&e<300||304===e,n&&(y=$(f,w,n)),y=V(f,y,w,o),o?(f.ifModified&&((b=w.getResponseHeader("Last-Modified"))&&(ht.lastModified[s]=b),(b=w.getResponseHeader("etag"))&&(ht.etag[s]=b)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=y.state,h=y.data,o=!(_=y.error))):(_=T,!e&&T||(T="error",e<0&&(e=0))),w.status=e,w.statusText=(i||T)+"",o?m.resolveWith(d,[h,T,w]):m.rejectWith(d,[w,T,_]),w.statusCode(v),v=void 0,u&&p.trigger(o?"ajaxSuccess":"ajaxError",[w,f,o?h:_]),g.fireWith(d,[w,T]),u&&(p.trigger("ajaxComplete",[w,f]),--ht.active||ht.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var r,o,s,a,l,u,c,h,f=ht.ajaxSetup({},i),d=f.context||f,p=f.context&&(d.nodeType||d.jquery)?ht(d):ht.event,m=ht.Deferred(),g=ht.Callbacks("once memory"),v=f.statusCode||{},_={},y={},x=0,b="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!h)for(h={};e=Be.exec(a);)h[e[1].toLowerCase()]=e[2];e=h[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return x||(t=y[i]=y[i]||t,_[t]=e),this},overrideMimeType:function(t){return x||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||b;return c&&c.abort(e),n(0,e),this}};if(m.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,f.url=((e||f.url||Ge)+"").replace(He,"").replace(Ye,Qe[1]+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=ht.trim(f.dataType||"*").toLowerCase().match(Ct)||[""],null==f.crossDomain&&(r=Ue.exec(f.url.toLowerCase()),f.crossDomain=!(!r||r[1]===Qe[1]&&r[2]===Qe[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Qe[3]||("http:"===Qe[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=ht.param(f.data,f.traditional)),Y($e,f,i,w),2===x)return w;(u=ht.event&&f.global)&&0==ht.active++&&ht.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Xe.test(f.type),s=f.url,f.hasContent||(f.data&&(s=f.url+=(Fe.test(s)?"&":"?")+f.data,delete f.data),!1===f.cache&&(f.url=qe.test(s)?s.replace(qe,"$1_="+je++):s+(Fe.test(s)?"&":"?")+"_="+je++)),f.ifModified&&(ht.lastModified[s]&&w.setRequestHeader("If-Modified-Since",ht.lastModified[s]),ht.etag[s]&&w.setRequestHeader("If-None-Match",ht.etag[s])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ze+"; q=0.01":""):f.accepts["*"]);for(o in f.headers)w.setRequestHeader(o,f.headers[o]);if(f.beforeSend&&(!1===f.beforeSend.call(d,w,f)||2===x))return w.abort();b="abort";for(o in{success:1,error:1,complete:1})w[o](f[o]);if(c=Y(Ve,f,i,w)){if(w.readyState=1,u&&p.trigger("ajaxSend",[w,f]),2===x)return w;f.async&&f.timeout>0&&(l=t.setTimeout(function(){w.abort("timeout")},f.timeout));try{x=1,c.send(_,n)}catch(t){if(!(x<2))throw t;n(-1,t)}}else n(-1,"No Transport");return w},getJSON:function(t,e,i){return ht.get(t,e,i,"json")},getScript:function(t,e){return ht.get(t,void 0,e,"script")}}),ht.each(["get","post"],function(t,e){ht[e]=function(t,i,n,r){return ht.isFunction(i)&&(r=r||n,n=i,i=void 0),ht.ajax(ht.extend({url:t,type:e,dataType:r,data:i,success:n},ht.isPlainObject(t)&&t))}}),ht._evalUrl=function(t){return ht.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ht.fn.extend({wrapAll:function(t){if(ht.isFunction(t))return this.each(function(e){ht(this).wrapAll(t.call(this,e))});if(this[0]){var e=ht(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return ht.isFunction(t)?this.each(function(e){ht(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ht(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=ht.isFunction(t);return this.each(function(i){ht(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){ht.nodeName(this,"body")||ht(this).replaceWith(this.childNodes)}).end()}}),ht.expr.filters.hidden=function(t){return ct.reliableHiddenOffsets()?t.offsetWidth<=0&&t.offsetHeight<=0&&!t.getClientRects().length:G(t)},ht.expr.filters.visible=function(t){return!ht.expr.filters.hidden(t)};var Ke=/%20/g,Je=/\[\]$/,ti=/\r?\n/g,ei=/^(?:submit|button|image|reset|file)$/i,ii=/^(?:input|select|textarea|keygen)/i;ht.param=function(t,e){var i,n=[],r=function(t,e){e=ht.isFunction(e)?e():null==e?"":e,n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ht.ajaxSettings&&ht.ajaxSettings.traditional),ht.isArray(t)||t.jquery&&!ht.isPlainObject(t))ht.each(t,function(){r(this.name,this.value)});else for(i in t)Q(i,t[i],e,r);return n.join("&").replace(Ke,"+")},ht.fn.extend({serialize:function(){return ht.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ht.prop(this,"elements");return t?ht.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ht(this).is(":disabled")&&ii.test(this.nodeName)&&!ei.test(t)&&(this.checked||!jt.test(t))}).map(function(t,e){var i=ht(this).val();return null==i?null:ht.isArray(i)?ht.map(i,function(t){return{name:e.name,value:t.replace(ti,"\r\n")}}):{name:e.name,value:i.replace(ti,"\r\n")}}).get()}}),ht.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return this.isLocal?J():it.documentMode>8?K():/^(get|post|head|put|delete|options)$/i.test(this.type)&&K()||J()}:K;var ni=0,ri={},oi=ht.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in ri)ri[t](void 0,!0)}),ct.cors=!!oi&&"withCredentials"in oi,(oi=ct.ajax=!!oi)&&ht.ajaxTransport(function(e){if(!e.crossDomain||ct.cors){var i;return{send:function(n,r){var o,s=e.xhr(),a=++ni;if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(o in n)void 0!==n[o]&&s.setRequestHeader(o,n[o]+"");s.send(e.hasContent&&e.data||null),i=function(t,n){var o,l,u;if(i&&(n||4===s.readyState))if(delete ri[a],i=void 0,s.onreadystatechange=ht.noop,n)4!==s.readyState&&s.abort();else{u={},o=s.status,"string"==typeof s.responseText&&(u.text=s.responseText);try{l=s.statusText}catch(t){l=""}o||!e.isLocal||e.crossDomain?1223===o&&(o=204):o=u.text?200:404}u&&r(o,l,u,s.getAllResponseHeaders())},e.async?4===s.readyState?t.setTimeout(i):s.onreadystatechange=ri[a]=i:i()},abort:function(){i&&i(void 0,!0)}}}}),ht.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ht.globalEval(t),t}}}),ht.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),ht.ajaxTransport("script",function(t){if(t.crossDomain){var e,i=it.head||ht("head")[0]||it.documentElement;return{send:function(n,r){(e=it.createElement("script")).async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,i){(i||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,i||r(200,"success"))},i.insertBefore(e,i.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var si=[],ai=/(=)\?(?=&|$)|\?\?/;ht.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=si.pop()||ht.expando+"_"+je++;return this[t]=!0,t}}),ht.ajaxPrefilter("json jsonp",function(e,i,n){var r,o,s,a=!1!==e.jsonp&&(ai.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ai.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=ht.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(ai,"$1"+r):!1!==e.jsonp&&(e.url+=(Fe.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||ht.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},n.always(function(){void 0===o?ht(t).removeProp(r):t[r]=o,e[r]&&(e.jsonpCallback=i.jsonpCallback,si.push(r)),s&&ht.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),ht.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||it;var n=xt.exec(t),r=!i&&[];return n?[e.createElement(n[1])]:(n=v([t],e,r),r&&r.length&&ht(r).remove(),ht.merge([],n.childNodes))};var li=ht.fn.load;ht.fn.load=function(t,e,i){if("string"!=typeof t&&li)return li.apply(this,arguments);var n,r,o,s=this,a=t.indexOf(" ");return a>-1&&(n=ht.trim(t.slice(a,t.length)),t=t.slice(0,a)),ht.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&ht.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(n?ht("<div>").append(ht.parseHTML(t)).find(n):t)}).always(i&&function(t,e){s.each(function(){i.apply(this,o||[t.responseText,e,t])})}),this},ht.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ht.fn[e]=function(t){return this.on(e,t)}}),ht.expr.filters.animated=function(t){return ht.grep(ht.timers,function(e){return t===e.elem}).length},ht.offset={setOffset:function(t,e,i){var n,r,o,s,a,l,u=ht.css(t,"position"),c=ht(t),h={};"static"===u&&(t.style.position="relative"),a=c.offset(),o=ht.css(t,"top"),l=ht.css(t,"left"),("absolute"===u||"fixed"===u)&&ht.inArray("auto",[o,l])>-1?(s=(n=c.position()).top,r=n.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),ht.isFunction(e)&&(e=e.call(t,i,ht.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):c.css(h)}},ht.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ht.offset.setOffset(this,t,e)});var e,i,n={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(o)return e=o.documentElement,ht.contains(e,r)?(void 0!==r.getBoundingClientRect&&(n=r.getBoundingClientRect()),i=tt(o),{top:n.top+(i.pageYOffset||e.scrollTop)-(e.clientTop||0),left:n.left+(i.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):n},position:function(){if(this[0]){var t,e,i={top:0,left:0},n=this[0];return"fixed"===ht.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ht.nodeName(t[0],"html")||(i=t.offset()),i.top+=ht.css(t[0],"borderTopWidth",!0),i.left+=ht.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-ht.css(n,"marginTop",!0),left:e.left-i.left-ht.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&!ht.nodeName(t,"html")&&"static"===ht.css(t,"position");)t=t.offsetParent;return t||ue})}}),ht.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i=/Y/.test(e);ht.fn[t]=function(n){return zt(this,function(t,n,r){var o=tt(t);if(void 0===r)return o?e in o?o[e]:o.document.documentElement[n]:t[n];o?o.scrollTo(i?ht(o).scrollLeft():r,i?r:ht(o).scrollTop()):t[n]=r},t,n,arguments.length,null)}}),ht.each(["top","left"],function(t,e){ht.cssHooks[e]=D(ct.pixelPosition,function(t,i){if(i)return i=he(t,e),ae.test(i)?ht(t).position()[e]+"px":i})}),ht.each({Height:"height",Width:"width"},function(t,e){ht.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){ht.fn[n]=function(n,r){var o=arguments.length&&(i||"boolean"!=typeof n),s=i||(!0===n||!0===r?"margin":"border");return zt(this,function(e,i,n){var r;return ht.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===n?ht.css(e,i,s):ht.style(e,i,n,s)},e,o?n:void 0,o,null)}})}),ht.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),ht.fn.size=function(){return this.length},ht.fn.andSelf=ht.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ht});var ui=t.jQuery,ci=t.$;return ht.noConflict=function(e){return t.$===ht&&(t.$=ci),e&&t.jQuery===ht&&(t.jQuery=ui),ht},e||(t.jQuery=t.$=ht),ht}),function(t){var e={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0}};t.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){t(this).bxSlider(n)}),this;var r={},o=this,s=t(window).width(),a=t(window).height();if(!t(o).data("bxSlider")){var l=function(){t(o).data("bxSlider")||(r.settings=t.extend({},e,n),r.settings.slideWidth=parseInt(r.settings.slideWidth),r.children=o.children(r.settings.slideSelector),r.children.length<r.settings.minSlides&&(r.settings.minSlides=r.children.length),r.children.length<r.settings.maxSlides&&(r.settings.maxSlides=r.children.length),r.settings.randomStart&&(r.settings.startSlide=Math.floor(Math.random()*r.children.length)),r.active={index:r.settings.startSlide},r.carousel=r.settings.minSlides>1||r.settings.maxSlides>1,r.carousel&&(r.settings.preloadImages="all"),r.minThreshold=r.settings.minSlides*r.settings.slideWidth+(r.settings.minSlides-1)*r.settings.slideMargin,r.maxThreshold=r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin,r.working=!1,r.controls={},r.interval=null,r.animProp="vertical"===r.settings.mode?"top":"left",r.usingCSS=r.settings.useCSS&&"fade"!==r.settings.mode&&function(){for(var t=document.createElement("div"),e=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],i=0;i<e.length;i++)if(void 0!==t.style[e[i]])return r.cssPrefix=e[i].replace("Perspective","").toLowerCase(),r.animProp="-"+r.cssPrefix+"-transform",!0;return!1}(),"vertical"===r.settings.mode&&(r.settings.maxSlides=r.settings.minSlides),o.data("origStyle",o.attr("style")),o.children(r.settings.slideSelector).each(function(){t(this).data("origStyle",t(this).attr("style"))}),u())},u=function(){var e=r.children.eq(r.settings.startSlide);o.wrap('<div class="'+r.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),r.viewport=o.parent(),r.settings.ariaLive&&!r.settings.ticker&&r.viewport.attr("aria-live","polite"),r.loader=t('<div class="bx-loading" />'),r.viewport.prepend(r.loader),o.css({width:"horizontal"===r.settings.mode?1e3*r.children.length+215+"%":"auto",position:"relative"}),r.usingCSS&&r.settings.easing?o.css("-"+r.cssPrefix+"-transition-timing-function",r.settings.easing):r.settings.easing||(r.settings.easing="swing"),r.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),r.viewport.parent().css({maxWidth:d()}),r.children.css({float:"horizontal"===r.settings.mode?"left":"none",listStyle:"none",position:"relative"}),r.children.css("width",p()),"horizontal"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginRight",r.settings.slideMargin),"vertical"===r.settings.mode&&r.settings.slideMargin>0&&r.children.css("marginBottom",r.settings.slideMargin),"fade"===r.settings.mode&&(r.children.css({position:"absolute",zIndex:0,display:"none"}),r.children.eq(r.settings.startSlide).css({zIndex:r.settings.slideZIndex,display:"block"})),r.controls.el=t('<div class="bx-controls" />'),r.settings.captions&&S(),r.active.last=r.settings.startSlide===g()-1,r.settings.video&&o.fitVids(),("all"===r.settings.preloadImages||r.settings.ticker)&&(e=r.children),r.settings.ticker?r.settings.pager=!1:(r.settings.controls&&w(),r.settings.auto&&r.settings.autoControls&&T(),r.settings.pager&&b(),(r.settings.controls||r.settings.autoControls||r.settings.pager)&&r.viewport.after(r.controls.el)),c(e,h)},c=function(e,i){var n=e.find('img:not([src=""]), iframe').length,r=0;0!==n?e.find('img:not([src=""]), iframe').each(function(){t(this).one("load error",function(){++r===n&&i()}).each(function(){this.complete&&t(this).trigger("load")})}):i()},h=function(){if(r.settings.infiniteLoop&&"fade"!==r.settings.mode&&!r.settings.ticker){var e="vertical"===r.settings.mode?r.settings.minSlides:r.settings.maxSlides,i=r.children.slice(0,e).clone(!0).addClass("bx-clone"),n=r.children.slice(-e).clone(!0).addClass("bx-clone");r.settings.ariaHidden&&(i.attr("aria-hidden",!0),n.attr("aria-hidden",!0)),o.append(i).prepend(n)}r.loader.remove(),_(),"vertical"===r.settings.mode&&(r.settings.adaptiveHeight=!0),r.viewport.height(f()),o.redrawSlider(),r.settings.onSliderLoad.call(o,r.active.index),r.initialized=!0,r.settings.responsive&&t(window).bind("resize",X),r.settings.auto&&r.settings.autoStart&&(g()>1||r.settings.autoSlideForOnePage)&&N(),r.settings.ticker&&R(),r.settings.pager&&O(r.settings.startSlide),r.settings.controls&&L(),r.settings.touchEnabled&&!r.settings.ticker&&I(),r.settings.keyboardEnabled&&!r.settings.ticker&&t(document).keydown(F)},f=function(){var e=0,n=t();if("vertical"===r.settings.mode||r.settings.adaptiveHeight)if(r.carousel){var o=1===r.settings.moveSlides?r.active.index:r.active.index*v();for(n=r.children.eq(o),i=1;i<=r.settings.maxSlides-1;i++)n=o+i>=r.children.length?n.add(r.children.eq(i-1)):n.add(r.children.eq(o+i))}else n=r.children.eq(r.active.index);else n=r.children;return"vertical"===r.settings.mode?(n.each(function(i){e+=t(this).outerHeight()}),r.settings.slideMargin>0&&(e+=r.settings.slideMargin*(r.settings.minSlides-1))):e=Math.max.apply(Math,n.map(function(){return t(this).outerHeight(!1)}).get()),"border-box"===r.viewport.css("box-sizing")?e+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))+parseFloat(r.viewport.css("border-top-width"))+parseFloat(r.viewport.css("border-bottom-width")):"padding-box"===r.viewport.css("box-sizing")&&(e+=parseFloat(r.viewport.css("padding-top"))+parseFloat(r.viewport.css("padding-bottom"))),e},d=function(){var t="100%";return r.settings.slideWidth>0&&(t="horizontal"===r.settings.mode?r.settings.maxSlides*r.settings.slideWidth+(r.settings.maxSlides-1)*r.settings.slideMargin:r.settings.slideWidth),t},p=function(){var t=r.settings.slideWidth,e=r.viewport.width();if(0===r.settings.slideWidth||r.settings.slideWidth>e&&!r.carousel||"vertical"===r.settings.mode)t=e;else if(r.settings.maxSlides>1&&"horizontal"===r.settings.mode){if(e>r.maxThreshold)return t;e<r.minThreshold?t=(e-r.settings.slideMargin*(r.settings.minSlides-1))/r.settings.minSlides:r.settings.shrinkItems&&(t=Math.floor((e+r.settings.slideMargin)/Math.ceil((e+r.settings.slideMargin)/(t+r.settings.slideMargin))-r.settings.slideMargin))}return t},m=function(){var t=1,e=null;return"horizontal"===r.settings.mode&&r.settings.slideWidth>0?r.viewport.width()<r.minThreshold?t=r.settings.minSlides:r.viewport.width()>r.maxThreshold?t=r.settings.maxSlides:(e=r.children.first().width()+r.settings.slideMargin,t=Math.floor((r.viewport.width()+r.settings.slideMargin)/e)):"vertical"===r.settings.mode&&(t=r.settings.minSlides),t},g=function(){var t=0,e=0,i=0;if(r.settings.moveSlides>0)if(r.settings.infiniteLoop)t=Math.ceil(r.children.length/v());else for(;e<r.children.length;)++t,e=i+m(),i+=r.settings.moveSlides<=m()?r.settings.moveSlides:m();else t=Math.ceil(r.children.length/m());return t},v=function(){return r.settings.moveSlides>0&&r.settings.moveSlides<=m()?r.settings.moveSlides:m()},_=function(){var t,e,i;r.children.length>r.settings.maxSlides&&r.active.last&&!r.settings.infiniteLoop?"horizontal"===r.settings.mode?(t=(e=r.children.last()).position(),y(-(t.left-(r.viewport.width()-e.outerWidth())),"reset",0)):"vertical"===r.settings.mode&&(i=r.children.length-r.settings.minSlides,t=r.children.eq(i).position(),y(-t.top,"reset",0)):(t=r.children.eq(r.active.index*v()).position(),r.active.index===g()-1&&(r.active.last=!0),void 0!==t&&("horizontal"===r.settings.mode?y(-t.left,"reset",0):"vertical"===r.settings.mode&&y(-t.top,"reset",0)))},y=function(e,i,n,s){var a,l;r.usingCSS?(l="vertical"===r.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",o.css("-"+r.cssPrefix+"-transition-duration",n/1e3+"s"),"slide"===i?(o.css(r.animProp,l),0!==n?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){t(e.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),D())}):D()):"reset"===i?o.css(r.animProp,l):"ticker"===i&&(o.css("-"+r.cssPrefix+"-transition-timing-function","linear"),o.css(r.animProp,l),0!==n?o.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){t(e.target).is(o)&&(o.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),y(s.resetValue,"reset",0),z())}):(y(s.resetValue,"reset",0),z()))):((a={})[r.animProp]=e,"slide"===i?o.animate(a,n,r.settings.easing,function(){D()}):"reset"===i?o.css(r.animProp,e):"ticker"===i&&o.animate(a,n,"linear",function(){y(s.resetValue,"reset",0),z()}))},x=function(){for(var e="",i="",n=g(),o=0;o<n;o++)i="",r.settings.buildPager&&t.isFunction(r.settings.buildPager)||r.settings.pagerCustom?(i=r.settings.buildPager(o),r.pagerEl.addClass("bx-custom-pager")):(i=o+1,r.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+o+'" class="bx-pager-link">'+i+"</a></div>";r.pagerEl.html(e)},b=function(){r.settings.pagerCustom?r.pagerEl=t(r.settings.pagerCustom):(r.pagerEl=t('<div class="bx-pager" />'),r.settings.pagerSelector?t(r.settings.pagerSelector).html(r.pagerEl):r.controls.el.addClass("bx-has-pager").append(r.pagerEl),x()),r.pagerEl.on("click touchend","a",A)},w=function(){r.controls.next=t('<a class="bx-next" href="">'+r.settings.nextText+"</a>"),r.controls.prev=t('<a class="bx-prev" href="">'+r.settings.prevText+"</a>"),r.controls.next.bind("click touchend",k),r.controls.prev.bind("click touchend",C),r.settings.nextSelector&&t(r.settings.nextSelector).append(r.controls.next),r.settings.prevSelector&&t(r.settings.prevSelector).append(r.controls.prev),r.settings.nextSelector||r.settings.prevSelector||(r.controls.directionEl=t('<div class="bx-controls-direction" />'),r.controls.directionEl.append(r.controls.prev).append(r.controls.next),r.controls.el.addClass("bx-has-controls-direction").append(r.controls.directionEl))},T=function(){r.controls.start=t('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+r.settings.startText+"</a></div>"),r.controls.stop=t('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+r.settings.stopText+"</a></div>"),r.controls.autoEl=t('<div class="bx-controls-auto" />'),r.controls.autoEl.on("click",".bx-start",E),r.controls.autoEl.on("click",".bx-stop",P),r.settings.autoControlsCombine?r.controls.autoEl.append(r.controls.start):r.controls.autoEl.append(r.controls.start).append(r.controls.stop),r.settings.autoControlsSelector?t(r.settings.autoControlsSelector).html(r.controls.autoEl):r.controls.el.addClass("bx-has-controls-auto").append(r.controls.autoEl),M(r.settings.autoStart?"stop":"start")},S=function(){r.children.each(function(e){var i=t(this).find("img:first").attr("title");void 0!==i&&(""+i).length&&t(this).append('<div class="bx-caption"><span>'+i+"</span></div>")})},k=function(t){t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToNextSlide())},C=function(t){t.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),o.goToPrevSlide())},E=function(t){o.startAuto(),t.preventDefault()},P=function(t){o.stopAuto(),t.preventDefault()},A=function(e){var i,n;e.preventDefault(),r.controls.el.hasClass("disabled")||(r.settings.auto&&r.settings.stopAutoOnClick&&o.stopAuto(),void 0!==(i=t(e.currentTarget)).attr("data-slide-index")&&(n=parseInt(i.attr("data-slide-index")))!==r.active.index&&o.goToSlide(n))},O=function(e){var i=r.children.length;if("short"===r.settings.pagerType)return r.settings.maxSlides>1&&(i=Math.ceil(r.children.length/r.settings.maxSlides)),void r.pagerEl.html(e+1+r.settings.pagerShortSeparator+i);r.pagerEl.find("a").removeClass("active"),r.pagerEl.each(function(i,n){t(n).find("a").eq(e).addClass("active")})},D=function(){if(r.settings.infiniteLoop){var t="";0===r.active.index?t=r.children.eq(0).position():r.active.index===g()-1&&r.carousel?t=r.children.eq((g()-1)*v()).position():r.active.index===r.children.length-1&&(t=r.children.eq(r.children.length-1).position()),t&&("horizontal"===r.settings.mode?y(-t.left,"reset",0):"vertical"===r.settings.mode&&y(-t.top,"reset",0))}r.working=!1,r.settings.onSlideAfter.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)},M=function(t){r.settings.autoControlsCombine?r.controls.autoEl.html(r.controls[t]):(r.controls.autoEl.find("a").removeClass("active"),r.controls.autoEl.find("a:not(.bx-"+t+")").addClass("active"))},L=function(){1===g()?(r.controls.prev.addClass("disabled"),r.controls.next.addClass("disabled")):!r.settings.infiniteLoop&&r.settings.hideControlOnEnd&&(0===r.active.index?(r.controls.prev.addClass("disabled"),r.controls.next.removeClass("disabled")):r.active.index===g()-1?(r.controls.next.addClass("disabled"),r.controls.prev.removeClass("disabled")):(r.controls.prev.removeClass("disabled"),r.controls.next.removeClass("disabled")))},N=function(){if(r.settings.autoDelay>0)setTimeout(o.startAuto,r.settings.autoDelay);else o.startAuto(),t(window).focus(function(){o.startAuto()}).blur(function(){o.stopAuto()});r.settings.autoHover&&o.hover(function(){r.interval&&(o.stopAuto(!0),r.autoPaused=!0)},function(){r.autoPaused&&(o.startAuto(!0),r.autoPaused=null)})},R=function(){var e,i,n,s,a,l,u,c,h=0;"next"===r.settings.autoDirection?o.append(r.children.clone().addClass("bx-clone")):(o.prepend(r.children.clone().addClass("bx-clone")),e=r.children.first().position(),h="horizontal"===r.settings.mode?-e.left:-e.top),y(h,"reset",0),r.settings.pager=!1,r.settings.controls=!1,r.settings.autoControls=!1,r.settings.tickerHover&&(r.usingCSS?(s="horizontal"===r.settings.mode?4:5,r.viewport.hover(function(){i=o.css("-"+r.cssPrefix+"-transform"),n=parseFloat(i.split(",")[s]),y(n,"reset",0)},function(){c=0,r.children.each(function(e){c+="horizontal"===r.settings.mode?t(this).outerWidth(!0):t(this).outerHeight(!0)}),a=r.settings.speed/c,l="horizontal"===r.settings.mode?"left":"top",u=a*(c-Math.abs(parseInt(n))),z(u)})):r.viewport.hover(function(){o.stop()},function(){c=0,r.children.each(function(e){c+="horizontal"===r.settings.mode?t(this).outerWidth(!0):t(this).outerHeight(!0)}),a=r.settings.speed/c,l="horizontal"===r.settings.mode?"left":"top",u=a*(c-Math.abs(parseInt(o.css(l)))),z(u)})),z()},z=function(t){var e,i,n=t||r.settings.speed,s={left:0,top:0},a={left:0,top:0};"next"===r.settings.autoDirection?s=o.find(".bx-clone").first().position():a=r.children.first().position(),e="horizontal"===r.settings.mode?-s.left:-s.top,i="horizontal"===r.settings.mode?-a.left:-a.top,y(e,"ticker",n,{resetValue:i})},j=function(e){var i=t(window),n={top:i.scrollTop(),left:i.scrollLeft()},r=e.offset();return n.right=n.left+i.width(),n.bottom=n.top+i.height(),r.right=r.left+e.outerWidth(),r.bottom=r.top+e.outerHeight(),!(n.right<r.left||n.left>r.right||n.bottom<r.top||n.top>r.bottom)},F=function(t){var e=document.activeElement.tagName.toLowerCase();if(null==new RegExp(e,["i"]).exec("input|textarea")&&j(o)){if(39===t.keyCode)return k(t),!1;if(37===t.keyCode)return C(t),!1}},I=function(){r.touch={start:{x:0,y:0},end:{x:0,y:0}},r.viewport.bind("touchstart MSPointerDown pointerdown",H),r.viewport.on("click",".bxslider a",function(t){r.viewport.hasClass("click-disabled")&&(t.preventDefault(),r.viewport.removeClass("click-disabled"))})},H=function(t){if(r.controls.el.addClass("disabled"),r.working)t.preventDefault(),r.controls.el.removeClass("disabled");else{r.touch.originalPos=o.position();var e=t.originalEvent,i=void 0!==e.changedTouches?e.changedTouches:[e];r.touch.start.x=i[0].pageX,r.touch.start.y=i[0].pageY,r.viewport.get(0).setPointerCapture&&(r.pointerId=e.pointerId,r.viewport.get(0).setPointerCapture(r.pointerId)),r.viewport.bind("touchmove MSPointerMove pointermove",B),r.viewport.bind("touchend MSPointerUp pointerup",W),r.viewport.bind("MSPointerCancel pointercancel",q)}},q=function(t){y(r.touch.originalPos.left,"reset",0),r.controls.el.removeClass("disabled"),r.viewport.unbind("MSPointerCancel pointercancel",q),r.viewport.unbind("touchmove MSPointerMove pointermove",B),r.viewport.unbind("touchend MSPointerUp pointerup",W),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},B=function(t){var e=t.originalEvent,i=void 0!==e.changedTouches?e.changedTouches:[e],n=Math.abs(i[0].pageX-r.touch.start.x),o=Math.abs(i[0].pageY-r.touch.start.y),s=0,a=0;3*n>o&&r.settings.preventDefaultSwipeX?t.preventDefault():3*o>n&&r.settings.preventDefaultSwipeY&&t.preventDefault(),"fade"!==r.settings.mode&&r.settings.oneToOneTouch&&("horizontal"===r.settings.mode?(a=i[0].pageX-r.touch.start.x,s=r.touch.originalPos.left+a):(a=i[0].pageY-r.touch.start.y,s=r.touch.originalPos.top+a),y(s,"reset",0))},W=function(t){r.viewport.unbind("touchmove MSPointerMove pointermove",B),r.controls.el.removeClass("disabled");var e=t.originalEvent,i=void 0!==e.changedTouches?e.changedTouches:[e],n=0,s=0;r.touch.end.x=i[0].pageX,r.touch.end.y=i[0].pageY,"fade"===r.settings.mode?(s=Math.abs(r.touch.start.x-r.touch.end.x))>=r.settings.swipeThreshold&&(r.touch.start.x>r.touch.end.x?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):("horizontal"===r.settings.mode?(s=r.touch.end.x-r.touch.start.x,n=r.touch.originalPos.left):(s=r.touch.end.y-r.touch.start.y,n=r.touch.originalPos.top),!r.settings.infiniteLoop&&(0===r.active.index&&s>0||r.active.last&&s<0)?y(n,"reset",200):Math.abs(s)>=r.settings.swipeThreshold?(s<0?o.goToNextSlide():o.goToPrevSlide(),o.stopAuto()):y(n,"reset",200)),r.viewport.unbind("touchend MSPointerUp pointerup",W),r.viewport.get(0).releasePointerCapture&&r.viewport.get(0).releasePointerCapture(r.pointerId)},X=function(e){if(r.initialized)if(r.working)window.setTimeout(X,10);else{var i=t(window).width(),n=t(window).height();s===i&&a===n||(s=i,a=n,o.redrawSlider(),r.settings.onSliderResize.call(o,r.active.index))}},Y=function(t){var e=m();r.settings.ariaHidden&&!r.settings.ticker&&(r.children.attr("aria-hidden","true"),r.children.slice(t,t+e).attr("aria-hidden","false"))},U=function(t){return t<0?r.settings.infiniteLoop?g()-1:r.active.index:t>=g()?r.settings.infiniteLoop?0:r.active.index:t};return o.goToSlide=function(e,i){var n,s,a,l,u=!0,c=0,h={left:0,top:0},d=null;if(r.oldIndex=r.active.index,r.active.index=U(e),!r.working&&r.active.index!==r.oldIndex){if(r.working=!0,void 0!==(u=r.settings.onSlideBefore.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index))&&!u)return r.active.index=r.oldIndex,void(r.working=!1);"next"===i?r.settings.onSlideNext.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(u=!1):"prev"===i&&(r.settings.onSlidePrev.call(o,r.children.eq(r.active.index),r.oldIndex,r.active.index)||(u=!1)),r.active.last=r.active.index>=g()-1,(r.settings.pager||r.settings.pagerCustom)&&O(r.active.index),r.settings.controls&&L(),"fade"===r.settings.mode?(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),r.children.filter(":visible").fadeOut(r.settings.speed).css({zIndex:0}),r.children.eq(r.active.index).css("zIndex",r.settings.slideZIndex+1).fadeIn(r.settings.speed,function(){t(this).css("zIndex",r.settings.slideZIndex),D()})):(r.settings.adaptiveHeight&&r.viewport.height()!==f()&&r.viewport.animate({height:f()},r.settings.adaptiveHeightSpeed),!r.settings.infiniteLoop&&r.carousel&&r.active.last?"horizontal"===r.settings.mode?(h=(d=r.children.eq(r.children.length-1)).position(),c=r.viewport.width()-d.outerWidth()):(n=r.children.length-r.settings.minSlides,h=r.children.eq(n).position()):r.carousel&&r.active.last&&"prev"===i?(s=1===r.settings.moveSlides?r.settings.maxSlides-v():(g()-1)*v()-(r.children.length-r.settings.maxSlides),h=(d=o.children(".bx-clone").eq(s)).position()):"next"===i&&0===r.active.index?(h=o.find("> .bx-clone").eq(r.settings.maxSlides).position(),r.active.last=!1):e>=0&&(l=e*parseInt(v()),h=r.children.eq(l).position()),void 0!==h?(a="horizontal"===r.settings.mode?-(h.left-c):-h.top,y(a,"slide",r.settings.speed)):r.working=!1),r.settings.ariaHidden&&Y(r.active.index*v())}},o.goToNextSlide=function(){if(r.settings.infiniteLoop||!r.active.last){var t=parseInt(r.active.index)+1;o.goToSlide(t,"next")}},o.goToPrevSlide=function(){if(r.settings.infiniteLoop||0!==r.active.index){var t=parseInt(r.active.index)-1;o.goToSlide(t,"prev")}},o.startAuto=function(t){r.interval||(r.interval=setInterval(function(){"next"===r.settings.autoDirection?o.goToNextSlide():o.goToPrevSlide()},r.settings.pause),r.settings.autoControls&&!0!==t&&M("stop"))},o.stopAuto=function(t){r.interval&&(clearInterval(r.interval),r.interval=null,r.settings.autoControls&&!0!==t&&M("start"))},o.getCurrentSlide=function(){return r.active.index},o.getCurrentSlideElement=function(){return r.children.eq(r.active.index)},o.getSlideElement=function(t){return r.children.eq(t)},o.getSlideCount=function(){return r.children.length},o.isWorking=function(){return r.working},o.redrawSlider=function(){r.children.add(o.find(".bx-clone")).outerWidth(p()),r.viewport.css("height",f()),r.settings.ticker||_(),r.active.last&&(r.active.index=g()-1),r.active.index>=g()&&(r.active.last=!0),r.settings.pager&&!r.settings.pagerCustom&&(x(),O(r.active.index)),r.settings.ariaHidden&&Y(r.active.index*v())},o.destroySlider=function(){r.initialized&&(r.initialized=!1,t(".bx-clone",this).remove(),r.children.each(function(){void 0!==t(this).data("origStyle")?t(this).attr("style",t(this).data("origStyle")):t(this).removeAttr("style")}),void 0!==t(this).data("origStyle")?this.attr("style",t(this).data("origStyle")):t(this).removeAttr("style"),t(this).unwrap().unwrap(),r.controls.el&&r.controls.el.remove(),r.controls.next&&r.controls.next.remove(),r.controls.prev&&r.controls.prev.remove(),r.pagerEl&&r.settings.controls&&!r.settings.pagerCustom&&r.pagerEl.remove(),t(".bx-caption",this).remove(),r.controls.autoEl&&r.controls.autoEl.remove(),clearInterval(r.interval),r.settings.responsive&&t(window).unbind("resize",X),r.settings.keyboardEnabled&&t(document).unbind("keydown",F),t(this).removeData("bxSlider"))},o.reloadSlider=function(e){void 0!==e&&(n=e),o.destroySlider(),l(),t(o).data("bxSlider",this)},l(),t(o).data("bxSlider",this),this}}}(jQuery),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Popper=e()}(this,function(){"use strict";function t(t){var e={};return t&&"[object Function]"===e.toString.call(t)}function e(t,e){if(1!==t.nodeType)return[];var i=window.getComputedStyle(t,null);return e?i[e]:i}function i(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function n(t){if(!t||-1!==["HTML","BODY","#document"].indexOf(t.nodeName))return window.document.body;var r=e(t),o=r.overflow,s=r.overflowX,a=r.overflowY;return/(auto|scroll)/.test(o+a+s)?t:n(i(t))}function r(t){var i=t&&t.offsetParent,n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(i.nodeName)&&"static"===e(i,"position")?r(i):i:window.document.documentElement}function o(t){var e=t.nodeName;return"BODY"!==e&&("HTML"===e||r(t.firstElementChild)===t)}function s(t){return null!==t.parentNode?s(t.parentNode):t}function a(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return window.document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?t:e,l=i?e:t,u=document.createRange();u.setStart(n,0),u.setEnd(l,0);var c=u.commonAncestorContainer;if(t!==c&&e!==c||n.contains(l))return o(c)?c:r(c);var h=s(t);return h.host?a(h.host,e):a(t,s(e).host)}function l(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var n=window.document.documentElement;return(window.document.scrollingElement||n)[e]}return t[e]}function u(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=l(e,"top"),r=l(e,"left"),o=i?-1:1;return t.top+=n*o,t.bottom+=n*o,t.left+=r*o,t.right+=r*o,t}function c(t,e){var i="x"===e?"Left":"Top",n="Left"===i?"Right":"Bottom";return+t["border"+i+"Width"].split("px")[0]+ +t["border"+n+"Width"].split("px")[0]}function h(t,e,i,n){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],K()?i["offset"+t]+n["margin"+("Height"===t?"Top":"Left")]+n["margin"+("Height"===t?"Bottom":"Right")]:0)}function f(){var t=window.document.body,e=window.document.documentElement,i=K()&&window.getComputedStyle(e);return{height:h("Height",t,e,i),width:h("Width",t,e,i)}}function d(t){return it({},t,{right:t.left+t.width,bottom:t.top+t.height})}function p(t){var i={};if(K())try{i=t.getBoundingClientRect();var n=l(t,"top"),r=l(t,"left");i.top+=n,i.left+=r,i.bottom+=n,i.right+=r}catch(t){}else i=t.getBoundingClientRect();var o={left:i.left,top:i.top,width:i.right-i.left,height:i.bottom-i.top},s="HTML"===t.nodeName?f():{},a=s.width||t.clientWidth||o.right-o.left,u=s.height||t.clientHeight||o.bottom-o.top,h=t.offsetWidth-a,p=t.offsetHeight-u;if(h||p){var m=e(t);h-=c(m,"x"),p-=c(m,"y"),o.width-=h,o.height-=p}return d(o)}function m(t,i){var r=K(),o="HTML"===i.nodeName,s=p(t),a=p(i),l=n(t),c=e(i),h=+c.borderTopWidth.split("px")[0],f=+c.borderLeftWidth.split("px")[0],m=d({top:s.top-a.top-h,left:s.left-a.left-f,width:s.width,height:s.height});if(m.marginTop=0,m.marginLeft=0,!r&&o){var g=+c.marginTop.split("px")[0],v=+c.marginLeft.split("px")[0];m.top-=h-g,m.bottom-=h-g,m.left-=f-v,m.right-=f-v,m.marginTop=g,m.marginLeft=v}return(r?i.contains(l):i===l&&"BODY"!==l.nodeName)&&(m=u(m,i)),m}function g(t){var e=window.document.documentElement,i=m(t,e),n=Math.max(e.clientWidth,window.innerWidth||0),r=Math.max(e.clientHeight,window.innerHeight||0),o=l(e),s=l(e,"left");return d({top:o-i.top+i.marginTop,left:s-i.left+i.marginLeft,width:n,height:r})}function v(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===e(t,"position")||v(i(t)))}function _(t,e,r,o){var s={top:0,left:0},l=a(t,e);if("viewport"===o)s=g(l);else{var u=void 0;"scrollParent"===o?"BODY"===(u=n(i(t))).nodeName&&(u=window.document.documentElement):u="window"===o?window.document.documentElement:o;var c=m(u,l);if("HTML"!==u.nodeName||v(l))s=c;else{var h=f(),d=h.height,p=h.width;s.top+=c.top-c.marginTop,s.bottom=d+c.top,s.left+=c.left-c.marginLeft,s.right=p+c.left}}return s.left+=r,s.top+=r,s.right-=r,s.bottom-=r,s}function y(t){return t.width*t.height}function x(t,e,i,n,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=_(i,n,o,r),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map(function(t){return it({key:t},a[t],{area:y(a[t])})}).sort(function(t,e){return e.area-t.area}),u=l.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),c=u.length>0?u[0].key:l[0].key,h=t.split("-")[1];return c+(h?"-"+h:"")}function b(t,e,i){return m(i,a(e,i))}function w(t){var e=window.getComputedStyle(t),i=parseFloat(e.marginTop)+parseFloat(e.marginBottom),n=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+n,height:t.offsetHeight+i}}function T(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function S(t,e,i){i=i.split("-")[0];var n=w(t),r={width:n.width,height:n.height},o=-1!==["right","left"].indexOf(i),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return r[s]=e[s]+e[l]/2-n[l]/2,r[a]=i===a?e[a]-n[u]:e[T(a)],r}function k(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function C(t,e,i){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===i});var n=k(t,function(t){return t[e]===i});return t.indexOf(n)}function E(e,i,n){return(void 0===n?e:e.slice(0,C(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&t(n)&&(i.offsets.popper=d(i.offsets.popper),i.offsets.reference=d(i.offsets.reference),i=n(i,e))}),i}function P(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=b(this.state,this.popper,this.reference),t.placement=x(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.offsets.popper=S(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position="absolute",t=E(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function A(t,e){return t.some(function(t){var i=t.name;return t.enabled&&i===e})}function O(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length-1;n++){var r=e[n],o=r?""+r+i:t;if(void 0!==window.document.body.style[o])return o}return null}function D(){return this.state.isDestroyed=!0,A(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[O("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function M(t,e,i,r){var o="BODY"===t.nodeName,s=o?window:t;s.addEventListener(e,i,{passive:!0}),o||M(n(s.parentNode),e,i,r),r.push(s)}function L(t,e,i,r){i.updateBound=r,window.addEventListener("resize",i.updateBound,{passive:!0});var o=n(t);return M(o,"scroll",i.updateBound,i.scrollParents),i.scrollElement=o,i.eventsEnabled=!0,i}function N(){this.state.eventsEnabled||(this.state=L(this.reference,this.options,this.state,this.scheduleUpdate))}function R(t,e){return window.removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e}function z(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=R(this.reference,this.state))}function j(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function F(t,e){Object.keys(e).forEach(function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&j(e[i])&&(n="px"),t.style[i]=e[i]+n})}function I(t,e){Object.keys(e).forEach(function(i){!1!==e[i]?t.setAttribute(i,e[i]):t.removeAttribute(i)})}function H(t,e,i){var n=k(t,function(t){return t.name===e}),r=!!n&&t.some(function(t){return t.name===i&&t.enabled&&t.order<n.order});if(!r){var o="`"+e+"`",s="`"+i+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}function q(t){return"end"===t?"start":"start"===t?"end":t}function B(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=rt.indexOf(t),n=rt.slice(i+1).concat(rt.slice(0,i));return e?n.reverse():n}function W(t,e,i,n){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=i;break;case"%":case"%r":default:a=n}return d(a)[e]/100*o}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}function X(t,e,i,n){var r=[0,0],o=-1!==["right","left"].indexOf(n),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(k(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(u=u.map(function(t,n){var r=(1===n?!o:o)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return W(t,r,e,i)})})).forEach(function(t,e){t.forEach(function(i,n){j(i)&&(r[e]+=i*("-"===t[n-1]?-1:1))})}),r}for(var Y=["native code","[object MutationObserverConstructor]"],U="undefined"!=typeof window,$=["Edge","Trident","Firefox"],V=0,Z=0;Z<$.length;Z+=1)if(U&&navigator.userAgent.indexOf($[Z])>=0){V=1;break}var G=U&&function(t){return Y.some(function(e){return(t||"").toString().indexOf(e)>-1})}(window.MutationObserver)?function(t){var e=!1,i=0,n=document.createElement("span");return new MutationObserver(function(){t(),e=!1}).observe(n,{attributes:!0}),function(){e||(e=!0,n.setAttribute("x-index",i),i+=1)}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},V))}},Q=void 0,K=function(){return void 0===Q&&(Q=-1!==navigator.appVersion.indexOf("MSIE 10")),Q},J=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},tt=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),et=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},it=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},nt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],rt=nt.slice(3),ot={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},st={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],n=e.split("-")[1];if(n){var r=t.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(i),l=a?"left":"top",u=a?"width":"height",c={start:et({},l,o[l]),end:et({},l,o[l]+o[u]-s[u])};t.offsets.popper=it({},s,c[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i=e.offset,n=t.placement,r=t.offsets,o=r.popper,s=r.reference,a=n.split("-")[0],l=void 0;return l=j(+i)?[+i,0]:X(i,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||r(t.instance.popper);t.instance.reference===i&&(i=r(i));var n=_(t.instance.popper,t.instance.reference,e.padding,i);e.boundaries=n;var o=e.priority,s=t.offsets.popper,a={primary:function(t){var i=s[t];return s[t]<n[t]&&!e.escapeWithReference&&(i=Math.max(s[t],n[t])),et({},t,i)},secondary:function(t){var i="right"===t?"left":"top",r=s[i];return s[t]>n[t]&&!e.escapeWithReference&&(r=Math.min(s[i],n[t]-("right"===t?s.width:s.height))),et({},i,r)}};return o.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";s=it({},s,a[e](t))}),t.offsets.popper=s,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,n=e.reference,r=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",u=s?"width":"height";return i[a]<o(n[l])&&(t.offsets.popper[l]=o(n[l])-i[u]),i[l]>o(n[a])&&(t.offsets.popper[l]=o(n[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,i){if(!H(t.instance.modifiers,"arrow","keepTogether"))return t;var n=i.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),u=l?"height":"width",c=l?"Top":"Left",h=c.toLowerCase(),f=l?"left":"top",p=l?"bottom":"right",m=w(n)[u];a[p]-m<s[h]&&(t.offsets.popper[h]-=s[h]-(a[p]-m)),a[h]+m>s[p]&&(t.offsets.popper[h]+=a[h]+m-s[p]);var g=a[h]+a[u]/2-m/2,v=e(t.instance.popper,"margin"+c).replace("px",""),_=g-d(t.offsets.popper)[h]-v;return _=Math.max(Math.min(s[u]-m,_),0),t.arrowElement=n,t.offsets.arrow={},t.offsets.arrow[h]=Math.round(_),t.offsets.arrow[f]="",t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(A(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=_(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement),n=t.placement.split("-")[0],r=T(n),o=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case ot.FLIP:s=[n,r];break;case ot.CLOCKWISE:s=B(n);break;case ot.COUNTERCLOCKWISE:s=B(n,!0);break;default:s=e.behavior}return s.forEach(function(a,l){if(n!==a||s.length===l+1)return t;n=t.placement.split("-")[0],r=T(n);var u=t.offsets.popper,c=t.offsets.reference,h=Math.floor,f="left"===n&&h(u.right)>h(c.left)||"right"===n&&h(u.left)<h(c.right)||"top"===n&&h(u.bottom)>h(c.top)||"bottom"===n&&h(u.top)<h(c.bottom),d=h(u.left)<h(i.left),p=h(u.right)>h(i.right),m=h(u.top)<h(i.top),g=h(u.bottom)>h(i.bottom),v="left"===n&&d||"right"===n&&p||"top"===n&&m||"bottom"===n&&g,_=-1!==["top","bottom"].indexOf(n),y=!!e.flipVariations&&(_&&"start"===o&&d||_&&"end"===o&&p||!_&&"start"===o&&m||!_&&"end"===o&&g);(f||v||y)&&(t.flipped=!0,(f||v)&&(n=s[l+1]),y&&(o=q(o)),t.placement=n+(o?"-"+o:""),t.offsets.popper=it({},t.offsets.popper,S(t.instance.popper,t.offsets.reference,t.placement)),t=E(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],n=t.offsets,r=n.popper,o=n.reference,s=-1!==["left","right"].indexOf(i),a=-1===["top","left"].indexOf(i);return r[s?"left":"top"]=o[i]-(a?r[s?"width":"height"]:0),t.placement=T(e),t.offsets.popper=d(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!H(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=k(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,n=e.y,o=t.offsets.popper,s=k(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==s?s:e.gpuAcceleration,l=p(r(t.instance.popper)),u={position:o.position},c={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},h="bottom"===i?"top":"bottom",f="right"===n?"left":"right",d=O("transform"),m=void 0,g=void 0;if(g="bottom"===h?-l.height+c.bottom:c.top,m="right"===f?-l.width+c.right:c.left,a&&d)u[d]="translate3d("+m+"px, "+g+"px, 0)",u[h]=0,u[f]=0,u.willChange="transform";else{var v="bottom"===h?-1:1,_="right"===f?-1:1;u[h]=g*v,u[f]=m*_,u.willChange=h+", "+f}var y={"x-placement":t.placement};return t.attributes=it({},y,t.attributes),t.styles=it({},u,t.styles),t.arrowStyles=it({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){return F(t.instance.popper,t.styles),I(t.instance.popper,t.attributes),t.arrowElement&&Object.keys(t.arrowStyles).length&&F(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,n,r){var o=b(r,e,t),s=x(i.placement,o,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",s),F(e,{position:"absolute"}),i},gpuAcceleration:void 0}}},at=function(){function e(i,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};J(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=G(this.update.bind(this)),this.options=it({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=i.jquery?i[0]:i,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return it({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(e){e.enabled&&t(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return tt(e,[{key:"update",value:function(){return P.call(this)}},{key:"destroy",value:function(){return D.call(this)}},{key:"enableEventListeners",value:function(){return N.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();return at.Utils=("undefined"!=typeof window?window:global).PopperUtils,at.placements=nt,at.Defaults=st,at}),function(){"use strict";function t(n){if(!n)throw new Error("No options passed to Waypoint constructor");if(!n.element)throw new Error("No element option passed to Waypoint constructor");if(!n.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,n),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=n.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),i[this.key]=this,e+=1}var e=0,i={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete i[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var n in i)e.push(i[n]);for(var r=0,o=e.length;r<o;r++)e[r][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.invokeAll("enable")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=r.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,n[t.waypointContextKey]=this,i+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,n={},r=window.Waypoint,o=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete n[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,r.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){e.didScroll&&!r.isTouch||(e.didScroll=!0,r.requestAnimationFrame(t))})},e.prototype.handleResize=function(){r.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in e){var n=e[i],r=n.newScroll>n.oldScroll?n.forward:n.backward;for(var o in this.waypoints[i]){var s=this.waypoints[i][o],a=n.oldScroll<s.triggerPoint,l=n.newScroll>=s.triggerPoint,u=a&&l,c=!a&&!l;(u||c)&&(s.queueTrigger(r),t[s.group.id]=s.group)}}for(var h in t)t[h].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?r.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?r.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var i in this.waypoints[e])t.push(this.waypoints[e][i]);for(var n=0,r=t.length;n<r;n++)t[n].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,i=e?void 0:this.adapter.offset(),n={};this.handleScroll(),t={horizontal:{contextOffset:e?0:i.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:i.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var o in t){var s=t[o];for(var a in this.waypoints[o]){var l,u,c,h,f,d=this.waypoints[o][a],p=d.options.offset,m=d.triggerPoint,g=0,v=null==m;d.element!==d.element.window&&(g=d.adapter.offset()[s.offsetProp]),"function"==typeof p?p=p.apply(d):"string"==typeof p&&(p=parseFloat(p),d.options.offset.indexOf("%")>-1&&(p=Math.ceil(s.contextDimension*p/100))),l=s.contextScroll-s.contextOffset,d.triggerPoint=g+l-p,u=m<s.oldScroll,c=d.triggerPoint>=s.oldScroll,h=u&&c,f=!u&&!c,!v&&h?(d.queueTrigger(s.backward),n[d.group.id]=d.group):!v&&f?(d.queueTrigger(s.forward),n[d.group.id]=d.group):v&&s.oldScroll>=d.triggerPoint&&(d.queueTrigger(s.forward),n[d.group.id]=d.group)}}return r.requestAnimationFrame(function(){for(var t in n)n[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in n)n[t].refresh()},e.findByElement=function(t){return n[t.waypointContextKey]},window.onload=function(){o&&o(),e.refreshAll()},r.requestAnimationFrame=function(e){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t).call(window,e)},r.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function i(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),n[this.axis][this.name]=this}var n={vertical:{},horizontal:{}},r=window.Waypoint;i.prototype.add=function(t){this.waypoints.push(t)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var n=this.triggerQueues[i],r="up"===i||"left"===i;n.sort(r?e:t);for(var o=0,s=n.length;o<s;o+=1){var a=n[o];(a.options.continuous||o===n.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(e){this.waypoints.sort(t);var i=r.Adapter.inArray(e,this.waypoints);return i===this.waypoints.length-1?null:this.waypoints[i+1]},i.prototype.previous=function(e){this.waypoints.sort(t);var i=r.Adapter.inArray(e,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},i.prototype.remove=function(t){var e=r.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(t){return n[t.axis][t.name]||new i(t)},r.Group=i}(),function(){"use strict";function t(t){return t===t.window}function e(e){return t(e)?e:e.defaultView}function i(t){this.element=t,this.handlers={}}var n=window.Waypoint;i.prototype.innerHeight=function(){return t(this.element)?this.element.innerHeight:this.element.clientHeight},i.prototype.innerWidth=function(){return t(this.element)?this.element.innerWidth:this.element.clientWidth},i.prototype.off=function(t,e){function i(t,e,i){for(var n=0,r=e.length-1;n<r;n++){var o=e[n];i&&i!==o||t.removeEventListener(o)}}var n=t.split("."),r=n[0],o=n[1],s=this.element;if(o&&this.handlers[o]&&r)i(s,this.handlers[o][r],e),this.handlers[o][r]=[];else if(r)for(var a in this.handlers)i(s,this.handlers[a][r]||[],e),this.handlers[a][r]=[];else if(o&&this.handlers[o]){for(var l in this.handlers[o])i(s,this.handlers[o][l],e);this.handlers[o]={}}},i.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,i=e(this.element.ownerDocument),n={top:0,left:0};return this.element.getBoundingClientRect&&(n=this.element.getBoundingClientRect()),{top:n.top+i.pageYOffset-t.clientTop,left:n.left+i.pageXOffset-t.clientLeft}},i.prototype.on=function(t,e){var i=t.split("."),n=i[0],r=i[1]||"__default",o=this.handlers[r]=this.handlers[r]||{};(o[n]=o[n]||[]).push(e),this.element.addEventListener(n,e)},i.prototype.outerHeight=function(e){var i,n=this.innerHeight();return e&&!t(this.element)&&(i=window.getComputedStyle(this.element),n+=parseInt(i.marginTop,10),n+=parseInt(i.marginBottom,10)),n},i.prototype.outerWidth=function(e){var i,n=this.innerWidth();return e&&!t(this.element)&&(i=window.getComputedStyle(this.element),n+=parseInt(i.marginLeft,10),n+=parseInt(i.marginRight,10)),n},i.prototype.scrollLeft=function(){var t=e(this.element);return t?t.pageXOffset:this.element.scrollLeft},i.prototype.scrollTop=function(){var t=e(this.element);return t?t.pageYOffset:this.element.scrollTop},i.extend=function(){for(var t=Array.prototype.slice.call(arguments),e=1,i=t.length;e<i;e++)!function(t,e){if("object"==typeof t&&"object"==typeof e)for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])}(t[0],t[e]);return t[0]},i.inArray=function(t,e,i){return null==e?-1:e.indexOf(t,i)},i.isEmptyObject=function(t){for(var e in t)return!1;return!0},n.adapters.push({name:"noframework",Adapter:i}),n.Adapter=i}();var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,o=t.cycle;for(n in o)r=o[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},o=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=o.prototype.render},s=i._internals,a=s.isSelector,l=s.isArray,u=o.prototype=i.to({},.1,{}),c=[];o.version="1.20.2",u.constructor=o,u.kill()._gc=!1,o.killTweensOf=o.killDelayedCallsTo=i.killTweensOf,o.getTweensOf=i.getTweensOf,o.lagSmoothing=i.lagSmoothing,o.ticker=i.ticker,o.render=i.render,u.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),i.prototype.invalidate.call(this)},u.updateTo=function(t,e){var n,r=this.ratio,o=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||o)if(e)this._initted=!1,o&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var s=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(s,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||o)for(var a,l=1/(1-r),u=this._firstPT;u;)a=u.s+u.c,u.c*=l,u.s=a-u.c,u=u._next;return this},u.render=function(t,e,n){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var r,o,a,l,u,c,h,f,d,p=this._dirty?this.totalDuration():this._totalDuration,m=this._time,g=this._totalTime,v=this._cycle,_=this._duration,y=this._rawPrevTime;if(t>=p-1e-7&&t>=0?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=_,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(r=!0,o="onComplete",n=n||this._timeline.autoRemoveChildren),0===_&&(this._initted||!this.vars.lazy||n)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-7||1e-10===y&&"isPause"!==this.data)&&y!==t&&(n=!0,y>1e-10&&(o="onReverseComplete")),this._rawPrevTime=f=!e||t||y===t?t:1e-10)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==g||0===_&&y>0)&&(o="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===_&&(this._initted||!this.vars.lazy||n)&&(y>=0&&(n=!0),this._rawPrevTime=f=!e||t||y===t?t:1e-10)),this._initted||(n=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=_+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&g<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=_-this._time,(d=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==d||this._initted?this._yoyoEase=d=!0===d?this._ease:d instanceof Ease?d:Ease.map[d]:(d=this.vars.ease,this._yoyoEase=d=d?d instanceof Ease?d:"function"==typeof d?new Ease(d,this.vars.easeParams):Ease.map[d]||i.defaultEase:i.defaultEase)),this.ratio=d?1-d.getRatio((_-this._time)/_):0)),this._time>_?this._time=_:this._time<0&&(this._time=0)),this._easeType&&!d?(u=this._time/_,c=this._easeType,h=this._easePower,(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===h?u*=u:2===h?u*=u*u:3===h?u*=u*u*u:4===h&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:this._time/_<.5?this.ratio=u/2:this.ratio=1-u/2):d||(this.ratio=this._ease.getRatio(this._time/_))),m!==this._time||n||v!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!n&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=m,this._totalTime=g,this._rawPrevTime=y,this._cycle=v,s.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||r||d?r&&this._ease._calcEnd&&!d&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/_)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==m&&t>=0&&(this._active=!0),0===g&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,n):o||(o="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==_||e||this._callback("onStart"))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,n),e||(this._totalTime!==g||o)&&this._callback("onUpdate")),this._cycle!==v&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),o&&(this._gc&&!n||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,n),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[o]&&this._callback(o),0===_&&1e-10===this._rawPrevTime&&1e-10!==f&&(this._rawPrevTime=0)))}else g!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},o.to=function(t,e,i){return new o(t,e,i)},o.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new o(t,e,i)},o.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new o(t,e,n)},o.staggerTo=o.allTo=function(t,e,s,u,h,f,d){u=u||0;var p,m,g,v,_=0,y=[],x=s.cycle,b=s.startAt&&s.startAt.cycle;for(l(t)||("string"==typeof t&&(t=i.selector(t)||t),a(t)&&(t=n(t))),t=t||[],u<0&&((t=n(t)).reverse(),u*=-1),p=t.length-1,g=0;g<=p;g++){m={};for(v in s)m[v]=s[v];if(x&&(r(m,t,g),null!=m.duration&&(e=m.duration,delete m.duration)),b){b=m.startAt={};for(v in s.startAt)b[v]=s.startAt[v];r(m.startAt,t,g)}m.delay=_+(m.delay||0),g===p&&h&&(m.onComplete=function(){s.onComplete&&s.onComplete.apply(s.onCompleteScope||this,arguments),h.apply(d||s.callbackScope||this,f||c)}),y[g]=new o(t[g],e,m),_+=u}return y},o.staggerFrom=o.allFrom=function(t,e,i,n,r,s,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,o.staggerTo(t,e,i,n,r,s,a)},o.staggerFromTo=o.allFromTo=function(t,e,i,n,r,s,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,o.staggerTo(t,e,n,r,s,a,l)},o.delayedCall=function(t,e,i,n,r){return new o(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},o.set=function(t,e){return new o(t,0,e)},o.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var h=function(t,e){for(var n=[],r=0,o=t._first;o;)o instanceof i?n[r++]=o:(e&&(n[r++]=o),r=(n=n.concat(h(o,e))).length),o=o._next;return n},f=o.getAllTweens=function(e){return h(t._rootTimeline,e).concat(h(t._rootFramesTimeline,e))};o.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var o,s,a,l=f(0!=r),u=l.length,c=i&&n&&r;for(a=0;a<u;a++)s=l[a],(c||s instanceof e||(o=s.target===s.vars.onComplete)&&n||i&&!o)&&(t?s.totalTime(s._reversed?0:s.totalDuration()):s._enabled(!1,!1))},o.killChildTweensOf=function(t,e){if(null!=t){var r,u,c,h,f,d=s.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),a(t)&&(t=n(t)),l(t))for(h=t.length;--h>-1;)o.killChildTweensOf(t[h],e);else{r=[];for(c in d)for(u=d[c].target.parentNode;u;)u===t&&(r=r.concat(d[c].tweens)),u=u.parentNode;for(f=r.length,h=0;h<f;h++)e&&r[h].totalTime(r[h].totalDuration()),r[h]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=!1!==i,n=!1!==n;for(var o,s,a=f(r=!1!==r),l=i&&n&&r,u=a.length;--u>-1;)s=a[u],(l||s instanceof e||(o=s.target===s.vars.onComplete)&&n||i&&!o)&&s.paused(t)};return o.pauseAll=function(t,e,i){d(!0,t,e,i)},o.resumeAll=function(t,e,i){d(!1,t,e,i)},o.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||1e-10,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},u.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},o},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],a(i)&&-1!==i.join("").indexOf("{self}")&&(r[n]=this._swapSelfInParams(i));a(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},r=i._internals,o=n._internals={},s=r.isSelector,a=r.isArray,l=r.lazyTweens,u=r.lazyRender,c=_gsScope._gsDefine.globals,h=function(t){var e,i={};for(e in t)i[e]=t[e];return i},f=function(t,e,i){var n,r,o=t.cycle;for(n in o)r=o[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},d=o.pauseCallback=function(){},p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},m=n.prototype=new e;return n.version="1.20.2",m.constructor=n,m.kill()._gc=m._forcingPlayhead=m._hasPause=!1,m.to=function(t,e,n,r){var o=n.repeat&&c.TweenMax||i;return e?this.add(new o(t,e,n),r):this.set(t,n,r)},m.from=function(t,e,n,r){return this.add((n.repeat&&c.TweenMax||i).from(t,e,n),r)},m.fromTo=function(t,e,n,r,o){var s=r.repeat&&c.TweenMax||i;return e?this.add(s.fromTo(t,e,n,r),o):this.set(t,r,o)},m.staggerTo=function(t,e,r,o,a,l,u,c){var d,m,g=new n({onComplete:l,onCompleteParams:u,callbackScope:c,smoothChildTiming:this.smoothChildTiming}),v=r.cycle;for("string"==typeof t&&(t=i.selector(t)||t),s(t=t||[])&&(t=p(t)),(o=o||0)<0&&((t=p(t)).reverse(),o*=-1),m=0;m<t.length;m++)(d=h(r)).startAt&&(d.startAt=h(d.startAt),d.startAt.cycle&&f(d.startAt,t,m)),v&&(f(d,t,m),null!=d.duration&&(e=d.duration,delete d.duration)),g.to(t[m],e,d,m*o);return this.add(g,a)},m.staggerFrom=function(t,e,i,n,r,o,s,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,o,s,a)},m.staggerFromTo=function(t,e,i,n,r,o,s,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,o,s,a,l)},m.call=function(t,e,n,r){return this.add(i.delayedCall(0,t,e,n),r)},m.set=function(t,e,n){return n=this._parseTimeOrLabel(n,0,!0),null==e.immediateRender&&(e.immediateRender=n===this._time&&!this._paused),this.add(new i(t,0,e),n)},n.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var r,o,s=new n(t),a=s._timeline;for(null==e&&(e=!0),a._remove(s,!0),s._startTime=0,s._rawPrevTime=s._time=s._totalTime=a._time,r=a._first;r;)o=r._next,e&&r instanceof i&&r.target===r.vars.onComplete||s.add(r,r._startTime-r._delay),r=o;return a.add(s,0),s},m.add=function(r,o,s,l){var u,c,h,f,d,p;if("number"!=typeof o&&(o=this._parseTimeOrLabel(o,0,!0,r)),!(r instanceof t)){if(r instanceof Array||r&&r.push&&a(r)){for(s=s||"normal",l=l||0,u=o,c=r.length,h=0;h<c;h++)a(f=r[h])&&(f=new n({tweens:f})),this.add(f,u),"string"!=typeof f&&"function"!=typeof f&&("sequence"===s?u=f._startTime+f.totalDuration()/f._timeScale:"start"===s&&(f._startTime-=f.delay())),u+=l;return this._uncache(!0)}if("string"==typeof r)return this.addLabel(r,o);if("function"!=typeof r)throw"Cannot add "+r+" into the timeline; it is not a tween, timeline, function, or string.";r=i.delayedCall(0,r)}if(e.prototype.add.call(this,r,o),r._time&&r.render((this.rawTime()-r._startTime)*r._timeScale,!1,!1),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=(d=this).rawTime()>r._startTime;d._timeline;)p&&d._timeline.smoothChildTiming?d.totalTime(d._totalTime,!0):d._gc&&d._enabled(!0,!1),d=d._timeline;return this},m.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&a(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},m._remove=function(t,i){return e.prototype._remove.call(this,t,i),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},m.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},m.insert=m.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},m.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},m.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},m.addPause=function(t,e,n,r){var o=i.delayedCall(0,d,n,r||this);return o.vars.onComplete=o.vars.onReverseComplete=e,o.data="isPause",this._hasPause=!0,this.add(o,t)},m.removeLabel=function(t){return delete this._labels[t],this},m.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},m._parseTimeOrLabel=function(e,i,n,r){var o,s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&a(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if(o=this.duration()>99999999999?this.recent().endTime(!1):this._duration,"string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-o:0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=o);else{if(-1===(s=e.indexOf("=")))return null==this._labels[e]?n?this._labels[e]=o+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):o}return Number(e)+i},m.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},m.stop=function(){return this.paused(!0)},m.gotoAndPlay=function(t,e){return this.play(t,e)},m.gotoAndStop=function(t,e){return this.pause(t,e)},m.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,s,a,c,h,f=this._dirty?this.totalDuration():this._totalDuration,d=this._time,p=this._startTime,m=this._timeScale,g=this._paused;if(t>=f-1e-7&&t>=0)this._totalTime=this._time=f,this._reversed||this._hasPausedChild()||(r=!0,s="onComplete",a=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||1e-10===this._rawPrevTime)&&this._rawPrevTime!==t&&this._first&&(a=!0,this._rawPrevTime>1e-10&&(s="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,t=f+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&1e-10!==this._rawPrevTime&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(s="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(a=r=!0,s="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(a=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(a=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!c;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(c=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!c;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(c=n),n=n._prev;c&&(this._time=t=c._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||a||c){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),(h=this._time)>=d)for(n=this._first;n&&(o=n._next,h===this._time&&(!this._paused||g));)(n._active||n._startTime<=h&&!n._paused&&!n._gc)&&(c===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,h===this._time&&(!this._paused||g));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(c===n){for(c=n._prev;c&&c.endTime()>this._time;)c.render(c._reversed?c.totalDuration()-(t-c._startTime)*c._timeScale:(t-c._startTime)*c._timeScale,e,i),c=c._prev;c=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(l.length&&u(),this._callback("onUpdate"))),s&&(this._gc||p!==this._startTime&&m===this._timeScale||(0===this._time||f>=this.totalDuration())&&(r&&(l.length&&u(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[s]&&this._callback(s)))}},m._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof n&&t._hasPausedChild())return!0;t=t._next}return!1},m.getChildren=function(t,e,n,r){r=r||-9999999999;for(var o=[],s=this._first,a=0;s;)s._startTime<r||(s instanceof i?!1!==e&&(o[a++]=s):(!1!==n&&(o[a++]=s),!1!==t&&(a=(o=o.concat(s.getChildren(!0,e,n))).length))),s=s._next;return o},m.getTweensOf=function(t,e){var n,r,o=this._gc,s=[],a=0;for(o&&this._enabled(!0,!0),r=(n=i.getTweensOf(t)).length;--r>-1;)(n[r].timeline===this||e&&this._contains(n[r]))&&(s[a++]=n[r]);return o&&this._enabled(!1,!0),s},m.recent=function(){return this._recent},m._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},m.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,o=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in o)o[n]>=i&&(o[n]+=t);return this._uncache(!0)},m._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},m.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},m.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},m._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},m.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},m.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},m.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,o=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>o&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):o=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),o=0),(i=r._startTime+r._totalDuration/r._timeScale)>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},m.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},m.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},m.rawTime=function(t){return t&&(this._paused||this._repeat&&this.time()>0&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},n},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,i){var n=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},r=e._internals,o=r.lazyTweens,s=r.lazyRender,a=_gsScope._gsDefine.globals,l=new i(null,null,1,0),u=n.prototype=new t;return u.constructor=n,u.kill()._gc=!1,n.version="1.20.2",u.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},u.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},u.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},u.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},u.tweenTo=function(t,i){i=i||{};var n,r,o,s={ease:l,useFrames:this.usesFrames(),immediateRender:!1},u=i.repeat&&a.TweenMax||e;for(r in i)s[r]=i[r];return s.time=this._parseTimeOrLabel(t),n=Math.abs(Number(s.time)-this._time)/this._timeScale||.001,o=new u(this,n,s),s.onStart=function(){o.target.paused(!0),o.vars.time!==o.target.time()&&n===o.duration()&&o.duration(Math.abs(o.vars.time-o.target.time())/o.target._timeScale),i.onStart&&i.onStart.apply(i.onStartScope||i.callbackScope||o,i.onStartParams||[])},o},u.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},u.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,a,l,u,c,h,f,d=this._dirty?this.totalDuration():this._totalDuration,p=this._duration,m=this._time,g=this._totalTime,v=this._startTime,_=this._timeScale,y=this._rawPrevTime,x=this._paused,b=this._cycle;if(t>=d-1e-7&&t>=0)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,l="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||y<0||1e-10===y)&&y!==t&&this._first&&(u=!0,y>1e-10&&(l="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:1e-10,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:(this._time=p,t=p+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==m||0===p&&1e-10!==y&&(y>0||t<0&&y>=0)&&!this._locked)&&(l="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,l="onReverseComplete"):y>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=p||!e||t||this._rawPrevTime===t?t:1e-10,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else if(0===p&&y<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=p+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&g<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!=(1&this._cycle)&&(this._time=p-this._time),this._time>p?(this._time=p,t=p+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if((t=this._time)>=m||this._repeat&&b!==this._cycle)for(n=this._first;n&&n._startTime<=t&&!h;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(h=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!h;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(h=n),n=n._prev;h&&h._startTime<p&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var w=this._yoyo&&0!=(1&b),T=w===(this._yoyo&&0!=(1&this._cycle)),S=this._totalTime,k=this._cycle,C=this._rawPrevTime,E=this._time;if(this._totalTime=b*p,this._cycle<b?w=!w:this._totalTime+=p,this._time=m,this._rawPrevTime=0===p?y-1e-4:y,this._cycle=b,this._locked=!0,m=w?0:p,this.render(m,e,0===p),e||this._gc||this.vars.onRepeat&&(this._cycle=k,this._locked=!1,this._callback("onRepeat")),m!==this._time)return;if(T&&(this._cycle=b,this._locked=!0,m=w?p+1e-4:-1e-4,this.render(m,!0,!1)),this._locked=!1,this._paused&&!x)return;this._time=E,this._totalTime=S,this._cycle=k,this._rawPrevTime=C}if(this._time!==m&&this._first||i||u||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==g&&t>0&&(this._active=!0),0===g&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),(f=this._time)>=m)for(n=this._first;n&&(a=n._next,f===this._time&&(!this._paused||x));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(h===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=a;else for(n=this._last;n&&(a=n._prev,f===this._time&&(!this._paused||x));){if(n._active||n._startTime<=m&&!n._paused&&!n._gc){if(h===n){for(h=n._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=a}this._onUpdate&&(e||(o.length&&s(),this._callback("onUpdate"))),l&&(this._locked||this._gc||v!==this._startTime&&_===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(o.length&&s(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[l]&&this._callback(l)))}else g!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},u.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,o=[],s=this.getChildren(t,e,i),a=0,l=s.length;for(n=0;n<l;n++)(r=s[n]).isActive()&&(o[a++]=r);return o},u.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},u.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},u.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},u.invalidate=function(){return this._locked=!1,t.prototype.invalidate.call(this)},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},u.totalDuration=function(e){return arguments.length?-1!==this._repeat&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},u.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},n},!0),function(){var t=180/Math.PI,e=[],i=[],n=[],r={},o=_gsScope._gsDefine.globals,s=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},a=function(t,e,i,n){var r={a:t},o={},s={},a={c:n},l=(t+e)/2,u=(e+i)/2,c=(i+n)/2,h=(l+u)/2,f=(u+c)/2,d=(f-h)/8;return r.b=l+(t-l)/4,o.b=h+d,r.c=o.a=(r.b+o.b)/2,o.c=s.a=(h+f)/2,s.b=f-d,a.b=c+(n-c)/4,s.c=a.a=(s.b+a.b)/2,[r,o,s,a]},l=function(t,r,o,s,l){var u,c,h,f,d,p,m,g,v,_,y,x,b,w=t.length-1,T=0,S=t[0].a;for(u=0;u<w;u++)c=(d=t[T]).a,h=d.d,f=t[T+1].d,l?(y=e[u],b=((x=i[u])+y)*r*.25/(s?.5:n[u]||.5),g=h-((p=h-(h-c)*(s?.5*r:0!==y?b/y:0))+(((m=h+(f-h)*(s?.5*r:0!==x?b/x:0))-p)*(3*y/(y+x)+.5)/4||0))):g=h-((p=h-(h-c)*r*.5)+(m=h+(f-h)*r*.5))/2,p+=g,m+=g,d.c=v=p,d.b=0!==u?S:S=d.a+.6*(d.c-d.a),d.da=h-c,d.ca=v-c,d.ba=S-c,o?(_=a(c,S,v,h),t.splice(T,1,_[0],_[1],_[2],_[3]),T+=4):T++,S=m;(d=t[T]).b=S,d.c=S+.4*(d.d-S),d.da=d.d-d.a,d.ca=d.c-d.a,d.ba=S-d.a,o&&(_=a(d.a,S,d.c,d.d),t.splice(T,1,_[0],_[1],_[2],_[3]))},u=function(t,n,r,o){var a,l,u,c,h,f,d=[];if(o)for(l=(t=[o].concat(t)).length;--l>-1;)"string"==typeof(f=t[l][n])&&"="===f.charAt(1)&&(t[l][n]=o[n]+Number(f.charAt(0)+f.substr(2)));if((a=t.length-2)<0)return d[0]=new s(t[0][n],0,0,t[0][n]),d;for(l=0;l<a;l++)u=t[l][n],c=t[l+1][n],d[l]=new s(u,0,0,c),r&&(h=t[l+2][n],e[l]=(e[l]||0)+(c-u)*(c-u),i[l]=(i[l]||0)+(h-c)*(h-c));return d[l]=new s(t[l][n],0,0,t[l+1][n]),d},c=function(t,o,s,a,c,h){var f,d,p,m,g,v,_,y,x={},b=[],w=h||t[0];c="string"==typeof c?","+c+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==o&&(o=1);for(d in t[0])b.push(d);if(t.length>1){for(y=t[t.length-1],_=!0,f=b.length;--f>-1;)if(d=b[f],Math.abs(w[d]-y[d])>.05){_=!1;break}_&&(t=t.concat(),h&&t.unshift(h),t.push(t[1]),h=t[t.length-3])}for(e.length=i.length=n.length=0,f=b.length;--f>-1;)d=b[f],r[d]=-1!==c.indexOf(","+d+","),x[d]=u(t,d,r[d],h);for(f=e.length;--f>-1;)e[f]=Math.sqrt(e[f]),i[f]=Math.sqrt(i[f]);if(!a){for(f=b.length;--f>-1;)if(r[d])for(v=(p=x[b[f]]).length-1,m=0;m<v;m++)g=p[m+1].da/i[m]+p[m].da/e[m]||0,n[m]=(n[m]||0)+g*g;for(f=n.length;--f>-1;)n[f]=Math.sqrt(n[f])}for(f=b.length,m=s?4:1;--f>-1;)p=x[d=b[f]],l(p,o,s,a,r[d]),_&&(p.splice(0,m),p.splice(p.length-m,m));return x},h=function(t,e,i){var n,r,o,a,l,u,c,h,f,d,p,m={},g="cubic"===(e=e||"soft")?3:2,v="soft"===e,_=[];if(v&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(f in t[0])_.push(f);for(u=_.length;--u>-1;){for(m[f=_[u]]=l=[],d=0,h=t.length,c=0;c<h;c++)n=null==i?t[c][f]:"string"==typeof(p=t[c][f])&&"="===p.charAt(1)?i[f]+Number(p.charAt(0)+p.substr(2)):Number(p),v&&c>1&&c<h-1&&(l[d++]=(n+l[d-2])/2),l[d++]=n;for(h=d-g+1,d=0,c=0;c<h;c+=g)n=l[c],r=l[c+1],o=l[c+2],a=2===g?0:l[c+3],l[d++]=p=3===g?new s(n,r,o,a):new s(n,(2*r+n)/3,(2*r+o)/3,o);l.length=d}return m},f=function(t,e,i){for(var n,r,o,s,a,l,u,c,h,f,d,p=1/i,m=t.length;--m>-1;)for(o=(f=t[m]).a,s=f.d-o,a=f.c-o,l=f.b-o,n=r=0,c=1;c<=i;c++)n=r-(r=((u=p*c)*u*s+3*(h=1-u)*(u*a+h*l))*u),e[d=m*i+c-1]=(e[d]||0)+n*n},d=function(t,e){var i,n,r,o,s=[],a=[],l=0,u=0,c=(e=e>>0||6)-1,h=[],d=[];for(i in t)f(t[i],s,e);for(r=s.length,n=0;n<r;n++)l+=Math.sqrt(s[n]),d[o=n%e]=l,o===c&&(u+=l,h[o=n/e>>0]=d,a[o]=u,l=0,d=[]);return{length:u,lengths:a,segments:h}},p=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,o,s,a,l=e.values||[],u={},f=l[0],p=e.autoRotate||i.vars.orientToBezier;this._autoRotate=p?p instanceof Array?p:[["x","y","rotation",!0===p?0:Number(p)||0]]:null;for(n in f)this._props.push(n);for(o=this._props.length;--o>-1;)n=this._props[o],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],u[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||u[n]!==l[0][n]&&(a=u);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?c(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):h(l,e.type,u),this._segCount=this._beziers[n].length,this._timeRes){var m=d(this._beziers,this._timeRes);this._length=m.length,this._lengths=m.lengths,this._segments=m.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(p=this._autoRotate)for(this._initialRotations=[],p[0]instanceof Array||(this._autoRotate=p=[p]),o=p.length;--o>-1;){for(s=0;s<3;s++)n=p[o][s],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=p[o][2],this._initialRotations[o]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,o,s,a,l,u,c,h,f=this._segCount,d=this._func,p=this._target,m=e!==this._startRatio;if(this._timeRes){if(c=this._lengths,h=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(u=f-1;r<u&&(this._l2=c[++r])<=e;);this._l1=c[r-1],this._li=r,this._curSeg=h=this._segments[r],this._s2=h[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=c[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=c[r],this._li=r,this._curSeg=h=this._segments[r],this._s1=h[(this._si=h.length-1)-1]||0,this._s2=h[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<h.length-1){for(u=h.length-1;r<u&&(this._s2=h[++r])<=e;);this._s1=h[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=h[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=h[r],this._si=r}a=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(e-(i=e<0?0:e>=1?f-1:f*e>>0)*(1/f))*f;for(n=1-a,r=this._props.length;--r>-1;)o=this._props[r],l=(a*a*(s=this._beziers[o][i]).da+3*n*(a*s.ca+n*s.ba))*a+s.a,this._mod[o]&&(l=this._mod[o](l,p)),d[o]?p[o](l):p[o]=l;if(this._autoRotate){var g,v,_,y,x,b,w,T=this._autoRotate;for(r=T.length;--r>-1;)o=T[r][2],b=T[r][3]||0,w=!0===T[r][4]?1:t,s=this._beziers[T[r][0]],g=this._beziers[T[r][1]],s&&g&&(s=s[i],g=g[i],v=s.a+(s.b-s.a)*a,v+=((y=s.b+(s.c-s.b)*a)-v)*a,y+=(s.c+(s.d-s.c)*a-y)*a,_=g.a+(g.b-g.a)*a,_+=((x=g.b+(g.c-g.b)*a)-_)*a,x+=(g.c+(g.d-g.c)*a-x)*a,l=m?Math.atan2(x-_,y-v)*w+b:this._initialRotations[r],this._mod[o]&&(l=this._mod[o](l,p)),d[o]?p[o](l):p[o]=l)}}}),m=p.prototype;p.bezierThrough=c,p.cubicToQuadratic=a,p._autoCSS=!0,p.quadraticToCubic=function(t,e,i){return new s(t,(2*e+t)/3,(2*e+i)/3,i)},p._cssRegister=function(){var t=o.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,o,s,a,l){e instanceof Array&&(e={values:e}),l=new p;var u,c,h,f=e.values,d=f.length-1,m=[],g={};if(d<0)return a;for(u=0;u<=d;u++)h=i(t,f[u],s,a,l,d!==u),m[u]=h.end;for(c in e)g[c]=e[c];return g.values=m,a=new r(t,"bezier",0,0,h.pt,2),a.data=h,a.plugin=l,a.setRatio=n,0===g.autoRotate&&(g.autoRotate=!0),!g.autoRotate||g.autoRotate instanceof Array||(u=!0===g.autoRotate?0:Number(g.autoRotate),g.autoRotate=null!=h.end.left?[["left","top","rotation",u,!1]]:null!=h.end.x&&[["x","y","rotation",u,!1]]),g.autoRotate&&(s._transform||s._enableTransforms(!1),h.autoRotate=s._target._gsTransform,h.proxy.rotation=h.autoRotate.rotation||0,s._overwriteProps.push("rotation")),l._onInitTween(h.proxy,g,s._tween),a}})}},m._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)(e=t[i[n]])&&"function"==typeof e&&(this._mod[i[n]]=e)},m._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,n,r,o,s=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},a=_gsScope._gsDefine.globals,l={},u=s.prototype=new t("css");u.constructor=s,s.version="1.20.0",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,u="px",s.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,h,f,d,p,m,g,v,_=/(?:\-|\.|\b)(\d|\.|e\-)+/g,y=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,x=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,w=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,S=/opacity:([^;]*)/i,k=/alpha\(opacity *=.+?\)/i,C=/^(rgb|hsl)/,E=/([A-Z])/g,P=/-([a-z])/gi,A=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,O=function(t,e){return e.toUpperCase()},D=/(?:Left|Right|Width)/i,M=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,L=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,N=/,(?=[^\)]*(?:\(|$))/gi,R=/[\s,\(]/i,z=Math.PI/180,j=180/Math.PI,F={},I={style:{}},H=_gsScope.document||{createElement:function(){return I}},q=function(t,e){return H.createElementNS?H.createElementNS(e||"http://www.w3.org/1999/xhtml",t):H.createElement(t)},B=q("div"),W=q("img"),X=s._internals={_specialProps:l},Y=(_gsScope.navigator||{}).userAgent||"",U=function(){var t=Y.indexOf("Android"),e=q("a");return f=-1!==Y.indexOf("Safari")&&-1===Y.indexOf("Chrome")&&(-1===t||parseFloat(Y.substr(t+8,2))>3),p=f&&parseFloat(Y.substr(Y.indexOf("Version/")+8,2))<6,d=-1!==Y.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(Y)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(Y))&&(m=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),$=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},V=function(t){_gsScope.console&&console.log(t)},Z="",G="",Q=function(t,e){var i,n,r=(e=e||B).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(G=3===n?"ms":i[n],Z="-"+G.toLowerCase()+"-",G+t):null},K=H.defaultView?H.defaultView.getComputedStyle:function(){},J=s.getStyle=function(t,e,i,n,r){var o;return U||"opacity"!==e?(!n&&t.style[e]?o=t.style[e]:(i=i||K(t))?o=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(E,"-$1").toLowerCase()):t.currentStyle&&(o=t.currentStyle[e]),null==r||o&&"none"!==o&&"auto"!==o&&"auto auto"!==o?o:r):$(t)},tt=X.convertToPixels=function(t,i,n,r,o){if("px"===r||!r&&"lineHeight"!==i)return n;if("auto"===r||!n)return 0;var a,l,u,c=D.test(i),h=t,f=B.style,d=n<0,p=1===n;if(d&&(n=-n),p&&(n*=100),"lineHeight"!==i||r)if("%"===r&&-1!==i.indexOf("border"))a=n/100*(c?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&h.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[c?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(h=t.parentNode||H.body,-1!==J(h,"display").indexOf("flex")&&(f.position="absolute"),l=h._gsCache,u=e.ticker.frame,l&&c&&l.time===u)return l.width*n/100;f[c?"width":"height"]=n+r}h.appendChild(B),a=parseFloat(B[c?"offsetWidth":"offsetHeight"]),h.removeChild(B),c&&"%"===r&&!1!==s.cacheWidths&&((l=h._gsCache=h._gsCache||{}).time=u,l.width=a/n*100),0!==a||o||(a=tt(t,i,n,r,!0))}else l=K(t).lineHeight,t.style.lineHeight=n,a=parseFloat(K(t).lineHeight),t.style.lineHeight=l;return p&&(a/=100),d?-a:a},et=X.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(w,""))||0)},it=function(t,e){var i,n,r,o={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)-1!==(r=e[i]).indexOf("-transform")&&At!==r||(o[r.replace(P,O)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Pt!==i||(o[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===o[i]&&(o[i.replace(P,O)]=e[i]);return U||(o.opacity=$(t)),n=Wt(t,e,!1),o.rotation=n.rotation,o.skewX=n.skewX,o.scaleX=n.scaleX,o.scaleY=n.scaleY,o.x=n.x,o.y=n.y,Dt&&(o.z=n.z,o.rotationX=n.rotationX,o.rotationY=n.rotationY,o.scaleZ=n.scaleZ),o.filters&&delete o.filters,o},nt=function(t,e,i,n,r){var o,s,a,l={},u=t.style;for(s in i)"cssText"!==s&&"length"!==s&&isNaN(s)&&(e[s]!==(o=i[s])||r&&r[s])&&-1===s.indexOf("Origin")&&("number"!=typeof o&&"string"!=typeof o||(l[s]="auto"!==o||"left"!==s&&"top"!==s?""!==o&&"auto"!==o&&"none"!==o||"string"!=typeof e[s]||""===e[s].replace(b,"")?o:0:et(t,s),void 0!==u[s]&&(a=new _t(u,s,u[s],a))));if(n)for(s in n)"className"!==s&&(l[s]=n[s]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},ot=["marginLeft","marginRight","marginTop","marginBottom"],st=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getCTM&&Ht(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],o=r.length;for(i=i||K(t,null);--o>-1;)n-=parseFloat(J(t,"padding"+r[o],i,!0))||0,n-=parseFloat(J(t,"border"+r[o]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],o=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==o?o="center"===r?"50%":"0":"center"===o&&(o="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+o+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==o.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===o.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(o.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,g)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){return"function"==typeof t&&(t=t(v,g)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ct=function(t,e,i,n){var r,o,s,a,l;return"function"==typeof t&&(t=t(v,g)),null==t?a=e:"number"==typeof t?a=t:(r=360,o=t.split("_"),s=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(o[0].substr(2)):parseFloat(o[0]))*(-1===t.indexOf("rad")?1:j)-(l?0:e),o.length&&(n&&(n[i]=e+s),-1!==t.indexOf("short")&&(s%=r)!==s%(r/2)&&(s=s<0?s+r:s-r),-1!==t.indexOf("_cw")&&s<0?s=(s+9999999999*r)%r-(s/r|0)*r:-1!==t.indexOf("ccw")&&s>0&&(s=(s-9999999999*r)%r-(s/r|0)*r)),a=e+s),a<1e-6&&a>-1e-6&&(a=0),a},ht={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return 255*(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},dt=s.parseColor=function(t,e){var i,n,r,o,s,a,l,u,c,h,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ht[t])i=ht[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(n=t.charAt(1))+n+(r=t.charAt(2))+r+(o=t.charAt(3))+o),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(_),e){if(-1!==t.indexOf("="))return t.match(y)}else s=Number(i[0])%360/360,a=Number(i[1])/100,n=2*(l=Number(i[2])/100)-(r=l<=.5?l*(a+1):l+a-l*a),i.length>3&&(i[3]=Number(t[3])),i[0]=ft(s+1/3,n,r),i[1]=ft(s,n,r),i[2]=ft(s-1/3,n,r);else i=t.match(_)||ht.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ht.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,o=i[2]/255,l=((u=Math.max(n,r,o))+(c=Math.min(n,r,o)))/2,u===c?s=a=0:(h=u-c,a=l>.5?h/(2-u-c):h/(u+c),s=u===n?(r-o)/h+(r<o?6:0):u===r?(o-n)/h+2:(n-r)/h+4,s*=60),i[0]=s+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},pt=function(t,e){var i,n,r,o=t.match(mt)||[],s=0,a="";if(!o.length)return t;for(i=0;i<o.length;i++)n=o[i],s+=(r=t.substr(s,t.indexOf(n,s)-s)).length+n.length,3===(n=dt(n,e)).length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(s)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ht)mt+="|"+u+"\\b";mt=new RegExp(mt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];mt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=pt(t[0],e),t[1]=pt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=s.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,o=e?(t.match(mt)||[""])[0]:"",s=t.split(o).join("").match(x)||[],a=t.substr(0,t.indexOf(s[0])),l=")"===t.charAt(t.length-1)?")":"",u=-1!==t.indexOf(" ")?" ":",",c=s.length,h=c>0?s[0].replace(_,""):"";return c?r=e?function(t){var e,f,d,p;if("number"==typeof t)t+=h;else if(n&&N.test(t)){for(p=t.replace(N,"|").split("|"),d=0;d<p.length;d++)p[d]=r(p[d]);return p.join(",")}if(e=(t.match(mt)||[o])[0],f=t.split(e).join("").match(x)||[],d=f.length,c>d--)for(;++d<c;)f[d]=i?f[(d-1)/2|0]:s[d];return a+f.join(u)+u+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,o,f;if("number"==typeof t)t+=h;else if(n&&N.test(t)){for(o=t.replace(N,"|").split("|"),f=0;f<o.length;f++)o[f]=r(o[f]);return o.join(",")}if(e=t.match(x)||[],f=e.length,c>f--)for(;++f<c;)e[f]=i?e[(f-1)/2|0]:s[f];return a+e.join(u)+l}:function(t){return t}},vt=function(t){return t=t.split(","),function(e,i,n,r,o,s,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,o,s)}},_t=(X._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,o,s=this.data,a=s.proxy,l=s.firstMPT;l;)e=a[l.v],l.r?e=Math.round(e):e<1e-6&&e>-1e-6&&(e=0),l.t[l.p]=e,l=l._next;if(s.autoRotate&&(s.autoRotate.rotation=s.mod?s.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=s.firstMPT,o=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[o]=r}}else i[o]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(X._parseToProxy=function(t,e,i,n,r,o){var s,a,l,u,c,h=n,f={},d={},p=i._transform,m=F;for(i._transform=null,F=e,n=c=i.parse(t,e,n,r),F=m,o&&(i._transform=p,h&&(h._prev=null,h._prev&&(h._prev._next=null)));n&&n!==h;){if(n.type<=1&&(a=n.p,d[a]=n.s+n.c,f[a]=n.s,o||(u=new _t(n,"s",a,u,n.r),n.c=0),1===n.type))for(s=n.l;--s>0;)l="xn"+s,d[a=n.p+"_"+l]=n.data[l],f[a]=n[l],o||(u=new _t(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:f,end:d,firstMPT:u,pt:c}},X.CSSPropTween=function(t,e,n,r,s,a,l,u,c,h,f){this.t=t,this.p=e,this.s=n,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=u,this.type=a||0,c&&(this.pr=c,i=!0),this.b=void 0===h?n:h,this.e=void 0===f?n+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,o){var s=new yt(t,e,i,n-i,r,-1,o);return s.b=i,s.e=s.xs0=n,s},bt=s.parseComplex=function(t,e,i,n,r,o,a,l,u,h){i=i||o||"","function"==typeof n&&(n=n(v,g)),a=new yt(t,e,0,0,a,h?2:1,null,!1,l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],s.colorStringFilter(n),i=n[0],n=n[1]);var f,d,p,m,x,b,w,T,S,k,C,E,P,A=i.split(", ").join(",").split(" "),O=n.split(", ").join(",").split(" "),D=A.length,M=!1!==c;for(-1===n.indexOf(",")&&-1===i.indexOf(",")||(A=A.join(" ").replace(N,", ").split(" "),O=O.join(" ").replace(N,", ").split(" "),D=A.length),D!==O.length&&(D=(A=(o||"").split(" ")).length),a.plugin=u,a.setRatio=h,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],x=O[f],(T=parseFloat(m))||0===T)a.appendXtra("",T,lt(x,T),x.replace(y,""),M&&-1!==x.indexOf("px"),!0);else if(r&&mt.test(m))E=")"+((E=x.indexOf(")")+1)?x.substr(E):""),P=-1!==x.indexOf("hsl")&&U,k=x,m=dt(m,P),x=dt(x,P),(S=m.length+x.length>6)&&!U&&0===x[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(O[f]).join("transparent")):(U||(S=!1),P?a.appendXtra(k.substr(0,k.indexOf("hsl"))+(S?"hsla(":"hsl("),m[0],lt(x[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(x[1],m[1]),"%,",!1).appendXtra("",m[2],lt(x[2],m[2]),S?"%,":"%"+E,!1):a.appendXtra(k.substr(0,k.indexOf("rgb"))+(S?"rgba(":"rgb("),m[0],x[0]-m[0],",",!0,!0).appendXtra("",m[1],x[1]-m[1],",",!0).appendXtra("",m[2],x[2]-m[2],S?",":E,!0),S&&(m=m.length<4?1:m[3],a.appendXtra("",m,(x.length<4?1:x[3])-m,E,!1))),mt.lastIndex=0;else if(b=m.match(_)){if(!(w=x.match(y))||w.length!==b.length)return a;for(p=0,d=0;d<b.length;d++)C=b[d],k=m.indexOf(C,p),a.appendXtra(m.substr(p,k-p),Number(C),lt(w[d],C),"",M&&"px"===m.substr(k+C.length,2),0===d),p=k+C.length;a["xs"+a.l]+=m.substr(p)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+x:x;if(-1!==n.indexOf("=")&&a.data){for(E=a.xs0+a.data.s,f=1;f<a.l;f++)E+=a["xs"+f]+a.data["xn"+f];a.e=E+a["xs"+f]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},wt=9;for((u=yt.prototype).l=u.pr=0;--wt>0;)u["xn"+wt]=0,u["xs"+wt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,o){var s=this,a=s.l;return s["xs"+a]+=o&&(a||s["xs"+a])?" "+t:t||"",i||0===a||s.plugin?(s.l++,s.type=s.setRatio?2:1,s["xs"+s.l]=n||"",a>0?(s.data["xn"+a]=e+i,s.rxp["xn"+a]=r,s["xn"+a]=e,s.plugin||(s.xfirst=new yt(s,"xn"+a,e,i,s.xfirst||s,0,s.n,r,s.pr),s.xfirst.xs0=0),s):(s.data={s:e+i},s.rxp={},s.s=e,s.c=i,s.r=r,s)):(s["xs"+a]+=e+(n||""),s)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,l[t]=l[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},St=X._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<r.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,new Tt(r[n],e)},kt=X._registerPluginProp=function(t){if(!l[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";St(t,{parser:function(t,i,n,r,o,s,u){var c=a.com.greensock.plugins[e];return c?(c._cssRegister(),l[n].parse(t,i,n,r,o,s,u)):(V("Error: "+e+" js file not loaded."),o)}})}};(u=Tt.prototype).parseComplex=function(t,e,i,n,r,o){var s,a,l,u,c,h,f=this.keyword;if(this.multi&&(N.test(i)||N.test(e)?(a=e.replace(N,"|").split("|"),l=i.replace(N,"|").split("|")):f&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,s=0;s<u;s++)e=a[s]=a[s]||this.dflt,i=l[s]=l[s]||this.dflt,f&&(c=e.indexOf(f))!==(h=i.indexOf(f))&&(-1===h?a[s]=a[s].split(f).join(""):-1===c&&(a[s]+=" "+f));e=a.join(", "),i=l.join(", ")}return bt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,o)},u.parse=function(t,e,i,n,o,s,a){return this.parseComplex(t.style,this.format(J(t,this.p,r,!1,this.dflt)),this.format(e),o,s)},s.registerSpecialProp=function(t,e,i){St(t,{parser:function(t,n,r,o,s,a,l){var u=new yt(t,r,0,0,s,2,r,!1,i);return u.plugin=a,u.setRatio=e(t,n,o._tween,r),u},priority:i})},s.useSVGTransformAttr=!0;var Ct,Et="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Pt=Q("transform"),At=Z+"transform",Ot=Q("transformOrigin"),Dt=null!==Q("perspective"),Mt=X.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(!1===s.defaultForce3D||!Dt)&&(s.defaultForce3D||"auto")},Lt=_gsScope.SVGElement,Nt=function(t,e,i){var n,r=H.createElementNS("http://www.w3.org/2000/svg",t),o=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(o,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Rt=H.documentElement||{},zt=function(){var t,e,i,n=m||/Android/i.test(Y)&&!_gsScope.chrome;return H.createElementNS&&!n&&(t=Nt("svg",Rt),i=(e=Nt("rect",t,{width:100,height:50,x:100})).getBoundingClientRect().width,e.style[Ot]="50% 50%",e.style[Pt]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Rt.removeChild(t)),n}(),jt=function(t,e,i,n,r,o){var a,l,u,c,h,f,d,p,m,g,v,_,y,x,b=t._gsTransform,w=Bt(t,!0);b&&(y=b.xOrigin,x=b.yOrigin),(!n||(a=n.split(" ")).length<2)&&(0===(d=t.getBBox()).x&&0===d.y&&d.width+d.height===0&&(d={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=at(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*d.width:parseFloat(e[0]))+d.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*d.height:parseFloat(e[1]))+d.y]),i.xOrigin=c=parseFloat(a[0]),i.yOrigin=h=parseFloat(a[1]),n&&w!==qt&&(f=w[0],d=w[1],p=w[2],m=w[3],g=w[4],v=w[5],(_=f*m-d*p)&&(l=c*(m/_)+h*(-p/_)+(p*v-m*g)/_,u=c*(-d/_)+h*(f/_)-(f*v-d*g)/_,c=i.xOrigin=a[0]=l,h=i.yOrigin=a[1]=u)),b&&(o&&(i.xOffset=b.xOffset,i.yOffset=b.yOffset,b=i),r||!1!==r&&!1!==s.defaultSmoothOrigin?(l=c-y,u=h-x,b.xOffset+=l*w[0]+u*w[2]-l,b.yOffset+=l*w[1]+u*w[3]-u):b.xOffset=b.yOffset=0),o||t.setAttribute("data-svg-origin",a.join(" "))},Ft=function(t){var e,i=q("svg",this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,r=this.nextSibling,o=this.style.cssText;if(Rt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Ft}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?n.insertBefore(this,r):n.appendChild(this),Rt.removeChild(i),this.style.cssText=o,e},It=function(t){try{return t.getBBox()}catch(e){return Ft.call(t,!0)}},Ht=function(t){return!(!(Lt&&t.getCTM&&It(t))||t.parentNode&&!t.ownerSVGElement)},qt=[1,0,0,1,0,0],Bt=function(t,e){var i,n,r,o,s,a,l=t._gsTransform||new Mt,u=t.style;if(Pt?n=J(t,At,null,!0):t.currentStyle&&(n=(n=t.currentStyle.filter.match(M))&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,!Pt||!(a="none"===K(t).display)&&t.parentNode||(a&&(o=u.display,u.display="block"),t.parentNode||(s=1,Rt.appendChild(t)),i=!(n=J(t,At,null,!0))||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,o?u.display=o:a&&$t(u,"display"),s&&Rt.removeChild(t)),(l.svg||t.getCTM&&Ht(t))&&(i&&-1!==(u[Pt]+"").indexOf("matrix")&&(n=u[Pt],i=0),r=t.getAttribute("transform"),i&&r&&(-1!==r.indexOf("matrix")?(n=r,i=0):-1!==r.indexOf("translate")&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return qt;for(r=(n||"").match(_)||[],wt=r.length;--wt>-1;)o=Number(r[wt]),r[wt]=(s=o-(o|=0))?(1e5*s+(s<0?-.5:.5)|0)/1e5+o:o;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Wt=X.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var o,a,l,u,c,h,f=n?t._gsTransform||new Mt:new Mt,d=f.scaleX<0,p=Dt?parseFloat(J(t,Ot,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,m=parseFloat(s.defaultTransformPerspective)||0;if(f.svg=!(!t.getCTM||!Ht(t)),f.svg&&(jt(t,J(t,Ot,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),Ct=s.useSVGTransformAttr||zt),(o=Bt(t))!==qt){if(16===o.length){var g,v,_,y,x,b=o[0],w=o[1],T=o[2],S=o[3],k=o[4],C=o[5],E=o[6],P=o[7],A=o[8],O=o[9],D=o[10],M=o[12],L=o[13],N=o[14],R=o[11],z=Math.atan2(E,D);f.zOrigin&&(M=A*(N=-f.zOrigin)-o[12],L=O*N-o[13],N=D*N+f.zOrigin-o[14]),f.rotationX=z*j,z&&(g=k*(y=Math.cos(-z))+A*(x=Math.sin(-z)),v=C*y+O*x,_=E*y+D*x,A=k*-x+A*y,O=C*-x+O*y,D=E*-x+D*y,R=P*-x+R*y,k=g,C=v,E=_),z=Math.atan2(-T,D),f.rotationY=z*j,z&&(v=w*(y=Math.cos(-z))-O*(x=Math.sin(-z)),_=T*y-D*x,O=w*x+O*y,D=T*x+D*y,R=S*x+R*y,b=g=b*y-A*x,w=v,T=_),z=Math.atan2(w,b),f.rotation=z*j,z&&(g=b*(y=Math.cos(z))+w*(x=Math.sin(z)),v=k*y+C*x,_=A*y+O*x,w=w*y-b*x,C=C*y-k*x,O=O*y-A*x,b=g,k=v,A=_),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),z=Math.atan2(k,C),f.scaleX=(1e5*Math.sqrt(b*b+w*w+T*T)+.5|0)/1e5,f.scaleY=(1e5*Math.sqrt(C*C+E*E)+.5|0)/1e5,f.scaleZ=(1e5*Math.sqrt(A*A+O*O+D*D)+.5|0)/1e5,b/=f.scaleX,k/=f.scaleY,w/=f.scaleX,C/=f.scaleY,Math.abs(z)>2e-5?(f.skewX=z*j,k=0,"simple"!==f.skewType&&(f.scaleY*=1/Math.cos(z))):f.skewX=0,f.perspective=R?1/(R<0?-R:R):0,f.x=M,f.y=L,f.z=N,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*b-f.yOrigin*k),f.y-=f.yOrigin-(f.yOrigin*w-f.xOrigin*C))}else if(!Dt||r||!o.length||f.x!==o[4]||f.y!==o[5]||!f.rotationX&&!f.rotationY){var F=o.length>=6,I=F?o[0]:1,H=o[1]||0,q=o[2]||0,B=F?o[3]:1;f.x=o[4]||0,f.y=o[5]||0,l=Math.sqrt(I*I+H*H),u=Math.sqrt(B*B+q*q),c=I||H?Math.atan2(H,I)*j:f.rotation||0,h=q||B?Math.atan2(q,B)*j+c:f.skewX||0,f.scaleX=l,f.scaleY=u,f.rotation=c,f.skewX=h,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=m,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*I+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*H+f.yOrigin*B))}Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(d?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180)),f.zOrigin=p;for(a in f)f[a]<2e-5&&f[a]>-2e-5&&(f[a]=0)}return n&&(t._gsTransform=f,f.svg&&(Ct&&t.style[Pt]?e.delayedCall(.001,function(){$t(t.style,Pt)}):!Ct&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},Xt=function(t){var e,i,n=this.data,r=-n.rotation*z,o=r+n.skewX*z,s=(Math.cos(r)*n.scaleX*1e5|0)/1e5,a=(Math.sin(r)*n.scaleX*1e5|0)/1e5,l=(Math.sin(o)*-n.scaleY*1e5|0)/1e5,u=(Math.cos(o)*n.scaleY*1e5|0)/1e5,c=this.t.style,h=this.t.currentStyle;if(h){i=a,a=-l,l=-i,e=h.filter,c.filter="";var f,d,p=this.t.offsetWidth,g=this.t.offsetHeight,v="absolute"!==h.position,_="progid:DXImageTransform.Microsoft.Matrix(M11="+s+", M12="+a+", M21="+l+", M22="+u,y=n.x+p*n.xPercent/100,x=n.y+g*n.yPercent/100;if(null!=n.ox&&(y+=(f=(n.oxp?p*n.ox*.01:n.ox)-p/2)-(f*s+(d=(n.oyp?g*n.oy*.01:n.oy)-g/2)*a),x+=d-(f*l+d*u)),_+=v?", Dx="+((f=p/2)-(f*s+(d=g/2)*a)+y)+", Dy="+(d-(f*l+d*u)+x)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?c.filter=e.replace(L,_):c.filter=_+" "+e,0!==t&&1!==t||1===s&&0===a&&0===l&&1===u&&(v&&-1===_.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&c.removeAttribute("filter")),!v){var b,S,k,C=m<8?1:-1;for(f=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((p-((s<0?-s:s)*p+(a<0?-a:a)*g))/2+y),n.ieOffsetY=Math.round((g-((u<0?-u:u)*g+(l<0?-l:l)*p))/2+x),wt=0;wt<4;wt++)k=(i=-1!==(b=h[S=ot[wt]]).indexOf("px")?parseFloat(b):tt(this.t,S,parseFloat(b),b.replace(w,""))||0)!==n[S]?wt<2?-n.ieOffsetX:-n.ieOffsetY:wt<2?f-n.ieOffsetX:d-n.ieOffsetY,c[S]=(n[S]=Math.round(i-k*(0===wt||2===wt?1:C)))+"px"}}},Yt=X.set3DTransformRatio=X.setTransformRatio=function(t){var e,i,n,r,o,s,a,l,u,c,h,f,p,m,g,v,_,y,x,b,w,T=this.data,S=this.t.style,k=T.rotation,C=T.rotationX,E=T.rotationY,P=T.scaleX,A=T.scaleY,O=T.scaleZ,D=T.x,M=T.y,L=T.z,N=T.svg,R=T.perspective,j=T.force3D,F=T.skewY,I=T.skewX;if(F&&(I+=F,k+=F),!((1!==t&&0!==t||"auto"!==j||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&j||L||R||E||C||1!==O)||Ct&&N||!Dt)k||I||N?(k*=z,b=I*z,w=1e5,i=Math.cos(k)*P,o=Math.sin(k)*P,n=Math.sin(k-b)*-A,s=Math.cos(k-b)*A,b&&"simple"===T.skewType&&(e=Math.tan(b-F*z),n*=e=Math.sqrt(1+e*e),s*=e,F&&(e=Math.tan(F*z),i*=e=Math.sqrt(1+e*e),o*=e)),N&&(D+=T.xOrigin-(T.xOrigin*i+T.yOrigin*n)+T.xOffset,M+=T.yOrigin-(T.xOrigin*o+T.yOrigin*s)+T.yOffset,Ct&&(T.xPercent||T.yPercent)&&(g=this.t.getBBox(),D+=.01*T.xPercent*g.width,M+=.01*T.yPercent*g.height),D<(g=1e-6)&&D>-g&&(D=0),M<g&&M>-g&&(M=0)),x=(i*w|0)/w+","+(o*w|0)/w+","+(n*w|0)/w+","+(s*w|0)/w+","+D+","+M+")",N&&Ct?this.t.setAttribute("transform","matrix("+x):S[Pt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+x):S[Pt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+P+",0,0,"+A+","+D+","+M+")";else{if(d&&(P<(g=1e-4)&&P>-g&&(P=O=2e-5),A<g&&A>-g&&(A=O=2e-5),!R||T.z||T.rotationX||T.rotationY||(R=0)),k||I)k*=z,v=i=Math.cos(k),_=o=Math.sin(k),I&&(k-=I*z,v=Math.cos(k),_=Math.sin(k),"simple"===T.skewType&&(e=Math.tan((I-F)*z),v*=e=Math.sqrt(1+e*e),_*=e,T.skewY&&(e=Math.tan(F*z),i*=e=Math.sqrt(1+e*e),o*=e))),n=-_,s=v;else{if(!(E||C||1!==O||R||N))return void(S[Pt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+M+"px,"+L+"px)"+(1!==P||1!==A?" scale("+P+","+A+")":""));i=s=1,n=o=0}c=1,r=a=l=u=h=f=0,p=R?-1/R:0,m=T.zOrigin,g=1e-6,",","0",(k=E*z)&&(v=Math.cos(k),l=-(_=Math.sin(k)),h=p*-_,r=i*_,a=o*_,c=v,p*=v,i*=v,o*=v),(k=C*z)&&(e=n*(v=Math.cos(k))+r*(_=Math.sin(k)),y=s*v+a*_,u=c*_,f=p*_,r=n*-_+r*v,a=s*-_+a*v,c*=v,p*=v,n=e,s=y),1!==O&&(r*=O,a*=O,c*=O,p*=O),1!==A&&(n*=A,s*=A,u*=A,f*=A),1!==P&&(i*=P,o*=P,l*=P,h*=P),(m||N)&&(m&&(D+=r*-m,M+=a*-m,L+=c*-m+m),N&&(D+=T.xOrigin-(T.xOrigin*i+T.yOrigin*n)+T.xOffset,M+=T.yOrigin-(T.xOrigin*o+T.yOrigin*s)+T.yOffset),D<g&&D>-g&&(D="0"),M<g&&M>-g&&(M="0"),L<g&&L>-g&&(L=0)),x=T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix3d(":"matrix3d(",x+=(i<g&&i>-g?"0":i)+","+(o<g&&o>-g?"0":o)+","+(l<g&&l>-g?"0":l),x+=","+(h<g&&h>-g?"0":h)+","+(n<g&&n>-g?"0":n)+","+(s<g&&s>-g?"0":s),C||E||1!==O?(x+=","+(u<g&&u>-g?"0":u)+","+(f<g&&f>-g?"0":f)+","+(r<g&&r>-g?"0":r),x+=","+(a<g&&a>-g?"0":a)+","+(c<g&&c>-g?"0":c)+","+(p<g&&p>-g?"0":p)+","):x+=",0,0,0,0,1,0,",x+=D+","+M+","+L+","+(R?1+-L/R:1)+")",S[Pt]=x}};(u=Mt.prototype).x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,St("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,o,a,l){if(n._lastParsedTransform===l)return o;n._lastParsedTransform=l;var u,c=l.scale&&"function"==typeof l.scale?l.scale:0;"function"==typeof l[i]&&(u=l[i],l[i]=e),c&&(l.scale=c(v,t));var h,f,d,p,m,_,y,x,b,w=t._gsTransform,T=t.style,S=Et.length,k=l,C={},E=Wt(t,r,!0,k.parseTransform),P=k.transform&&("function"==typeof k.transform?k.transform(v,g):k.transform);if(E.skewType=k.skewType||E.skewType||s.defaultSkewType,n._transform=E,P&&"string"==typeof P&&Pt)(f=B.style)[Pt]=P,f.display="block",f.position="absolute",H.body.appendChild(B),h=Wt(B,null,!1),"simple"===E.skewType&&(h.scaleY*=Math.cos(h.skewX*z)),E.svg&&(_=E.xOrigin,y=E.yOrigin,h.x-=E.xOffset,h.y-=E.yOffset,(k.transformOrigin||k.svgOrigin)&&(P={},jt(t,at(k.transformOrigin),P,k.svgOrigin,k.smoothOrigin,!0),_=P.xOrigin,y=P.yOrigin,h.x-=P.xOffset-E.xOffset,h.y-=P.yOffset-E.yOffset),(_||y)&&(x=Bt(B,!0),h.x-=_-(_*x[0]+y*x[2]),h.y-=y-(_*x[1]+y*x[3]))),H.body.removeChild(B),h.perspective||(h.perspective=E.perspective),null!=k.xPercent&&(h.xPercent=ut(k.xPercent,E.xPercent)),null!=k.yPercent&&(h.yPercent=ut(k.yPercent,E.yPercent));else if("object"==typeof k){if(h={scaleX:ut(null!=k.scaleX?k.scaleX:k.scale,E.scaleX),scaleY:ut(null!=k.scaleY?k.scaleY:k.scale,E.scaleY),scaleZ:ut(k.scaleZ,E.scaleZ),x:ut(k.x,E.x),y:ut(k.y,E.y),z:ut(k.z,E.z),xPercent:ut(k.xPercent,E.xPercent),yPercent:ut(k.yPercent,E.yPercent),perspective:ut(k.transformPerspective,E.perspective)},null!=(m=k.directionalRotation))if("object"==typeof m)for(f in m)k[f]=m[f];else k.rotation=m;"string"==typeof k.x&&-1!==k.x.indexOf("%")&&(h.x=0,h.xPercent=ut(k.x,E.xPercent)),"string"==typeof k.y&&-1!==k.y.indexOf("%")&&(h.y=0,h.yPercent=ut(k.y,E.yPercent)),h.rotation=ct("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:E.rotation,E.rotation,"rotation",C),Dt&&(h.rotationX=ct("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":E.rotationX||0,E.rotationX,"rotationX",C),h.rotationY=ct("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":E.rotationY||0,E.rotationY,"rotationY",C)),h.skewX=ct(k.skewX,E.skewX),h.skewY=ct(k.skewY,E.skewY)}for(Dt&&null!=k.force3D&&(E.force3D=k.force3D,p=!0),(d=E.force3D||E.z||E.rotationX||E.rotationY||h.z||h.rotationX||h.rotationY||h.perspective)||null==k.scale||(h.scaleZ=1);--S>-1;)((P=h[b=Et[S]]-E[b])>1e-6||P<-1e-6||null!=k[b]||null!=F[b])&&(p=!0,o=new yt(E,b,E[b],P,o),b in C&&(o.e=C[b]),o.xs0=0,o.plugin=a,n._overwriteProps.push(o.n));return P=k.transformOrigin,E.svg&&(P||k.svgOrigin)&&(_=E.xOffset,y=E.yOffset,jt(t,at(P),h,k.svgOrigin,k.smoothOrigin),o=xt(E,"xOrigin",(w?E:h).xOrigin,h.xOrigin,o,"transformOrigin"),o=xt(E,"yOrigin",(w?E:h).yOrigin,h.yOrigin,o,"transformOrigin"),_===E.xOffset&&y===E.yOffset||(o=xt(E,"xOffset",w?_:E.xOffset,E.xOffset,o,"transformOrigin"),o=xt(E,"yOffset",w?y:E.yOffset,E.yOffset,o,"transformOrigin")),P="0px 0px"),(P||Dt&&d&&E.zOrigin)&&(Pt?(p=!0,b=Ot,P=(P||J(t,b,r,!1,"50% 50%"))+"",(o=new yt(T,b,0,0,o,-1,"transformOrigin")).b=T[b],o.plugin=a,Dt?(f=E.zOrigin,P=P.split(" "),E.zOrigin=(P.length>2&&(0===f||"0px"!==P[2])?parseFloat(P[2]):f)||0,o.xs0=o.e=P[0]+" "+(P[1]||"50%")+" 0px",(o=new yt(E,"zOrigin",0,0,o,-1,o.n)).b=f,o.xs0=o.e=E.zOrigin):o.xs0=o.e=P):at(P+"",E)),p&&(n._transformType=E.svg&&Ct||!d&&3!==this._transformType?2:3),u&&(l[i]=u),c&&(l.scale=c),o},prefix:!0}),St("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),St("borderRadius",{defaultValue:"0px",parser:function(t,e,i,o,s,a){e=this.format(e);var l,u,c,h,f,d,p,m,g,v,_,y,x,b,w,T,S=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),v=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<S.length;u++)this.p.indexOf("border")&&(S[u]=Q(S[u])),-1!==(f=h=J(t,S[u],r,!1,"0px")).indexOf(" ")&&(f=(h=f.split(" "))[0],h=h[1]),d=c=l[u],p=parseFloat(f),y=f.substr((p+"").length),(x="="===d.charAt(1))?(m=parseInt(d.charAt(0)+"1",10),d=d.substr(2),m*=parseFloat(d),_=d.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(d),_=d.substr((m+"").length)),""===_&&(_=n[i]||y),_!==y&&(b=tt(t,"borderLeft",p,y),w=tt(t,"borderTop",p,y),"%"===_?(f=b/g*100+"%",h=w/v*100+"%"):"em"===_?(f=b/(T=tt(t,"borderLeft",1,"em"))+"em",h=w/T+"em"):(f=b+"px",h=w+"px"),x&&(d=parseFloat(f)+m+_,c=parseFloat(h)+m+_)),s=bt(k,S[u],f+" "+h,d+" "+c,!1,"0px",s);return s},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),St("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,s){return bt(t.style,i,this.format(J(t,i,r,!1,"0px 0px")),this.format(e),!1,"0px",o)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),St("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,o,s){var a,l,u,c,h,f,d="background-position",p=r||K(t,null),g=this.format((p?m?p.getPropertyValue(d+"-x")+" "+p.getPropertyValue(d+"-y"):p.getPropertyValue(d):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),v=this.format(e);if(-1!==g.indexOf("%")!=(-1!==v.indexOf("%"))&&v.split(",").length<2&&(f=J(t,"backgroundImage").replace(A,""))&&"none"!==f){for(a=g.split(" "),l=v.split(" "),W.setAttribute("src",f),u=2;--u>-1;)(c=-1!==(g=a[u]).indexOf("%"))!==(-1!==l[u].indexOf("%"))&&(h=0===u?t.offsetWidth-W.width:t.offsetHeight-W.height,a[u]=c?parseFloat(g)/100*h+"px":parseFloat(g)/h*100+"%");g=a.join(" ")}return this.parseComplex(t.style,g,v,o,s)},formatter:at}),St("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(-1===t.indexOf(" ")?t+" "+t:t)}}),St("perspective",{defaultValue:"0px",prefix:!0}),St("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),St("transformStyle",{prefix:!0}),St("backfaceVisibility",{prefix:!0}),St("userSelect",{prefix:!0}),St("margin",{parser:vt("marginTop,marginRight,marginBottom,marginLeft")}),St("padding",{parser:vt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),St("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,o,s){var a,l,u;return m<9?(l=t.currentStyle,u=m<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,r,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,o,s)}}),St("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),St("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),St("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,o,s){var a=J(t,"borderTopWidth",r,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(w,"");return"px"!==u&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",r,!1,"solid")+" "+J(t,"borderTopColor",r,!1,"#000")),l.join(" "),o,s)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),St("borderWidth",{parser:vt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),St("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,o){var s=t.style,a="cssFloat"in s?"cssFloat":"styleFloat";return new yt(s,a,0,0,r,-1,i,!1,0,s[a],e)}});var Ut=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(k,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(T,"opacity="+r))};St("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,o,s){var a=parseFloat(J(t,"opacity",r,!1,"1")),l=t.style,u="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",r)&&0!==e&&(a=0),U?o=new yt(l,"opacity",a,e-a,o):((o=new yt(l,"opacity",100*a,100*(e-a),o)).xn1=u?1:0,l.zoom=1,o.type=2,o.b="alpha(opacity="+o.s+")",o.e="alpha(opacity="+(o.s+o.c)+")",o.data=t,o.plugin=s,o.setRatio=Ut),u&&((o=new yt(l,"visibility",0,0,o,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",n._overwriteProps.push(o.n),n._overwriteProps.push(i)),o}});var $t=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(E,"-$1").toLowerCase())):t.removeAttribute(e))},Vt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:$t(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};St("className",{parser:function(t,e,n,o,s,a,l){var u,c,h,f,d,p=t.getAttribute("class")||"",m=t.style.cssText;if(s=o._classNamePT=new yt(t,n,0,0,s,2),s.setRatio=Vt,s.pr=-11,i=!0,s.b=p,c=it(t,r),h=t._gsClassPT){for(f={},d=h.data;d;)f[d.p]=1,d=d._next;h.setRatio(1)}return t._gsClassPT=s,s.e="="!==e.charAt(1)?e:p.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",s.e),u=nt(t,c,it(t),l,f),t.setAttribute("class",p),s.data=u.firstMPT,t.style.cssText=m,s=s.xfirst=o.parse(t,u.difs,s,a)}});var Zt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,o,s=this.t.style,a=l.transform.parse;if("all"===this.e)s.cssText="",r=!0;else for(n=(e=this.e.split(" ").join("").split(",")).length;--n>-1;)i=e[n],l[i]&&(l[i].parse===a?r=!0:i="transformOrigin"===i?Ot:l[i].p),$t(s,i);r&&($t(s,Pt),(o=this.t._gsTransform)&&(o.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(St("clearProps",{parser:function(t,e,n,r,o){return o=new yt(t,n,0,0,o,2),o.setRatio=Zt,o.e=e,o.pr=-10,o.data=r._tween,i=!0,o}}),u="bezier,throwProps,physicsProps,physics2D".split(","),wt=u.length;wt--;)kt(u[wt]);(u=s.prototype)._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,a,u){if(!t.nodeType)return!1;this._target=g=t,this._tween=a,this._vars=e,v=u,c=e.autoRound,i=!1,n=e.suffixMap||s.suffixMap,r=K(t,""),o=this._overwriteProps;var d,m,_,y,x,b,w,T,k,C=t.style;if(h&&""===C.zIndex&&("auto"!==(d=J(t,"zIndex",r))&&""!==d||this._addLazySet(C,"zIndex",0)),"string"==typeof e&&(y=C.cssText,d=it(t,r),C.cssText=y+";"+e,d=nt(t,d,it(t)).difs,!U&&S.test(e)&&(d.opacity=parseFloat(RegExp.$1)),e=d,C.cssText=y),e.className?this._firstPT=m=l.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=m=this.parse(t,e,null),this._transformType){for(k=3===this._transformType,Pt?f&&(h=!0,""===C.zIndex&&("auto"!==(w=J(t,"zIndex",r))&&""!==w||this._addLazySet(C,"zIndex",0)),p&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(k?"visible":"hidden"))):C.zoom=1,_=m;_&&_._next;)_=_._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,_),T.setRatio=Pt?Yt:Xt,T.data=this._transform||Wt(t,r,!0),T.tween=a,T.pr=-1,o.pop()}if(i){for(;m;){for(b=m._next,_=y;_&&_.pr>m.pr;)_=_._next;(m._prev=_?_._prev:x)?m._prev._next=m:y=m,(m._next=_)?_._prev=m:x=m,m=b}this._firstPT=y}return!0},u.parse=function(t,e,i,o){var s,a,u,h,f,d,p,m,_,y,x=t.style;for(s in e){if("function"==typeof(d=e[s])&&(d=d(v,g)),a=l[s])i=a.parse(t,d,s,this,i,o,e);else{if("--"===s.substr(0,2)){this._tween._propLookup[s]=this._addTween.call(this._tween,t.style,"setProperty",K(t).getPropertyValue(s)+"",d+"",s,!1,s);continue}f=J(t,s,r)+"",_="string"==typeof d,"color"===s||"fill"===s||"stroke"===s||-1!==s.indexOf("Color")||_&&C.test(d)?(_||(d=((d=dt(d)).length>3?"rgba(":"rgb(")+d.join(",")+")"),i=bt(x,s,f,d,!0,"transparent",i,0,o)):_&&R.test(d)?i=bt(x,s,f,d,!0,null,i,0,o):(p=(u=parseFloat(f))||0===u?f.substr((u+"").length):"",""!==f&&"auto"!==f||("width"===s||"height"===s?(u=st(t,s,r),p="px"):"left"===s||"top"===s?(u=et(t,s,r),p="px"):(u="opacity"!==s?0:1,p="")),(y=_&&"="===d.charAt(1))?(h=parseInt(d.charAt(0)+"1",10),d=d.substr(2),h*=parseFloat(d),m=d.replace(w,"")):(h=parseFloat(d),m=_?d.replace(w,""):""),""===m&&(m=s in n?n[s]:p),d=h||0===h?(y?h+u:h)+m:e[s],p!==m&&(""===m&&"lineHeight"!==s||(h||0===h)&&u&&(u=tt(t,s,u,p),"%"===m?(u/=tt(t,s,100,"%")/100,!0!==e.strictUnits&&(f=u+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?u/=tt(t,s,1,m):"px"!==m&&(h=tt(t,s,h,m),m="px"),y&&(h||0===h)&&(d=h+u+m))),y&&(h+=u),!u&&0!==u||!h&&0!==h?void 0!==x[s]&&(d||d+""!="NaN"&&null!=d)?(i=new yt(x,s,h||u||0,0,i,-1,s,!1,0,f,d)).xs0="none"!==d||"display"!==s&&-1===s.indexOf("Style")?d:f:V("invalid "+s+" tween value: "+e[s]):(i=new yt(x,s,u,h-u,i,0,s,!1!==c&&("px"===m||"zIndex"===s),0,f,d)).xs0=m)}o&&i&&!i.plugin&&(i.plugin=o)}return i},u.setRatio=function(t){var e,i,n,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<1e-6&&e>-1e-6&&(e=0),r.type)if(1===r.type)if(2===(n=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||Wt(this._target,r,!0),this._transformType=this._transform.svg&&Ct||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},u._kill=function(e){var i,n,r,o=e;if(e.autoAlpha||e.alpha){o={};for(n in e)o[n]=e[n];o.opacity=1,o.autoAlpha&&(o.visibility=1)}for(e.className&&(i=this._classNamePT)&&((r=i.xfirst)&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,o)};var Qt=function(t,e,i){var n,r,o,s;if(t.slice)for(r=t.length;--r>-1;)Qt(t[r],e,i);else for(r=(n=t.childNodes).length;--r>-1;)s=(o=n[r]).type,o.style&&(e.push(it(o)),i&&i.push(o)),1!==s&&9!==s&&11!==s||!o.childNodes.length||Qt(o,e,i)};return s.cascadeTo=function(t,i,n){var r,o,s,a,l=e.to(t,i,n),u=[l],c=[],h=[],f=[],d=e._internals.reservedProps;for(t=l._targets||l.target,Qt(t,c,f),l.render(i,!0,!0),Qt(t,h),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if((o=nt(f[r],c[r],h[r])).firstMPT){o=o.difs;for(s in n)d[s]&&(o[s]=n[s]);a={};for(s in o)a[s]=c[r][s];u.push(e.fromTo(f[r],i,a,o))}return u},t.activate([s]),s},!0),function(){var t=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},e=_gsScope._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}).prototype;e._onInitAllProps=function(){for(var e,i,n,r=this._tween,o=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),s=o.length,a={},l=r._propLookup.roundProps;--s>-1;)a[o[s]]=Math.round;for(s=o.length;--s>-1;)for(e=o[s],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(a):i.n===e&&(2===i.f&&i.t?t(i.t._firstPT):(this._add(i.t,e,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[e]=l)),i=n;return!1},e._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,n){var r,o;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(o=e[r])&&(o=o(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",o+"",r,!1,r),this._overwriteProps.push(r);return!0}}),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,o,s,a,l,u,c=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(a=e[r])&&(a=a(n,t)),o=(u=(a+"").split("_"))[0],s=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(a=this.finals[r]="string"==typeof o&&"="===o.charAt(1)?s+parseInt(o.charAt(0)+"1",10)*Number(o.substr(2)):Number(o)||0)-s,u.length&&(-1!==(o=u.join("_")).indexOf("short")&&(l%=c)!==l%(c/2)&&(l=l<0?l+c:l-c),-1!==o.indexOf("_cw")&&l<0?l=(l+9999999999*c)%c-(l/c|0)*c:-1!==o.indexOf("ccw")&&l>0&&(l=(l-9999999999*c)%c-(l/c|0)*c)),(l>1e-6||l<-1e-6)&&(this._addTween(t,r,s,s+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,n,r=_gsScope.GreenSockGlobals||_gsScope,o=r.com.greensock,s=2*Math.PI,a=Math.PI/2,l=o._class,u=function(e,i){var n=l("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},h=function(t,e,i,n,r){var o=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(o,t),o},f=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=l("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},p=h("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),g=m.prototype=new t;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},e=l("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0),g=e.prototype=new t,g.constructor=e,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},g.config=e.config=function(t,i){return new e(t,i)},i=l("easing.RoughEase",function(e){for(var i,n,r,o,s,a,l=(e=e||{}).taper||"none",u=[],c=0,h=0|(e.points||20),d=h,p=!1!==e.randomize,m=!0===e.clamp,g=e.template instanceof t?e.template:null,v="number"==typeof e.strength?.4*e.strength:.4;--d>-1;)i=p?Math.random():1/h*d,n=g?g.getRatio(i):i,r="none"===l?v:"out"===l?(o=1-i)*o*v:"in"===l?i*i*v:i<.5?(o=2*i)*o*.5*v:(o=2*(1-i))*o*.5*v,p?n+=Math.random()*r-.5*r:d%2?n+=.5*r:n-=.5*r,m&&(n>1?n=1:n<0&&(n=0)),u[c++]={x:i,y:n};for(u.sort(function(t,e){return t.x-e.x}),a=new f(1,1,null),d=h;--d>-1;)s=u[d],a=new f(s.x,s.y,a);this._prev=new f(0,0,0!==a.t?a:a.next)},!0),g=i.prototype=new t,g.constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,h("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),h("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),n=function(e,i,n){var r=l("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/s*(Math.asin(1/this._p1)||0),this._p2=s/this._p2},!0),o=r.prototype=new t;return o.constructor=r,o.getRatio=i,o.config=function(t,e){return new r(t,e)},r},h("Elastic",n("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),n("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),n("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),h("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),h("Sine",u("SineOut",function(t){return Math.sin(t*a)}),u("SineIn",function(t){return 1-Math.cos(t*a)}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(r.SlowMo,"SlowMo","ease,"),c(i,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),p},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t,e){"use strict";var i={},n=t.document,r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var o,s,a,l,u,c=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},h=c("com.greensock"),f=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},p=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),m={},g=function(e,n,o,s){this.sc=m[e]?m[e].sc:[],m[e]=this,this.gsClass=null,this.func=o;var a=[];this.check=function(l){for(var u,h,f,d,p=n.length,v=p;--p>-1;)(u=m[n[p]]||new g(n[p],[])).gsClass?(a[p]=u.gsClass,v--):l&&u.sc.push(this);if(0===v&&o){if(h=("com.greensock."+e).split("."),f=h.pop(),d=c(h.join("."))[f]=this.gsClass=o.apply(o,a),s)if(r[f]=i[f]=d,"undefined"!=typeof module&&module.exports)if("TweenMax"===e){module.exports=i.TweenMax=d;for(p in i)d[p]=i[p]}else i.TweenMax&&(i.TweenMax[f]=d);else"function"==typeof define&&define.amd&&define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+e.split(".").pop(),[],function(){return d});for(p=0;p<this.sc.length;p++)this.sc[p].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new g(t,e,i,n)},_=h._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var y=[0,0,1,1],x=_("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?y.concat(e):y},!0),b=x.map={},w=x.register=function(t,e,i,n){for(var r,o,s,a,l=e.split(","),u=l.length,c=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(o=l[u],r=n?_("easing."+o,null,!0):h.easing[o]||{},s=c.length;--s>-1;)a=c[s],b[o+"."+a]=b[a+o]=r[a]=t.getRatio?t:t[a]||new t};for((a=x.prototype)._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=(o=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;--s>-1;)a=o[s]+",Power"+s,w(new x(null,null,1,s),a,"easeOut",!0),w(new x(null,null,2,s),a,"easeIn"+(0===s?",easeNone":"")),w(new x(null,null,3,s),a,"easeInOut");b.linear=h.easing.Linear.easeIn,b.swing=h.easing.Quad.easeInOut;var T=_("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(a=T.prototype).addEventListener=function(t,e,i,n,r){r=r||0;var o,s,a=this._listeners[t],c=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),s=a.length;--s>-1;)(o=a[s]).c===e&&o.s===i?a.splice(s,1):0===c&&o.pr<r&&(c=s+1);a.splice(c,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for((e=r.length)>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)(n=r[e])&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var S=t.requestAnimationFrame,k=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},E=C();for(s=(o=["ms","moz","webkit","o"]).length;--s>-1&&!S;)S=t[o[s]+"RequestAnimationFrame"],k=t[o[s]+"CancelAnimationFrame"]||t[o[s]+"CancelRequestAnimationFrame"];_("Ticker",function(t,e){var i,r,o,s,a,c=this,h=C(),f=!(!1===e||!S)&&"auto",p=500,m=33,g=function(t){var e,n,l=C()-E;l>p&&(h+=l-m),E+=l,c.time=(E-h)/1e3,e=c.time-a,(!i||e>0||!0===t)&&(c.frame++,a+=e+(e>=s?.004:s-e),n=!0),!0!==t&&(o=r(g)),n&&c.dispatchEvent("tick")};T.call(c),c.time=c.frame=0,c.tick=function(){g(!0)},c.lagSmoothing=function(t,e){p=t||1e10,m=Math.min(e,p,0)},c.sleep=function(){null!=o&&(f&&k?k(o):clearTimeout(o),r=d,o=null,c===l&&(u=!1))},c.wake=function(t){null!==o?c.sleep():t?h+=-E+(E=C()):c.frame>10&&(E=C()-p+5),r=0===i?d:f&&S?S:function(t){return setTimeout(t,1e3*(a-c.time)+1|0)},c===l&&(u=!0),g(2)},c.fps=function(t){if(!arguments.length)return i;s=1/((i=t)||60),a=this.time+s,c.wake()},c.useRAF=function(t){if(!arguments.length)return f;c.sleep(),f=t,c.fps(i)},c.fps(t),setTimeout(function(){"auto"===f&&c.frame<5&&"hidden"!==n.visibilityState&&c.useRAF(!1)},1500)}),(a=h.Ticker.prototype=new h.events.EventDispatcher).constructor=h.Ticker;var P=_("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,V){u||l.wake();var i=this.vars.useFrames?$:V;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=P.ticker=new h.Ticker,(a=P.prototype)._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var A=function(){u&&C()-E>2e3&&"hidden"!==n.visibilityState&&l.wake();var t=setTimeout(A,2e3);t.unref&&t.unref()};A(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(n?n.length:0){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=p(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(N.length&&G(),this.render(t,e,!1),N.length&&G())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||1e-10,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),i=(e=n.rawTime())-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var O=_("core.SimpleTimeline",function(t){P.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(a=O.prototype=new P).constructor=O,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,o;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(o=t._startTime;r&&r._startTime>o;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var D=_("TweenLite",function(e,i,n){if(P.call(this,i,n),this.render=D.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:D.selector(e)||e;var r,o,s,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?U[D.defaultOverwrite]:"number"==typeof l?l>>0:U[l],(a||e instanceof Array||e.push&&p(e))&&"number"!=typeof e[0])for(this._targets=s=f(e),this._propLookup=[],this._siblings=[],r=0;r<s.length;r++)(o=s[r])?"string"!=typeof o?o.length&&o!==t&&o[0]&&(o[0]===t||o[0].nodeType&&o[0].style&&!o.nodeType)?(s.splice(r--,1),this._targets=s=s.concat(f(o))):(this._siblings[r]=Q(o,this,!1),1===l&&this._siblings[r].length>1&&J(o,this,null,1,this._siblings[r])):"string"==typeof(o=s[r--]=D.selector(o))&&s.splice(r+1,1):s.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-1e-10,this.render(Math.min(0,-this._delay)))},!0),M=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},L=function(t,e){var i,n={};for(i in t)Y[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!B[i]||B[i]&&B[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};(a=D.prototype=new P).constructor=D,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,D.version="1.20.2",D.defaultEase=a._ease=new x(null,null,1,1),D.defaultOverwrite="auto",D.ticker=l,D.autoSleep=120,D.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},D.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(D.selector=i,i(e)):void 0===n?e:n.querySelectorAll?n.querySelectorAll(e):n.getElementById("#"===e.charAt(0)?e.substr(1):e)};var N=[],R={},z=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,j=/[\+-]=-?[\.\d]/,F=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<1e-6&&e>-1e-6&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},I=function(t,e,i,n){var r,o,s,a,l,u,c,h=[],f=0,d="",p=0;for(h.start=t,h.end=e,t=h[0]=t+"",e=h[1]=e+"",i&&(i(h),t=h[0],e=h[1]),h.length=0,r=t.match(z)||[],o=e.match(z)||[],n&&(n._next=null,n.blob=1,h._firstPT=h._applyPT=n),l=o.length,a=0;a<l;a++)c=o[a],d+=(u=e.substr(f,e.indexOf(c,f)-f))||!a?u:",",f+=u.length,p?p=(p+1)%5:"rgba("===u.substr(-5)&&(p=1),c===r[a]||r.length<=a?d+=c:(d&&(h.push(d),d=""),s=parseFloat(r[a]),h.push(s),h._firstPT={_next:h._firstPT,t:h,p:h.length-1,s:s,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-s)||0,f:0,m:p&&p<4?Math.round:0}),f+=c.length;return(d+=e.substr(f))&&h.push(d),h.setRatio=F,j.test(e)&&(h.end=0),h},H=function(t,e,i,n,r,o,s,a,l){"function"==typeof n&&(n=n(l||0,t));var u=typeof t[e],c="function"!==u?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),h="get"!==i?i:c?s?t[c](s):t[c]():t[e],f="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:h,f:"function"===u,pg:0,n:r||e,m:o?"function"==typeof o?o:Math.round:0,pr:0,c:f?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-h||0};if(("number"!=typeof h||"number"!=typeof n&&!f)&&(s||isNaN(h)||!f&&isNaN(n)||"boolean"==typeof h||"boolean"==typeof n?(d.fp=s,d={t:I(h,f?parseFloat(d.s)+d.c:n,a||D.defaultStringFilter,d),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(d.s=parseFloat(h),f||(d.c=parseFloat(n)-d.s||0))),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},q=D._internals={isArray:p,isSelector:M,lazyTweens:N,blobDif:I},B=D._plugins={},W=q.tweenLookup={},X=0,Y=q.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},$=P._rootFramesTimeline=new O,V=P._rootTimeline=new O,Z=30,G=q.lazyRender=function(){var t,e=N.length;for(R={};--e>-1;)(t=N[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);N.length=0};V._startTime=l.time,$._startTime=l.frame,V._active=$._active=!0,setTimeout(G,1),P._updateRoot=D.render=function(){var t,e,i;if(N.length&&G(),V.render((l.time-V._startTime)*V._timeScale,!1,!1),$.render((l.frame-$._startTime)*$._timeScale,!1,!1),N.length&&G(),l.frame>=Z){Z=l.frame+(parseInt(D.autoSleep,10)||120);for(i in W){for(t=(e=W[i].tweens).length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete W[i]}if((!(i=V._first)||i._paused)&&D.autoSleep&&!$._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",P._updateRoot);var Q=function(t,e,i){var n,r,o=t._gsTweenID;if(W[o||(t._gsTweenID=o="t"+X++)]||(W[o]={target:t,tweens:[]}),e&&(n=W[o].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return W[o].tweens},K=function(t,e,i,n){var r,o,s=t.vars.onOverwrite;return s&&(r=s(t,e,i,n)),(s=D.onOverwrite)&&(o=s(t,e,i,n)),!1!==r&&!1!==o},J=function(t,e,i,n,r){var o,s,a,l;if(1===n||n>=4){for(l=r.length,o=0;o<l;o++)if((a=r[o])!==e)a._gc||a._kill(null,t,e)&&(s=!0);else if(5===n)break;return s}var u,c=e._startTime+1e-10,h=[],f=0,d=0===e._duration;for(o=r.length;--o>-1;)(a=r[o])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||tt(e,0,d),0===tt(a,u,d)&&(h[f++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((d||!a._initted)&&c-a._startTime<=2e-10||(h[f++]=a)));for(o=f;--o>-1;)if(a=h[o],2===n&&a._kill(i,t,e)&&(s=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(s=!0)}return s},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,o=t._startTime;n._timeline;){if(o+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return(o/=r)>e?o-e:i&&o===e||!t._initted&&o-e<2e-10?1e-10:(o+=t.totalDuration()/t._timeScale/r)>e+1e-10?0:o-e-1e-10};a._init=function(){var t,e,i,n,r,o,s=this.vars,a=this._overwrittenProps,l=this._duration,u=!!s.immediateRender,c=s.ease;if(s.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in s.startAt)r[n]=s.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&!1!==s.lazy,r.startAt=r.delay=null,r.onUpdate=s.onUpdate,r.onUpdateScope=s.onUpdateScope||s.callbackScope||this,this._startAt=D.to(this.target,0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(s.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(u=!1),i={};for(n in s)Y[n]&&"autoCSS"!==n||(i[n]=s[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&!1!==s.lazy,i.immediateRender=u,this._startAt=D.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof x?c:"function"==typeof c?new x(c,s.easeParams):b[c]||D.defaultEase:D.defaultEase,s.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,s.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(o=this._targets.length,t=0;t<o;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&D._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),s.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=s.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,o){var s,a,l,u,c,h;if(null==e)return!1;R[e._gsTweenID]&&G(),this.vars.css||e.style&&e!==t&&e.nodeType&&B.css&&!1!==this.vars.autoCSS&&L(this.vars,e);for(s in this.vars)if(h=this.vars[s],Y[s])h&&(h instanceof Array||h.push&&p(h))&&-1!==h.join("").indexOf("{self}")&&(this.vars[s]=h=this._swapSelfInParams(h,this));else if(B[s]&&(u=new B[s])._onInitTween(e,this.vars[s],this,o)){for(this._firstPT=c={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:s,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),c._next&&(c._next._prev=c)}else i[s]=H.call(this,e,s,"get",h,s,0,null,this.vars.stringFilter,o);return r&&this._kill(r,e)?this._initProps(e,i,n,r,o):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,o)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(R[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,o,s,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7&&t>=0)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||1e-10===u&&"isPause"!==this.data)&&u!==t&&(i=!0,u>1e-10&&(r="onReverseComplete")),this._rawPrevTime=s=!e||t||u===t?t:1e-10);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(1e-10!==u||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=s=!e||t||u===t?t:1e-10)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var c=t/l,h=this._easeType,f=this._easePower;(1===h||3===h&&c>=.5)&&(c=1-c),3===h&&(c*=2),1===f?c*=c:2===f?c*=c*c:3===f?c*=c*c*c:4===f&&(c*=c*c*c*c),this.ratio=1===h?1-c:2===h?c:t/l<.5?c/2:1-c/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,N.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&1e-10===this._rawPrevTime&&1e-10!==s&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:D.selector(e)||e;var n,r,o,s,a,l,u,c,h,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((p(e)||M(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,c=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(D.onOverwrite||this.vars.onOverwrite)){for(o in u)a[o]&&(h||(h=[]),h.push(o));if((h||!t)&&!K(this,i,e,h))return!1}for(o in u)(s=a[o])&&(f&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(u)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[o]),c&&(r[o]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&D._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],P.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-1e-10,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return P.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&D._onPluginEvent(t?"_onEnable":"_onDisable",this)},D.to=function(t,e,i){return new D(t,e,i)},D.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new D(t,e,i)},D.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new D(t,e,n)},D.delayedCall=function(t,e,i,n,r){return new D(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},D.set=function(t,e){return new D(t,0,e)},D.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:D.selector(t)||t;var i,n,r,o;if((p(t)||M(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(D.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(o=n[i],r=i;--r>-1;)o===n[r]&&n.splice(i,1)}else if(t._gsTweenID)for(i=(n=Q(t).concat()).length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n||[]},D.killTweensOf=D.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=D.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=_("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=H,a.setRatio=F,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},D._onPluginEvent=function(t,e){var i,n,r,o,s,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(s=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:o)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:o=a,a=s}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(B[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,o={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},s=_("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},!0===t.global),a=s.prototype=new et(i);a.constructor=s,s.API=t.API;for(e in o)"function"==typeof t[e]&&(a[o[e]]=t[e]);return s.version=t.version,et.activate([s]),s},o=t._gsQueue){for(s=0;s<o.length;s++)o[s]();for(a in m)m[a].func||t.console.log("GSAP encountered missing dependency: "+a)}u=!1}}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window);var _extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.LazyLoad=e()}(this,function(){"use strict";var t={elements_selector:"img",container:document,threshold:300,data_src:"src",data_srcset:"srcset",class_loading:"loading",class_loaded:"loaded",class_error:"error",callback_load:null,callback_error:null,callback_set:null},e=function(t,e){return t.getAttribute("data-"+e)},i=function(t,e,i){return t.setAttribute("data-"+e,i)},n=function(t){return t.filter(function(t){return!e(t,"was-processed")})},r=function(t,e){var i=new t(e),n=new CustomEvent("LazyLoad::Initialized",{detail:{instance:i}});window.dispatchEvent(n)},o=function(t,i){var n=i.data_srcset,r=t.parentElement;if("PICTURE"===r.tagName)for(var o,s=0;o=r.children[s];s+=1)if("SOURCE"===o.tagName){var a=e(o,n);a&&o.setAttribute("srcset",a)}},s=function(t,i){var n=i.data_src,r=i.data_srcset,s=t.tagName,a=e(t,n);if("IMG"===s){o(t,i);var l=e(t,r);return l&&t.setAttribute("srcset",l),void(a&&t.setAttribute("src",a))}"IFRAME"!==s?a&&(t.style.backgroundImage='url("'+a+'")'):a&&t.setAttribute("src",a)},a=!!document.body.classList,l=function(t,e){a?t.classList.add(e):t.className+=(t.className?" ":"")+e},u=function(t,e){a?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\s+)"+e+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},c=function(t,e){t&&t(e)},h=function(t,e,i){t.removeEventListener("load",e),t.removeEventListener("error",i)},f=function(t,e){var i=function i(r){d(r,!0,e),h(t,i,n)},n=function n(r){d(r,!1,e),h(t,i,n)};t.addEventListener("load",i),t.addEventListener("error",n)},d=function(t,e,i){var n=t.target;u(n,i.class_loading),l(n,e?i.class_loaded:i.class_error),c(e?i.callback_load:i.callback_error,n)},p=function(t,e){["IMG","IFRAME"].indexOf(t.tagName)>-1&&(f(t,e),l(t,e.class_loading)),s(t,e),i(t,"was-processed",!0),c(e.callback_set,t)},m=function(e,i){this._settings=_extends({},t,e),this._setObserver(),this.update(i)};m.prototype={_setObserver:function(){var t=this;if("IntersectionObserver"in window){var e=this._settings;this._observer=new IntersectionObserver(function(i){i.forEach(function(i){if(i.isIntersecting){var n=i.target;p(n,e),t._observer.unobserve(n)}}),t._elements=n(t._elements)},{root:e.container===document?null:e.container,rootMargin:e.threshold+"px"})}},update:function(t){var e=this,i=this._settings,r=t||i.container.querySelectorAll(i.elements_selector);this._elements=n(Array.prototype.slice.call(r)),this._observer?this._elements.forEach(function(t){e._observer.observe(t)}):(this._elements.forEach(function(t){p(t,i)}),this._elements=n(this._elements))},destroy:function(){var t=this;this._observer&&(n(this._elements).forEach(function(e){t._observer.unobserve(e)}),this._observer=null),this._elements=null,this._settings=null}};var g=window.lazyLoadOptions;return g&&function(t,e){if(e.length)for(var i,n=0;i=e[n];n+=1)r(t,i);else r(t,e)}(m,g),m});var Timer=function(t,e){var i=this,n=!1;this.time=0,this.frame=0,this.deltatime=0;var r,o=0,s=[],a=function(t,e){if(t._time<i.time)if(0!=t._repeat){t.callback(t._time);var n=t._interval;n instanceof Array?t._time+=n[0]+Math.random()*(n[1]-n[0]):t._time+=n,t._repeat--}else setTimeout(i.off,0,t)},l=function(){requestAnimationFrame(l),i.update()};this.pause=function(t){return n=t,this},this.paused=function(){return n},this.start=function(){return r=(new Date).getTime(),o=0,i.frame=0,i.time=0,e&&l(),i},this.update=function(){var t=(new Date).getTime()-r,e=t-o;return o=t,e<250&&!n&&(i.time+=e,i.frame++,i.deltatime=e),s.forEach(a),i.time},this.onAt=function(t,e){var n={callback:e,_time:i.time+t,_repeat:1};return s.push(n),n},this.onEvery=function(t,e,n,r){if(0!==r){var o={callback:n,_time:i.time+e,_interval:t,_repeat:r||-1};return s.push(o),o}},this.off=function(t){if(t instanceof Function){var e="You are probably using the callback directly to remove it.\n";return e+="You should use the object returned from onAt or onEvery instead.",console.warn(e),void console.warn(t)}if(null!=t){var i=s.indexOf(t);return i>-1&&(s.splice(i,1),!0)}},this.clearTasks=function(){s.length=0},t&&i.start()},Trigger=function(){var t={},e=[],i=!1,n=[],r=[];return t.on=function(t,i){t.context=i,e.push(t)},t.off=function(t){var n=e.indexOf(t);-1!=n&&(i?r.push({callback:t}):e.splice(n,1))},t.trigger=function(o){if(i)n.push({data:o});else{i=!0;for(var s=0,a=e.length;s<a;){var l=e[s];l.call(l.context,o),s++}i=!1;for(var u;u=n.shift();)t.trigger(u.data);for(;u=r.shift();)t.off(u.callback)}},t},Simplrz=function(){var t={},e=["js"],i=function(i,n){var r=n();t[i]=!!r,e.push(r?i:"no-"+i),document.documentElement.setAttribute("class",e.join(" "))};t.pixelRatio=window.devicePixelRatio||1;var n=function(){var t="",e="",i="";return window.getComputedStyle&&(t=window.getComputedStyle(document.documentElement,""),e=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.OLink&&["","o"])[1],i="WebKit|Moz|MS|O".match(new RegExp("("+e+")","i"))[1]),{dom:i,lowercase:e,css:"-"+e+"-",js:""==e?"":e[0].toUpperCase()+e.substr(1)}}();t.prefix=n,e.push(n.lowercase),t.prefixedProp=function(t){switch(n.lowercase){case"webkit":return"webkit"+t.charAt(0).toUpperCase()+t.slice(1);case"ms":return"-ms-"+t;case"moz":return"Moz"+t.charAt(0).toUpperCase()+t.slice(1);default:return n.css+t}};var r=function(){for(var t=3,e=document.createElement("div"),i=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",i[0];);return t>4?t:null}();if(null==r){var o=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),s=navigator.userAgent.match(o);r=s&&s.length>1?parseInt(s[1]):null}return t.ie=r||!1,e.push(r?"ie-"+r:"no-ie"),t.firefox="moz"==n.lowercase,e.push(t.firefox?"firefox":"no-firefox"),t.safariDesktop=navigator.userAgent.match(/Safari/)&&!navigator.userAgent.match(/Chrome/)&&!("ontouchstart"in document),e.push(t.safariDesktop?"safari-desktop":"no-safari-desktop"),t.iOS=/(iPad|iPhone|iPod)/g.test(navigator.userAgent),e.push(t.iOS?"ios":"no-ios"),t.iPad="iPad"==navigator.platform,e.push(t.iPad?"ipad":"no-ipad"),i("css3d",function(){if("webkit"==n.lowercase||"moz"==n.lowercase)return!0;if("ms"==n.lowercase){var t=document.createElement("div");t.style[n.css+"transform"]="translateZ(0px)";var e=getComputedStyle(t).getPropertyValue(n.css+"transform");return e&&""!=e&&"none"!=e}return!1}),i("csstransitions",function(){return!r||r>=10}),i("cssanimations",function(){return!r||r>=10}),i("css2d",function(){return!r||r>=9}),i("touch",function(){return"ontouchstart"in document&&"Win32"!=navigator.platform}),i("pointer",function(){return navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1}),i("canvas",function(){try{return document.createElement("canvas").getContext("2d")}catch(t){return!1}}),i("history",function(){return!(!window.history||!history.pushState)}),i("webrtc",function(){return"getUserMedia"in navigator||"webkitGetUserMedia"in navigator}),i("webgl",function(){try{var t=document.createElement("canvas");return!!window.WebGLRenderingContext&&(t.getContext("webgl")||t.getContext("experimental-webgl"))}catch(t){return!1}}),t.classes=e,t}(),Application=function(){var t={};return t.flags={},document.location.search.substring(1).split("&").forEach(function(e){var i=e.split("=");t.flags[i[0]]=parseFloat(i[1])}),t.resize=new Trigger,t.init=function(e){e=e||{},window.addEventListener("resize",function(e){t.resize.trigger(e)}),window.addEventListener("orientationchange",function(e){t.resize.trigger(e)})},t}(),DomExtend=function(){var t={};return t.create=function(e){var i=document.createElement(e);return t.extend(i),i},t.select=function(e,i){var n=(i||document).querySelector(e);return n&&!n.ext&&t.extend(n),n},t.selectAll=function(e,i){for(var n=(i||document).querySelectorAll(e),r=n.length,o=[],s=0;s<r;s++){var a=n[s];a.ext||(a=t.extend(a)),o.push(a)}return o},t.extend=function(e){if(e.ext)return e;var i={};return i.create=function(e){return t.create(e)},i.select=function(i){return t.select(i,e)},i.selectAll=function(i){return t.selectAll(i,e)},i.detach=function(){var t=e.parentNode;t&&t.removeChild(e)},i.attachTo=function(t){e.parentNode!=t&&t.appendChild(e)},window.ExtState&&ExtState(i,e),window.ExtTransform&&ExtTransform(i,e),window.ExtTransition&&ExtTransition(i,e),window.ExtAnimation&&ExtAnimation(i,e,t),i.element=e,e.ext=i,e},t.extend(document),window.EXT=t,t}(),ExtTransform=function(t,e){var i={width:0,height:0,top:0,left:0};t.rect=function(){try{return e.getBoundingClientRect()}catch(t){return console.log(t.stack),i}},t.width=function(i){return i?(e.style.width=i+"px",i):t.rect().width},t.height=function(i){return i?(e.style.height=i+"px",i):t.rect().height},t.x=0,t.y=0,t.z=0,t.rotX=0,t.rotY=0,t.rotZ=0,t.scaleX=1,t.scaleY=1,t.scaleZ=1,t.setX=function(e){return t.x=e,t},t.setY=function(e){return t.y=e,t},t.setZ=function(e){return t.z=e,t},t.transformToString=function(e){var i="";return(e=e||t).x&&(i+="translateX("+e.x+"px) "),e.y&&(i+="translateY("+e.y+"px) "),Simplrz.css3d&&(i+="translateZ("+e.z+"px) "),e.rotX&&Simplrz.css3d&&(i+="rotateX("+e.rotX+"deg)  "),e.rotY&&Simplrz.css3d&&(i+="rotateY("+e.rotY+"deg)"),e.rotZ&&Simplrz.css3d?i+="rotateZ("+e.rotZ+"deg) ":e.rotZ&&(i+="rotate("+e.rotZ+"deg) "),1!=e.scaleX&&(i+="scaleX("+e.scaleX+") "),1!=e.scaleY&&(i+="scaleY("+e.scaleY+") "),1!=e.scaleZ&&Simplrz.css3d&&(i+="scaleZ("+e.scaleZ+")"),i},t.transform=function(i){if(i)for(var n in i)t[n]=i[n];var r=t.transformToString(t,!1);e.style[Simplrz.prefixedProp("transform")]=r,e.style.transform=r}},ExtTransition=function(t,e){var i={transition:"transitionEnd",Moz:"transitionend",O:"oTransitionEnd",Webkit:"webkitTransitionEnd",Ms:"MSTransitionEnd"}[Simplrz.prefix.js],n="transform",r=function(){return(new Date).getTime()};t.createTransition=function(){function o(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}var s,a,l,u,c={},h=[],f=[],d=0,p=function(t){if(--a<=0){var e=r()-l;e>=d?m():u||(setTimeout(m,e),u=!0)}},m=function(){c.clear(),s&&s()},g=function(i){for(var r=i.length,o=0;o<r;o++){var s=i[o][0],a=i[o][1];s==n?t.transform(a):e.style[s]=a}return c};return c.add=function(t,e,i,n,r){return d=Math.max(d,i),n=n||Util.cssEase.ease,r=r||0,h.push([o(t),i+"ms",n,r+"ms"].join(" ")),f.push([t,e]),c},c.trs=function(t,e,i,r){return d=Math.max(d,e),i=i||Util.cssEase.ease,r=r||0,h.push([Simplrz.prefix.css+"transform",e+"ms",i,r+"ms"].join(" ")),f.push([n,t]),c},c.clear=function(){e.removeEventListener(i,p),h=[],f=[],e.style[Simplrz.prefix.js+"Transition"]="",e.style.transition=""},c.start=function(t){return s=t,a=f.length,e.offsetWidth=e.offsetWidth,e.addEventListener(i,p),l=r(),u=!1,e.style[Simplrz.prefix.js+"Transition"]=h,e.style.transition=h,g(f),c},c.then=function(e){var i=t.createTransition();return c.start(function(){e(),i.start()}),i},c},t.transition=function(e,i,r,o,s){var a=t.createTransition();for(var l in e){var u=e[l];l==n?a.trs(u,i,r,o):a.add(l,u,i,r,o)}return a.start(s),a}},ExtAnimation=function(t,e,i){var n={animation:"animationend",Moz:"animationend",O:"oanimationend",Webkit:"webkitAnimationEnd",Ms:"MSAnimationEnd"},r=function(t){return[t.name,t.duration+"s",t.ease,t.delay+"s",t.count,t.direction,t.fillMode].join(" ")},o=function(t,e,i,n){var r={name:t,duration:e||1,ease:i||"ease",delay:n||0,count:1,direction:"normal",fillMode:"backwards"};return r.setTime=function(t){return r.time=t,r},r.setDelay=function(t){return r.delay=t,r},r};i.createAnimation=o,t.createAnimation=o,t.animate=function(i,o,s){var a;if(i instanceof Array){var l=[];i.forEach(function(t){l.push(r(t))}),a=l.join(", ")}else a=r(i);var u=n[Simplrz.prefix.js];e._onEnded&&e.removeEventListener(u,e._onEnded),e._onEnded=function(){e.removeEventListener(u,e._onEnded),null==s&&(e.style[Simplrz.prefix.js+"Animation"]="",e.style.animation=""),o&&o()},e.style[Simplrz.prefix.js+"Animation"]="",e.style.animation="",setTimeout(function(){t.show&&t.show(),e.addEventListener(u,e._onEnded),e.style[Simplrz.prefix.js+"Animation"]=a,e.style.animation=a},0)}},FrameImpulse=function(){for(var t,e=["webkit","moz"],i={},n=[],r=0,o=[],s=0,a=0;a<e.length&&!window.requestAnimationFrame;++a)window.requestAnimationFrame=window[e[a]+"RequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var e=(new Date).getTime(),i=Math.max(0,16-(e-s)),n=window.setTimeout(function(){t(e+i)},i);return s=e+i,n});var l=function(e){if(requestAnimationFrame(l),0!=r){for(s=0;s<r;s++)n[s].call(e);if(t>0){for(var i=[],s=n.length-1;s>=0;s--)for(var a=0;a<o.length;a++)n[s]===o[a]&&i.push(s);for(s=0;s<i.length;s++)n.splice(i[s],1);r=n.length,o=[],t=0}}};return i.on=function(t){n.indexOf(t)>-1||(n.push(t),r=n.length)},i.off=function(t){var e=n.indexOf(t);-1!=e&&(n.splice(e,1),r=n.length)},i.getListeners=function(){return n},l(),i}(),VirtualScroll=function(t){var e,i,n,r,o={},s=[],a=!1,l=2,u=15,c=120,h=1,f="onwheel"in t,d="onmousewheel"in t,p="ontouchstart"in t,m="onkeydown"in t,g=navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,v=!!window.navigator.msPointerEnabled,_=navigator.userAgent.indexOf("Firefox")>-1,y={y:0,x:0,deltaX:0,deltaY:0,originalEvent:null};o.on=function(t){a||C(),-1==s.indexOf(t)&&(s.push(t),e=s.length)},o.options=function(t){c=t.keyStep||120,u=t.firefoxMult||15,l=t.touchMult||2,h=t.mouseMult||1},o.off=function(t){var i=s.indexOf(t);-1!=i&&(s.splice(i,1),(e=s.length)<=0&&E())},o.lockTouch=function(){t.addEventListener("touchmove",function(t){t.preventDefault()})};var x=function(t){y.x+=y.deltaX,y.y+=y.deltaY,y.originalEvent=t;for(var i=0;i<e;i++)s[i](y)},b=function(t){y.deltaX=t.wheelDeltaX||-1*t.deltaX,y.deltaY=t.wheelDeltaY||-1*t.deltaY,_&&1==t.deltaMode&&(y.deltaX*=u,y.deltaY*=u),y.deltaX*=h,y.deltaY*=h,x(t)},w=function(t){y.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,y.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,x(t)},T=function(t){var e=t.targetTouches?t.targetTouches[0]:t;i=e.pageX,n=e.pageY},S=function(t){var e=t.targetTouches?t.targetTouches[0]:t;y.deltaX=(e.pageX-i)*l,y.deltaY=(e.pageY-n)*l,i=e.pageX,n=e.pageY,x(t)},k=function(t){switch(y.deltaX=y.deltaY=0,t.keyCode){case 37:y.deltaX=-c;break;case 39:y.deltaX=c;break;case 38:y.deltaY=c;break;case 40:y.deltaY=-c}x(t)},C=function(){f&&t.addEventListener("wheel",b),d&&t.addEventListener("mousewheel",w),p&&(t.addEventListener("touchstart",T),t.addEventListener("touchmove",S)),v&&g&&(r=t.body.style.msTouchAction,t.body.style.msTouchAction="none",t.addEventListener("MSPointerDown",T,!0),t.addEventListener("MSPointerMove",S,!0)),m&&t.addEventListener("keydown",k),a=!0},E=function(){f&&t.removeEventListener("wheel",b),d&&t.removeEventListener("mousewheel",w),p&&(t.removeEventListener("touchstart",T),t.removeEventListener("touchmove",S)),v&&g&&(t.body.style.msTouchAction=r,t.removeEventListener("MSPointerDown",T,!0),t.removeEventListener("MSPointerMove",S,!0)),m&&t.removeEventListener("keydown",k),a=!1};return o}(document);ScrollPane=function(t,e,i){var n,r,o,s,a,l,u,c,h=!1,f=Simplrz.touch?.5:.25,d=function(t){e&&e()||(r-=t.deltaY*f,r=Math.max(r,0),r=Math.min(r,a))},p=function(){if(!(n<s)){o+=.1*(r-o),t.ext.setY(-o).transform(),App.globalScroll=o;var e=o/a;l&&(l.style.visibility=n<s?"hidden":"visible",l.ext.setY(e*c).setZ(.01).transform()),i&&i(o/a,o,s)}};return{refresh:function(e,i){s=e||window.innerHeight,c=i-u||c,n=t.ext.height(),a=n-s,o=0,r=0,Simplrz.touch?this.off():this.on(e)},setScrollbar:function(t,e,i){if(l=t,l.style.height=e+"px",u=e,c=i-e,!Simplrz.touch){var n=new SQR.V2;document.addEventListener("mouseup",function(){h=!1}),document.addEventListener("mousemove",function(t){if(h){var e=(t=Simplrz.touch?t.targetTouches[0]:t).pageY-n.y;r+=e/c*a,r=Math.max(r,0),r=Math.min(r,a),n.set(t.pageX,t.pageY)}}),l.ext.on("mousedown",function(t){t=Simplrz.touch?t.targetTouches[0]:t,n.set(t.pageX,t.pageY),h=!0})}},on:function(t){VirtualScroll.on(d),FrameImpulse.on(p)},off:function(){VirtualScroll.off(d),FrameImpulse.off(p),t.ext.setY(0).transform()}}};var App=function(){function t(){App.scrollArticle.refresh(window.innerHeight-App.container.ext.rect().top),Object.keys(App.elements).forEach(function(t){App.elements[t].forEach(function(t){t.refresh()})}),Simplrz.touch?App.scrollArticle.off():App.scrollArticle.on(window.innerHeight-App.container.ext.rect().top)}function e(){Timer.global=new Timer(!0,!0);new Trigger;App.elements.sections=[],EXT.selectAll(".will-change").forEach(function(t){App.elements.sections.push(new Section(t,{offsetTop:.5*-window.innerHeight}))}),App.elements.backgrounds=[],EXT.selectAll(".background").forEach(function(t,e){App.elements.backgrounds.push(new Background(t))}),App.elements.blocks=[],EXT.selectAll(".will-appear").forEach(function(t,e){App.elements.blocks.push(new Item(t))}),App.elements.carousels=[],EXT.selectAll(".carousel-content").forEach(function(t){App.elements.carousels.push(new Carousel(t))}),App.container=EXT.select("#page-container"),App.header=EXT.select(".site-header"),App.heroic=EXT.select(".heroic .section-content"),App.scrollArticle=ScrollPane(App.container,null,function(t,e,i,n){App.header.style.opacity=1-5*t,App.header.ext.y=-400*t,App.header.ext.transform(),App.heroic.ext.setY(-500*t).transform(),Object.keys(App.elements).forEach(function(t){App.elements[t].forEach(function(t){t.inViewport(e,i)})})}),$("#contact-form").on("submit",function(t){t.preventDefault();let e=t.target;$.ajax({url:e.action,method:"POST",data:$(e).serialize(),dataType:"json"}).done(function(t,e,i){console.log(t,e,i)}).fail(function(t,e,i){console.log(t,e,i)})}),Application.init(),Application.resize.on(function(){t()})}var i;return{globalScroll:0,elements:{},getInstance:function(){return i||(i=e()),i}}}();$(window).on("load",function(){var t;App.getInstance();"function"==typeof window.Event?t=new Event("resize"):(t=document.createEvent("Event")).initEvent("resize",!1,!1),window.dispatchEvent(t),console.log(EXT.select(".wrap"));new LazyLoad({container:EXT.select(".wrap"),threshold:600,elements_selector:".background-inner",callback_set:function(t){t.classList.add("loaded")}}),new LazyLoad({container:EXT.select(".wrap"),threshold:1e3,elements_selector:".lazy"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
